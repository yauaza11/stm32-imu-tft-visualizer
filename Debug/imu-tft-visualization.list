
imu-tft-visualization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001154  0800f288  0800f288  00010288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080103dc  080103dc  000121f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080103dc  080103dc  000113dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080103e4  080103e4  000121f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080103e4  080103e4  000113e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080103e8  080103e8  000113e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  080103ec  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000121f8  2**0
                  CONTENTS
 10 .bss          00000a34  200001f8  200001f8  000121f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c2c  20000c2c  000121f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000121f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001761a  00000000  00000000  00012228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045cb  00000000  00000000  00029842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  0002de10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec0  00000000  00000000  0002f1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f6e  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cf64  00000000  00000000  00055fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce6b8  00000000  00000000  00072f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001415fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000632c  00000000  00000000  00141640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0014796c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f26c 	.word	0x0800f26c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800f26c 	.word	0x0800f26c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <ILI9341_DrawFilledRectangleCoord>:
		ILI9341_DrawPixel(X1, Y1, color);
	}
}

void ILI9341_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b089      	sub	sp, #36	@ 0x24
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	4611      	mov	r1, r2
 8000f80:	461a      	mov	r2, r3
 8000f82:	4623      	mov	r3, r4
 8000f84:	80fb      	strh	r3, [r7, #6]
 8000f86:	4603      	mov	r3, r0
 8000f88:	80bb      	strh	r3, [r7, #4]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	807b      	strh	r3, [r7, #2]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	74bb      	strb	r3, [r7, #18]
	int32_t negCalc = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
	uint16_t X0True = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	823b      	strh	r3, [r7, #16]
	uint16_t Y0True = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	81fb      	strh	r3, [r7, #14]

	negCalc = X1 - X0;
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negX = 1;
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	da01      	bge.n	8000fc0 <ILI9341_DrawFilledRectangleCoord+0x4c>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]

	negCalc = Y1 - Y0;
 8000fc4:	883a      	ldrh	r2, [r7, #0]
 8000fc6:	88bb      	ldrh	r3, [r7, #4]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negY = 1;
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	da01      	bge.n	8000fd6 <ILI9341_DrawFilledRectangleCoord+0x62>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	74bb      	strb	r3, [r7, #18]

	if(!negX)
 8000fd6:	7cfb      	ldrb	r3, [r7, #19]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d106      	bne.n	8000fea <ILI9341_DrawFilledRectangleCoord+0x76>
	{
		xLen = X1 - X0;
 8000fdc:	887a      	ldrh	r2, [r7, #2]
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	82fb      	strh	r3, [r7, #22]
		X0True = X0;
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	823b      	strh	r3, [r7, #16]
 8000fe8:	e005      	b.n	8000ff6 <ILI9341_DrawFilledRectangleCoord+0x82>
	}
	else
	{
		xLen = X0 - X1;
 8000fea:	88fa      	ldrh	r2, [r7, #6]
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	82fb      	strh	r3, [r7, #22]
		X0True = X1;
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	823b      	strh	r3, [r7, #16]
	}

	if(!negY)
 8000ff6:	7cbb      	ldrb	r3, [r7, #18]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d106      	bne.n	800100a <ILI9341_DrawFilledRectangleCoord+0x96>
	{
		yLen = Y1 - Y0;
 8000ffc:	883a      	ldrh	r2, [r7, #0]
 8000ffe:	88bb      	ldrh	r3, [r7, #4]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	82bb      	strh	r3, [r7, #20]
		Y0True = Y0;
 8001004:	88bb      	ldrh	r3, [r7, #4]
 8001006:	81fb      	strh	r3, [r7, #14]
 8001008:	e005      	b.n	8001016 <ILI9341_DrawFilledRectangleCoord+0xa2>
	}
	else
	{
		yLen = Y0 - Y1;
 800100a:	88ba      	ldrh	r2, [r7, #4]
 800100c:	883b      	ldrh	r3, [r7, #0]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	82bb      	strh	r3, [r7, #20]
		Y0True = Y1;
 8001012:	883b      	ldrh	r3, [r7, #0]
 8001014:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
 8001016:	8abc      	ldrh	r4, [r7, #20]
 8001018:	8afa      	ldrh	r2, [r7, #22]
 800101a:	89f9      	ldrh	r1, [r7, #14]
 800101c:	8a38      	ldrh	r0, [r7, #16]
 800101e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	4623      	mov	r3, r4
 8001024:	f000 fc38 	bl	8001898 <ILI9341_DrawRectangle>
}
 8001028:	bf00      	nop
 800102a:	371c      	adds	r7, #28
 800102c:	46bd      	mov	sp, r7
 800102e:	bd90      	pop	{r4, r7, pc}

08001030 <ILI9341_DrawChar>:

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b08d      	sub	sp, #52	@ 0x34
 8001034:	af02      	add	r7, sp, #8
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	4611      	mov	r1, r2
 800103a:	461a      	mov	r2, r3
 800103c:	4603      	mov	r3, r0
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	460b      	mov	r3, r1
 8001042:	81bb      	strh	r3, [r7, #12]
 8001044:	4613      	mov	r3, r2
 8001046:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2b1e      	cmp	r3, #30
 800104c:	d964      	bls.n	8001118 <ILI9341_DrawChar+0xe8>
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	2b00      	cmp	r3, #0
 8001054:	db60      	blt.n	8001118 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	3301      	adds	r3, #1
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	3302      	adds	r3, #2
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	3303      	adds	r3, #3
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	3b20      	subs	r3, #32
 8001078:	7ffa      	ldrb	r2, [r7, #31]
 800107a:	fb02 f303 	mul.w	r3, r2, r3
 800107e:	3304      	adds	r3, #4
 8001080:	68ba      	ldr	r2, [r7, #8]
 8001082:	4413      	add	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8001086:	7fbb      	ldrb	r3, [r7, #30]
 8001088:	b29a      	uxth	r2, r3
 800108a:	7f7b      	ldrb	r3, [r7, #29]
 800108c:	b29c      	uxth	r4, r3
 800108e:	88f9      	ldrh	r1, [r7, #6]
 8001090:	89b8      	ldrh	r0, [r7, #12]
 8001092:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	4623      	mov	r3, r4
 8001098:	f000 fbfe 	bl	8001898 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
 80010a0:	e035      	b.n	800110e <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
 80010a6:	e02b      	b.n	8001100 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 80010a8:	7f3b      	ldrb	r3, [r7, #28]
 80010aa:	6a3a      	ldr	r2, [r7, #32]
 80010ac:	fb03 f202 	mul.w	r2, r3, r2
 80010b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b2:	10db      	asrs	r3, r3, #3
 80010b4:	f003 031f 	and.w	r3, r3, #31
 80010b8:	4413      	add	r3, r2
 80010ba:	3301      	adds	r3, #1
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4413      	add	r3, r2
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	2201      	movs	r2, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 80010d2:	7dfa      	ldrb	r2, [r7, #23]
 80010d4:	7dbb      	ldrb	r3, [r7, #22]
 80010d6:	4013      	ands	r3, r2
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00d      	beq.n	80010fa <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 80010de:	6a3b      	ldr	r3, [r7, #32]
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	89bb      	ldrh	r3, [r7, #12]
 80010e4:	4413      	add	r3, r2
 80010e6:	b298      	uxth	r0, r3
 80010e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	4413      	add	r3, r2
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80010f4:	4619      	mov	r1, r3
 80010f6:	f000 fb69 	bl	80017cc <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80010fa:	6a3b      	ldr	r3, [r7, #32]
 80010fc:	3301      	adds	r3, #1
 80010fe:	623b      	str	r3, [r7, #32]
 8001100:	7fbb      	ldrb	r3, [r7, #30]
 8001102:	6a3a      	ldr	r2, [r7, #32]
 8001104:	429a      	cmp	r2, r3
 8001106:	dbcf      	blt.n	80010a8 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 8001108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110a:	3301      	adds	r3, #1
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
 800110e:	7f7b      	ldrb	r3, [r7, #29]
 8001110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001112:	429a      	cmp	r2, r3
 8001114:	dbc5      	blt.n	80010a2 <ILI9341_DrawChar+0x72>
 8001116:	e000      	b.n	800111a <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 8001118:	bf00      	nop
			}
		}
	}
}
 800111a:	372c      	adds	r7, #44	@ 0x2c
 800111c:	46bd      	mov	sp, r7
 800111e:	bd90      	pop	{r4, r7, pc}

08001120 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	@ 0x28
 8001124:	af02      	add	r7, sp, #8
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	4611      	mov	r1, r2
 800112c:	461a      	mov	r2, r3
 800112e:	460b      	mov	r3, r1
 8001130:	80fb      	strh	r3, [r7, #6]
 8001132:	4613      	mov	r3, r2
 8001134:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	3301      	adds	r3, #1
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8001144:	e02d      	b.n	80011a2 <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	7818      	ldrb	r0, [r3, #0]
 800114a:	88b9      	ldrh	r1, [r7, #4]
 800114c:	88fa      	ldrh	r2, [r7, #6]
 800114e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	460b      	mov	r3, r1
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	f7ff ff69 	bl	8001030 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	3b20      	subs	r3, #32
 8001164:	7ffa      	ldrb	r2, [r7, #31]
 8001166:	fb02 f303 	mul.w	r3, r2, r3
 800116a:	3304      	adds	r3, #4
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	4413      	add	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8001178:	7dfb      	ldrb	r3, [r7, #23]
 800117a:	1c9a      	adds	r2, r3, #2
 800117c:	7fbb      	ldrb	r3, [r7, #30]
 800117e:	429a      	cmp	r2, r3
 8001180:	da07      	bge.n	8001192 <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8001182:	7dfb      	ldrb	r3, [r7, #23]
 8001184:	b29a      	uxth	r2, r3
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	4413      	add	r3, r2
 800118a:	b29b      	uxth	r3, r3
 800118c:	3302      	adds	r3, #2
 800118e:	80fb      	strh	r3, [r7, #6]
 8001190:	e004      	b.n	800119c <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 8001192:	7fbb      	ldrb	r3, [r7, #30]
 8001194:	b29a      	uxth	r2, r3
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	4413      	add	r3, r2
 800119a:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3301      	adds	r3, #1
 80011a0:	60fb      	str	r3, [r7, #12]
	while (*str)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1cd      	bne.n	8001146 <ILI9341_DrawText+0x26>
	}
}
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <ILI9341_SPI_Tx>:
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
  }
}

static void ILI9341_SPI_Tx(uint8_t data)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
//	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
//	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
	 HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, HAL_MAX_DELAY);
 80011be:	1df9      	adds	r1, r7, #7
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	2201      	movs	r2, #1
 80011c6:	4803      	ldr	r0, [pc, #12]	@ (80011d4 <ILI9341_SPI_Tx+0x20>)
 80011c8:	f006 fbdd 	bl	8007986 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200002c4 	.word	0x200002c4

080011d8 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
//	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
//	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
	 HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, HAL_MAX_DELAY);
 80011e4:	887a      	ldrh	r2, [r7, #2]
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4803      	ldr	r0, [pc, #12]	@ (80011fc <ILI9341_SPI_TxBuffer+0x24>)
 80011ee:	f006 fbca 	bl	8007986 <HAL_SPI_Transmit>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200002c4 	.word	0x200002c4

08001200 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 800120a:	2200      	movs	r2, #0
 800120c:	2104      	movs	r1, #4
 800120e:	4808      	ldr	r0, [pc, #32]	@ (8001230 <ILI9341_WriteCommand+0x30>)
 8001210:	f001 ff7c 	bl	800310c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001214:	2200      	movs	r2, #0
 8001216:	2101      	movs	r1, #1
 8001218:	4806      	ldr	r0, [pc, #24]	@ (8001234 <ILI9341_WriteCommand+0x34>)
 800121a:	f001 ff77 	bl	800310c <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ffc7 	bl	80011b4 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40020c00 	.word	0x40020c00
 8001234:	40020400 	.word	0x40020400

08001238 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001242:	2201      	movs	r2, #1
 8001244:	2104      	movs	r1, #4
 8001246:	4808      	ldr	r0, [pc, #32]	@ (8001268 <ILI9341_WriteData+0x30>)
 8001248:	f001 ff60 	bl	800310c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800124c:	2200      	movs	r2, #0
 800124e:	2101      	movs	r1, #1
 8001250:	4806      	ldr	r0, [pc, #24]	@ (800126c <ILI9341_WriteData+0x34>)
 8001252:	f001 ff5b 	bl	800310c <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ffab 	bl	80011b4 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40020c00 	.word	0x40020c00
 800126c:	40020400 	.word	0x40020400

08001270 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 800127c:	2201      	movs	r2, #1
 800127e:	2104      	movs	r1, #4
 8001280:	4808      	ldr	r0, [pc, #32]	@ (80012a4 <ILI9341_WriteBuffer+0x34>)
 8001282:	f001 ff43 	bl	800310c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001286:	2200      	movs	r2, #0
 8001288:	2101      	movs	r1, #1
 800128a:	4807      	ldr	r0, [pc, #28]	@ (80012a8 <ILI9341_WriteBuffer+0x38>)
 800128c:	f001 ff3e 	bl	800310c <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	4619      	mov	r1, r3
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff9f 	bl	80011d8 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40020c00 	.word	0x40020c00
 80012a8:	40020400 	.word	0x40020400

080012ac <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4604      	mov	r4, r0
 80012b4:	4608      	mov	r0, r1
 80012b6:	4611      	mov	r1, r2
 80012b8:	461a      	mov	r2, r3
 80012ba:	4623      	mov	r3, r4
 80012bc:	80fb      	strh	r3, [r7, #6]
 80012be:	4603      	mov	r3, r0
 80012c0:	80bb      	strh	r3, [r7, #4]
 80012c2:	460b      	mov	r3, r1
 80012c4:	807b      	strh	r3, [r7, #2]
 80012c6:	4613      	mov	r3, r2
 80012c8:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	b29b      	uxth	r3, r3
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80012e4:	887b      	ldrh	r3, [r7, #2]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80012ea:	202a      	movs	r0, #42	@ 0x2a
 80012ec:	f7ff ff88 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	2104      	movs	r1, #4
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ffba 	bl	8001270 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80012fc:	88bb      	ldrh	r3, [r7, #4]
 80012fe:	0a1b      	lsrs	r3, r3, #8
 8001300:	b29b      	uxth	r3, r3
 8001302:	b2db      	uxtb	r3, r3
 8001304:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8001306:	88bb      	ldrh	r3, [r7, #4]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 800130c:	883b      	ldrh	r3, [r7, #0]
 800130e:	0a1b      	lsrs	r3, r3, #8
 8001310:	b29b      	uxth	r3, r3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8001316:	883b      	ldrh	r3, [r7, #0]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 800131c:	202b      	movs	r0, #43	@ 0x2b
 800131e:	f7ff ff6f 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	2104      	movs	r1, #4
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ffa1 	bl	8001270 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 800132e:	202c      	movs	r0, #44	@ 0x2c
 8001330:	f7ff ff66 	bl	8001200 <ILI9341_WriteCommand>
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	bd90      	pop	{r4, r7, pc}

0800133c <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8001340:	2200      	movs	r2, #0
 8001342:	2102      	movs	r1, #2
 8001344:	480c      	ldr	r0, [pc, #48]	@ (8001378 <ILI9341_Reset+0x3c>)
 8001346:	f001 fee1 	bl	800310c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800134a:	200a      	movs	r0, #10
 800134c:	f001 fc0c 	bl	8002b68 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8001350:	2200      	movs	r2, #0
 8001352:	2101      	movs	r1, #1
 8001354:	4808      	ldr	r0, [pc, #32]	@ (8001378 <ILI9341_Reset+0x3c>)
 8001356:	f001 fed9 	bl	800310c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800135a:	200a      	movs	r0, #10
 800135c:	f001 fc04 	bl	8002b68 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001360:	2201      	movs	r2, #1
 8001362:	2102      	movs	r1, #2
 8001364:	4804      	ldr	r0, [pc, #16]	@ (8001378 <ILI9341_Reset+0x3c>)
 8001366:	f001 fed1 	bl	800310c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 800136a:	2201      	movs	r2, #1
 800136c:	2101      	movs	r1, #1
 800136e:	4802      	ldr	r0, [pc, #8]	@ (8001378 <ILI9341_Reset+0x3c>)
 8001370:	f001 fecc 	bl	800310c <HAL_GPIO_WritePin>
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40020400 	.word	0x40020400

0800137c <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001380:	2201      	movs	r2, #1
 8001382:	2102      	movs	r1, #2
 8001384:	4802      	ldr	r0, [pc, #8]	@ (8001390 <ILI9341_Enable+0x14>)
 8001386:	f001 fec1 	bl	800310c <HAL_GPIO_WritePin>
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40020400 	.word	0x40020400

08001394 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8001398:	f7ff fff0 	bl	800137c <ILI9341_Enable>
	ILI9341_Reset();
 800139c:	f7ff ffce 	bl	800133c <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff ff2d 	bl	8001200 <ILI9341_WriteCommand>
	HAL_Delay(10);
 80013a6:	200a      	movs	r0, #10
 80013a8:	f001 fbde 	bl	8002b68 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80013ac:	20cb      	movs	r0, #203	@ 0xcb
 80013ae:	f7ff ff27 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 80013b2:	2039      	movs	r0, #57	@ 0x39
 80013b4:	f7ff ff40 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 80013b8:	202c      	movs	r0, #44	@ 0x2c
 80013ba:	f7ff ff3d 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff ff3a 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80013c4:	2034      	movs	r0, #52	@ 0x34
 80013c6:	f7ff ff37 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80013ca:	2002      	movs	r0, #2
 80013cc:	f7ff ff34 	bl	8001238 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80013d0:	20cf      	movs	r0, #207	@ 0xcf
 80013d2:	f7ff ff15 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f7ff ff2e 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80013dc:	20c1      	movs	r0, #193	@ 0xc1
 80013de:	f7ff ff2b 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80013e2:	2030      	movs	r0, #48	@ 0x30
 80013e4:	f7ff ff28 	bl	8001238 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80013e8:	20e8      	movs	r0, #232	@ 0xe8
 80013ea:	f7ff ff09 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80013ee:	2085      	movs	r0, #133	@ 0x85
 80013f0:	f7ff ff22 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80013f4:	2000      	movs	r0, #0
 80013f6:	f7ff ff1f 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80013fa:	2078      	movs	r0, #120	@ 0x78
 80013fc:	f7ff ff1c 	bl	8001238 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8001400:	20ea      	movs	r0, #234	@ 0xea
 8001402:	f7ff fefd 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001406:	2000      	movs	r0, #0
 8001408:	f7ff ff16 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff ff13 	bl	8001238 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8001412:	20ed      	movs	r0, #237	@ 0xed
 8001414:	f7ff fef4 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8001418:	2064      	movs	r0, #100	@ 0x64
 800141a:	f7ff ff0d 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800141e:	2003      	movs	r0, #3
 8001420:	f7ff ff0a 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8001424:	2012      	movs	r0, #18
 8001426:	f7ff ff07 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 800142a:	2081      	movs	r0, #129	@ 0x81
 800142c:	f7ff ff04 	bl	8001238 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8001430:	20f7      	movs	r0, #247	@ 0xf7
 8001432:	f7ff fee5 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8001436:	2020      	movs	r0, #32
 8001438:	f7ff fefe 	bl	8001238 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 800143c:	20c0      	movs	r0, #192	@ 0xc0
 800143e:	f7ff fedf 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8001442:	2023      	movs	r0, #35	@ 0x23
 8001444:	f7ff fef8 	bl	8001238 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8001448:	20c1      	movs	r0, #193	@ 0xc1
 800144a:	f7ff fed9 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 800144e:	2010      	movs	r0, #16
 8001450:	f7ff fef2 	bl	8001238 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8001454:	20c5      	movs	r0, #197	@ 0xc5
 8001456:	f7ff fed3 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 800145a:	203e      	movs	r0, #62	@ 0x3e
 800145c:	f7ff feec 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8001460:	2028      	movs	r0, #40	@ 0x28
 8001462:	f7ff fee9 	bl	8001238 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8001466:	20c7      	movs	r0, #199	@ 0xc7
 8001468:	f7ff feca 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 800146c:	2086      	movs	r0, #134	@ 0x86
 800146e:	f7ff fee3 	bl	8001238 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8001472:	2036      	movs	r0, #54	@ 0x36
 8001474:	f7ff fec4 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8001478:	2048      	movs	r0, #72	@ 0x48
 800147a:	f7ff fedd 	bl	8001238 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 800147e:	203a      	movs	r0, #58	@ 0x3a
 8001480:	f7ff febe 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8001484:	2055      	movs	r0, #85	@ 0x55
 8001486:	f7ff fed7 	bl	8001238 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 800148a:	20b1      	movs	r0, #177	@ 0xb1
 800148c:	f7ff feb8 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff fed1 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8001496:	2018      	movs	r0, #24
 8001498:	f7ff fece 	bl	8001238 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 800149c:	20b6      	movs	r0, #182	@ 0xb6
 800149e:	f7ff feaf 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 80014a2:	2008      	movs	r0, #8
 80014a4:	f7ff fec8 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 80014a8:	2082      	movs	r0, #130	@ 0x82
 80014aa:	f7ff fec5 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 80014ae:	2027      	movs	r0, #39	@ 0x27
 80014b0:	f7ff fec2 	bl	8001238 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 80014b4:	20f2      	movs	r0, #242	@ 0xf2
 80014b6:	f7ff fea3 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80014ba:	2000      	movs	r0, #0
 80014bc:	f7ff febc 	bl	8001238 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 80014c0:	2026      	movs	r0, #38	@ 0x26
 80014c2:	f7ff fe9d 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff feb6 	bl	8001238 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 80014cc:	20e0      	movs	r0, #224	@ 0xe0
 80014ce:	f7ff fe97 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 80014d2:	200f      	movs	r0, #15
 80014d4:	f7ff feb0 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80014d8:	2031      	movs	r0, #49	@ 0x31
 80014da:	f7ff fead 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 80014de:	202b      	movs	r0, #43	@ 0x2b
 80014e0:	f7ff feaa 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80014e4:	200c      	movs	r0, #12
 80014e6:	f7ff fea7 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80014ea:	200e      	movs	r0, #14
 80014ec:	f7ff fea4 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80014f0:	2008      	movs	r0, #8
 80014f2:	f7ff fea1 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 80014f6:	204e      	movs	r0, #78	@ 0x4e
 80014f8:	f7ff fe9e 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80014fc:	20f1      	movs	r0, #241	@ 0xf1
 80014fe:	f7ff fe9b 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8001502:	2037      	movs	r0, #55	@ 0x37
 8001504:	f7ff fe98 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001508:	2007      	movs	r0, #7
 800150a:	f7ff fe95 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 800150e:	2010      	movs	r0, #16
 8001510:	f7ff fe92 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001514:	2003      	movs	r0, #3
 8001516:	f7ff fe8f 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800151a:	200e      	movs	r0, #14
 800151c:	f7ff fe8c 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8001520:	2009      	movs	r0, #9
 8001522:	f7ff fe89 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff fe86 	bl	8001238 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 800152c:	20e1      	movs	r0, #225	@ 0xe1
 800152e:	f7ff fe67 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001532:	2000      	movs	r0, #0
 8001534:	f7ff fe80 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001538:	200e      	movs	r0, #14
 800153a:	f7ff fe7d 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 800153e:	2014      	movs	r0, #20
 8001540:	f7ff fe7a 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001544:	2003      	movs	r0, #3
 8001546:	f7ff fe77 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 800154a:	2011      	movs	r0, #17
 800154c:	f7ff fe74 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001550:	2007      	movs	r0, #7
 8001552:	f7ff fe71 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001556:	2031      	movs	r0, #49	@ 0x31
 8001558:	f7ff fe6e 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 800155c:	20c1      	movs	r0, #193	@ 0xc1
 800155e:	f7ff fe6b 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8001562:	2048      	movs	r0, #72	@ 0x48
 8001564:	f7ff fe68 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001568:	2008      	movs	r0, #8
 800156a:	f7ff fe65 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800156e:	200f      	movs	r0, #15
 8001570:	f7ff fe62 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001574:	200c      	movs	r0, #12
 8001576:	f7ff fe5f 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800157a:	2031      	movs	r0, #49	@ 0x31
 800157c:	f7ff fe5c 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8001580:	2036      	movs	r0, #54	@ 0x36
 8001582:	f7ff fe59 	bl	8001238 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001586:	200f      	movs	r0, #15
 8001588:	f7ff fe56 	bl	8001238 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 800158c:	2011      	movs	r0, #17
 800158e:	f7ff fe37 	bl	8001200 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8001592:	2064      	movs	r0, #100	@ 0x64
 8001594:	f001 fae8 	bl	8002b68 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8001598:	2029      	movs	r0, #41	@ 0x29
 800159a:	f7ff fe31 	bl	8001200 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 800159e:	2000      	movs	r0, #0
 80015a0:	f000 f802 	bl	80015a8 <ILI9341_SetRotation>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 80015b2:	2036      	movs	r0, #54	@ 0x36
 80015b4:	f7ff fe24 	bl	8001200 <ILI9341_WriteCommand>
	HAL_Delay(1);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f001 fad5 	bl	8002b68 <HAL_Delay>

	switch(rotation)
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d837      	bhi.n	8001634 <ILI9341_SetRotation+0x8c>
 80015c4:	a201      	add	r2, pc, #4	@ (adr r2, 80015cc <ILI9341_SetRotation+0x24>)
 80015c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ca:	bf00      	nop
 80015cc:	080015dd 	.word	0x080015dd
 80015d0:	080015f3 	.word	0x080015f3
 80015d4:	08001609 	.word	0x08001609
 80015d8:	0800161f 	.word	0x0800161f
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 80015dc:	2048      	movs	r0, #72	@ 0x48
 80015de:	f7ff fe2b 	bl	8001238 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 80015e2:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <ILI9341_SetRotation+0x98>)
 80015e4:	22f0      	movs	r2, #240	@ 0xf0
 80015e6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80015e8:	4b16      	ldr	r3, [pc, #88]	@ (8001644 <ILI9341_SetRotation+0x9c>)
 80015ea:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015ee:	801a      	strh	r2, [r3, #0]
		break;
 80015f0:	e021      	b.n	8001636 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 80015f2:	2028      	movs	r0, #40	@ 0x28
 80015f4:	f7ff fe20 	bl	8001238 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80015f8:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <ILI9341_SetRotation+0x98>)
 80015fa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015fe:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001600:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <ILI9341_SetRotation+0x9c>)
 8001602:	22f0      	movs	r2, #240	@ 0xf0
 8001604:	801a      	strh	r2, [r3, #0]
		break;
 8001606:	e016      	b.n	8001636 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8001608:	2088      	movs	r0, #136	@ 0x88
 800160a:	f7ff fe15 	bl	8001238 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 800160e:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <ILI9341_SetRotation+0x98>)
 8001610:	22f0      	movs	r2, #240	@ 0xf0
 8001612:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001614:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <ILI9341_SetRotation+0x9c>)
 8001616:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800161a:	801a      	strh	r2, [r3, #0]
		break;
 800161c:	e00b      	b.n	8001636 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 800161e:	20e8      	movs	r0, #232	@ 0xe8
 8001620:	f7ff fe0a 	bl	8001238 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <ILI9341_SetRotation+0x98>)
 8001626:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800162a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 800162c:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <ILI9341_SetRotation+0x9c>)
 800162e:	22f0      	movs	r2, #240	@ 0xf0
 8001630:	801a      	strh	r2, [r3, #0]
		break;
 8001632:	e000      	b.n	8001636 <ILI9341_SetRotation+0x8e>
	default:
		break;
 8001634:	bf00      	nop
	}
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000002 	.word	0x20000002
 8001644:	20000000 	.word	0x20000000

08001648 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8001648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800164c:	b08d      	sub	sp, #52	@ 0x34
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	6039      	str	r1, [r7, #0]
 8001654:	80fb      	strh	r3, [r7, #6]
 8001656:	466b      	mov	r3, sp
 8001658:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001666:	d202      	bcs.n	800166e <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800166c:	e002      	b.n	8001674 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 800166e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001672:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001674:	2201      	movs	r2, #1
 8001676:	2104      	movs	r1, #4
 8001678:	483e      	ldr	r0, [pc, #248]	@ (8001774 <ILI9341_DrawColorBurst+0x12c>)
 800167a:	f001 fd47 	bl	800310c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	2101      	movs	r1, #1
 8001682:	483d      	ldr	r0, [pc, #244]	@ (8001778 <ILI9341_DrawColorBurst+0x130>)
 8001684:	f001 fd42 	bl	800310c <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	b29b      	uxth	r3, r3
 800168e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 8001692:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001694:	460b      	mov	r3, r1
 8001696:	3b01      	subs	r3, #1
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	2300      	movs	r3, #0
 800169c:	4688      	mov	r8, r1
 800169e:	4699      	mov	r9, r3
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016b4:	2300      	movs	r3, #0
 80016b6:	460c      	mov	r4, r1
 80016b8:	461d      	mov	r5, r3
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	00eb      	lsls	r3, r5, #3
 80016c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016c8:	00e2      	lsls	r2, r4, #3
 80016ca:	1dcb      	adds	r3, r1, #7
 80016cc:	08db      	lsrs	r3, r3, #3
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	ebad 0d03 	sub.w	sp, sp, r3
 80016d4:	466b      	mov	r3, sp
 80016d6:	3300      	adds	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 80016da:	2300      	movs	r3, #0
 80016dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016de:	e00e      	b.n	80016fe <ILI9341_DrawColorBurst+0xb6>
	{
		BurstBuffer[j] = chifted;
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e4:	4413      	add	r3, r2
 80016e6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80016ea:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 80016ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ee:	3301      	adds	r3, #1
 80016f0:	88fa      	ldrh	r2, [r7, #6]
 80016f2:	b2d1      	uxtb	r1, r2
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 80016f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016fa:	3302      	adds	r3, #2
 80016fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001702:	429a      	cmp	r2, r3
 8001704:	d3ec      	bcc.n	80016e0 <ILI9341_DrawColorBurst+0x98>
	}

	uint32_t SendingSize = size * 2;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001710:	fbb2 f3f3 	udiv	r3, r2, r3
 8001714:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800171a:	fbb3 f2f2 	udiv	r2, r3, r2
 800171e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001720:	fb01 f202 	mul.w	r2, r1, r2
 8001724:	1a9b      	subs	r3, r3, r2
 8001726:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d010      	beq.n	8001750 <ILI9341_DrawColorBurst+0x108>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
 8001732:	e009      	b.n	8001748 <ILI9341_DrawColorBurst+0x100>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001736:	b29a      	uxth	r2, r3
 8001738:	230a      	movs	r3, #10
 800173a:	69b9      	ldr	r1, [r7, #24]
 800173c:	480f      	ldr	r0, [pc, #60]	@ (800177c <ILI9341_DrawColorBurst+0x134>)
 800173e:	f006 f922 	bl	8007986 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	3301      	adds	r3, #1
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
 8001748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	429a      	cmp	r2, r3
 800174e:	d3f1      	bcc.n	8001734 <ILI9341_DrawColorBurst+0xec>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	b29a      	uxth	r2, r3
 8001754:	230a      	movs	r3, #10
 8001756:	69b9      	ldr	r1, [r7, #24]
 8001758:	4808      	ldr	r0, [pc, #32]	@ (800177c <ILI9341_DrawColorBurst+0x134>)
 800175a:	f006 f914 	bl	8007986 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800175e:	2201      	movs	r2, #1
 8001760:	2101      	movs	r1, #1
 8001762:	4805      	ldr	r0, [pc, #20]	@ (8001778 <ILI9341_DrawColorBurst+0x130>)
 8001764:	f001 fcd2 	bl	800310c <HAL_GPIO_WritePin>
 8001768:	46b5      	mov	sp, r6
}
 800176a:	bf00      	nop
 800176c:	3734      	adds	r7, #52	@ 0x34
 800176e:	46bd      	mov	sp, r7
 8001770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001774:	40020c00 	.word	0x40020c00
 8001778:	40020400 	.word	0x40020400
 800177c:	200002c4 	.word	0x200002c4

08001780 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <ILI9341_FillScreen+0x44>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	b29a      	uxth	r2, r3
 8001790:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <ILI9341_FillScreen+0x48>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	b29b      	uxth	r3, r3
 8001796:	2100      	movs	r1, #0
 8001798:	2000      	movs	r0, #0
 800179a:	f7ff fd87 	bl	80012ac <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <ILI9341_FillScreen+0x44>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <ILI9341_FillScreen+0x48>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	fb02 f303 	mul.w	r3, r2, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ff46 	bl	8001648 <ILI9341_DrawColorBurst>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000002 	.word	0x20000002
 80017c8:	20000000 	.word	0x20000000

080017cc <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
 80017d6:	460b      	mov	r3, r1
 80017d8:	80bb      	strh	r3, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80017de:	4b2c      	ldr	r3, [pc, #176]	@ (8001890 <ILI9341_DrawPixel+0xc4>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	88fa      	ldrh	r2, [r7, #6]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d24d      	bcs.n	8001886 <ILI9341_DrawPixel+0xba>
 80017ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001894 <ILI9341_DrawPixel+0xc8>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	88ba      	ldrh	r2, [r7, #4]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d247      	bcs.n	8001886 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	753b      	strb	r3, [r7, #20]
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	757b      	strb	r3, [r7, #21]
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	3301      	adds	r3, #1
 800180a:	121b      	asrs	r3, r3, #8
 800180c:	b2db      	uxtb	r3, r3
 800180e:	75bb      	strb	r3, [r7, #22]
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	3301      	adds	r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 800181a:	88bb      	ldrh	r3, [r7, #4]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	b29b      	uxth	r3, r3
 8001820:	b2db      	uxtb	r3, r3
 8001822:	743b      	strb	r3, [r7, #16]
 8001824:	88bb      	ldrh	r3, [r7, #4]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	747b      	strb	r3, [r7, #17]
 800182a:	88bb      	ldrh	r3, [r7, #4]
 800182c:	3301      	adds	r3, #1
 800182e:	121b      	asrs	r3, r3, #8
 8001830:	b2db      	uxtb	r3, r3
 8001832:	74bb      	strb	r3, [r7, #18]
 8001834:	88bb      	ldrh	r3, [r7, #4]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	3301      	adds	r3, #1
 800183a:	b2db      	uxtb	r3, r3
 800183c:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	b29b      	uxth	r3, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	733b      	strb	r3, [r7, #12]
 8001848:	887b      	ldrh	r3, [r7, #2]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 800184e:	202a      	movs	r0, #42	@ 0x2a
 8001850:	f7ff fcd6 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2104      	movs	r1, #4
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fd08 	bl	8001270 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001860:	202b      	movs	r0, #43	@ 0x2b
 8001862:	f7ff fccd 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	2104      	movs	r1, #4
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fcff 	bl	8001270 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8001872:	202c      	movs	r0, #44	@ 0x2c
 8001874:	f7ff fcc4 	bl	8001200 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	2102      	movs	r1, #2
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fcf6 	bl	8001270 <ILI9341_WriteBuffer>
 8001884:	e000      	b.n	8001888 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001886:	bf00      	nop
}
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000002 	.word	0x20000002
 8001894:	20000000 	.word	0x20000000

08001898 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4604      	mov	r4, r0
 80018a0:	4608      	mov	r0, r1
 80018a2:	4611      	mov	r1, r2
 80018a4:	461a      	mov	r2, r3
 80018a6:	4623      	mov	r3, r4
 80018a8:	80fb      	strh	r3, [r7, #6]
 80018aa:	4603      	mov	r3, r0
 80018ac:	80bb      	strh	r3, [r7, #4]
 80018ae:	460b      	mov	r3, r1
 80018b0:	807b      	strh	r3, [r7, #2]
 80018b2:	4613      	mov	r3, r2
 80018b4:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80018b6:	4b24      	ldr	r3, [pc, #144]	@ (8001948 <ILI9341_DrawRectangle+0xb0>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	88fa      	ldrh	r2, [r7, #6]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d23d      	bcs.n	800193e <ILI9341_DrawRectangle+0xa6>
 80018c2:	4b22      	ldr	r3, [pc, #136]	@ (800194c <ILI9341_DrawRectangle+0xb4>)
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	88ba      	ldrh	r2, [r7, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d237      	bcs.n	800193e <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 80018ce:	88fa      	ldrh	r2, [r7, #6]
 80018d0:	887b      	ldrh	r3, [r7, #2]
 80018d2:	4413      	add	r3, r2
 80018d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001948 <ILI9341_DrawRectangle+0xb0>)
 80018d6:	8812      	ldrh	r2, [r2, #0]
 80018d8:	b292      	uxth	r2, r2
 80018da:	4293      	cmp	r3, r2
 80018dc:	dd05      	ble.n	80018ea <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 80018de:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <ILI9341_DrawRectangle+0xb0>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 80018ea:	88ba      	ldrh	r2, [r7, #4]
 80018ec:	883b      	ldrh	r3, [r7, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a16      	ldr	r2, [pc, #88]	@ (800194c <ILI9341_DrawRectangle+0xb4>)
 80018f2:	8812      	ldrh	r2, [r2, #0]
 80018f4:	b292      	uxth	r2, r2
 80018f6:	4293      	cmp	r3, r2
 80018f8:	dd05      	ble.n	8001906 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 80018fa:	4b14      	ldr	r3, [pc, #80]	@ (800194c <ILI9341_DrawRectangle+0xb4>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	88bb      	ldrh	r3, [r7, #4]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001906:	88fa      	ldrh	r2, [r7, #6]
 8001908:	887b      	ldrh	r3, [r7, #2]
 800190a:	4413      	add	r3, r2
 800190c:	b29b      	uxth	r3, r3
 800190e:	3b01      	subs	r3, #1
 8001910:	b29c      	uxth	r4, r3
 8001912:	88ba      	ldrh	r2, [r7, #4]
 8001914:	883b      	ldrh	r3, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	b29b      	uxth	r3, r3
 800191a:	3b01      	subs	r3, #1
 800191c:	b29b      	uxth	r3, r3
 800191e:	88b9      	ldrh	r1, [r7, #4]
 8001920:	88f8      	ldrh	r0, [r7, #6]
 8001922:	4622      	mov	r2, r4
 8001924:	f7ff fcc2 	bl	80012ac <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001928:	883b      	ldrh	r3, [r7, #0]
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	fb02 f303 	mul.w	r3, r2, r3
 8001930:	461a      	mov	r2, r3
 8001932:	8b3b      	ldrh	r3, [r7, #24]
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fe86 	bl	8001648 <ILI9341_DrawColorBurst>
 800193c:	e000      	b.n	8001940 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800193e:	bf00      	nop
}
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	bf00      	nop
 8001948:	20000002 	.word	0x20000002
 800194c:	20000000 	.word	0x20000000

08001950 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08c      	sub	sp, #48	@ 0x30
 8001954:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	4b85      	ldr	r3, [pc, #532]	@ (8001b80 <MX_GPIO_Init+0x230>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	4a84      	ldr	r2, [pc, #528]	@ (8001b80 <MX_GPIO_Init+0x230>)
 8001970:	f043 0310 	orr.w	r3, r3, #16
 8001974:	6313      	str	r3, [r2, #48]	@ 0x30
 8001976:	4b82      	ldr	r3, [pc, #520]	@ (8001b80 <MX_GPIO_Init+0x230>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	4b7e      	ldr	r3, [pc, #504]	@ (8001b80 <MX_GPIO_Init+0x230>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a7d      	ldr	r2, [pc, #500]	@ (8001b80 <MX_GPIO_Init+0x230>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b7b      	ldr	r3, [pc, #492]	@ (8001b80 <MX_GPIO_Init+0x230>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	4b77      	ldr	r3, [pc, #476]	@ (8001b80 <MX_GPIO_Init+0x230>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a76      	ldr	r2, [pc, #472]	@ (8001b80 <MX_GPIO_Init+0x230>)
 80019a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b74      	ldr	r3, [pc, #464]	@ (8001b80 <MX_GPIO_Init+0x230>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b70      	ldr	r3, [pc, #448]	@ (8001b80 <MX_GPIO_Init+0x230>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	4a6f      	ldr	r2, [pc, #444]	@ (8001b80 <MX_GPIO_Init+0x230>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001b80 <MX_GPIO_Init+0x230>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	4b69      	ldr	r3, [pc, #420]	@ (8001b80 <MX_GPIO_Init+0x230>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	4a68      	ldr	r2, [pc, #416]	@ (8001b80 <MX_GPIO_Init+0x230>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e6:	4b66      	ldr	r3, [pc, #408]	@ (8001b80 <MX_GPIO_Init+0x230>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	4b62      	ldr	r3, [pc, #392]	@ (8001b80 <MX_GPIO_Init+0x230>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	4a61      	ldr	r2, [pc, #388]	@ (8001b80 <MX_GPIO_Init+0x230>)
 80019fc:	f043 0308 	orr.w	r3, r3, #8
 8001a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a02:	4b5f      	ldr	r3, [pc, #380]	@ (8001b80 <MX_GPIO_Init+0x230>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2108      	movs	r1, #8
 8001a12:	485c      	ldr	r0, [pc, #368]	@ (8001b84 <MX_GPIO_Init+0x234>)
 8001a14:	f001 fb7a 	bl	800310c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	485a      	ldr	r0, [pc, #360]	@ (8001b88 <MX_GPIO_Init+0x238>)
 8001a1e:	f001 fb75 	bl	800310c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_SPI_Pin|RESET_SPI_Pin, GPIO_PIN_SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	2103      	movs	r1, #3
 8001a26:	4859      	ldr	r0, [pc, #356]	@ (8001b8c <MX_GPIO_Init+0x23c>)
 8001a28:	f001 fb70 	bl	800310c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001a32:	4857      	ldr	r0, [pc, #348]	@ (8001b90 <MX_GPIO_Init+0x240>)
 8001a34:	f001 fb6a 	bl	800310c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_RS_SPI_GPIO_Port, DC_RS_SPI_Pin, GPIO_PIN_SET);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	4854      	ldr	r0, [pc, #336]	@ (8001b90 <MX_GPIO_Init+0x240>)
 8001a3e:	f001 fb65 	bl	800310c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001a42:	2308      	movs	r3, #8
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4619      	mov	r1, r3
 8001a58:	484a      	ldr	r0, [pc, #296]	@ (8001b84 <MX_GPIO_Init+0x234>)
 8001a5a:	f001 f9bb 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	4619      	mov	r1, r3
 8001a74:	4844      	ldr	r0, [pc, #272]	@ (8001b88 <MX_GPIO_Init+0x238>)
 8001a76:	f001 f9ad 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a8a:	2305      	movs	r3, #5
 8001a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	4619      	mov	r1, r3
 8001a94:	483c      	ldr	r0, [pc, #240]	@ (8001b88 <MX_GPIO_Init+0x238>)
 8001a96:	f001 f99d 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a9e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	4619      	mov	r1, r3
 8001aae:	4839      	ldr	r0, [pc, #228]	@ (8001b94 <MX_GPIO_Init+0x244>)
 8001ab0:	f001 f990 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_SPI_Pin RESET_SPI_Pin */
  GPIO_InitStruct.Pin = CS_SPI_Pin|RESET_SPI_Pin;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4830      	ldr	r0, [pc, #192]	@ (8001b8c <MX_GPIO_Init+0x23c>)
 8001acc:	f001 f982 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	482a      	ldr	r0, [pc, #168]	@ (8001b8c <MX_GPIO_Init+0x23c>)
 8001ae4:	f001 f976 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001ae8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001afa:	2305      	movs	r3, #5
 8001afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001afe:	f107 031c 	add.w	r3, r7, #28
 8001b02:	4619      	mov	r1, r3
 8001b04:	4821      	ldr	r0, [pc, #132]	@ (8001b8c <MX_GPIO_Init+0x23c>)
 8001b06:	f001 f965 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001b0a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001b0e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	481b      	ldr	r0, [pc, #108]	@ (8001b90 <MX_GPIO_Init+0x240>)
 8001b24:	f001 f956 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DC_RS_SPI_Pin */
  GPIO_InitStruct.Pin = DC_RS_SPI_Pin;
 8001b28:	2304      	movs	r3, #4
 8001b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b34:	2302      	movs	r3, #2
 8001b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DC_RS_SPI_GPIO_Port, &GPIO_InitStruct);
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4814      	ldr	r0, [pc, #80]	@ (8001b90 <MX_GPIO_Init+0x240>)
 8001b40:	f001 f948 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b44:	2320      	movs	r3, #32
 8001b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	4619      	mov	r1, r3
 8001b56:	480e      	ldr	r0, [pc, #56]	@ (8001b90 <MX_GPIO_Init+0x240>)
 8001b58:	f001 f93c 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b60:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4804      	ldr	r0, [pc, #16]	@ (8001b84 <MX_GPIO_Init+0x234>)
 8001b72:	f001 f92f 	bl	8002dd4 <HAL_GPIO_Init>

}
 8001b76:	bf00      	nop
 8001b78:	3730      	adds	r7, #48	@ 0x30
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	40020400 	.word	0x40020400
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	40020000 	.word	0x40020000

08001b98 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b9c:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001b9e:	4a13      	ldr	r2, [pc, #76]	@ (8001bec <MX_I2C1_Init+0x54>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001ba4:	4a12      	ldr	r2, [pc, #72]	@ (8001bf0 <MX_I2C1_Init+0x58>)
 8001ba6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001bb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bc2:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc8:	4b07      	ldr	r3, [pc, #28]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bd4:	4804      	ldr	r0, [pc, #16]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001bd6:	f003 fbc3 	bl	8005360 <HAL_I2C_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001be0:	f000 fc2e 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000214 	.word	0x20000214
 8001bec:	40005400 	.word	0x40005400
 8001bf0:	00061a80 	.word	0x00061a80

08001bf4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	@ 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a19      	ldr	r2, [pc, #100]	@ (8001c78 <HAL_I2C_MspInit+0x84>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d12b      	bne.n	8001c6e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <HAL_I2C_MspInit+0x88>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	4a17      	ldr	r2, [pc, #92]	@ (8001c7c <HAL_I2C_MspInit+0x88>)
 8001c20:	f043 0302 	orr.w	r3, r3, #2
 8001c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c26:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <HAL_I2C_MspInit+0x88>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_MPU9250_Pin|SDA_MPU9250_Pin;
 8001c32:	23c0      	movs	r3, #192	@ 0xc0
 8001c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c36:	2312      	movs	r3, #18
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c42:	2304      	movs	r3, #4
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	480c      	ldr	r0, [pc, #48]	@ (8001c80 <HAL_I2C_MspInit+0x8c>)
 8001c4e:	f001 f8c1 	bl	8002dd4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b09      	ldr	r3, [pc, #36]	@ (8001c7c <HAL_I2C_MspInit+0x88>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	4a08      	ldr	r2, [pc, #32]	@ (8001c7c <HAL_I2C_MspInit+0x88>)
 8001c5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c62:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <HAL_I2C_MspInit+0x88>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c6e:	bf00      	nop
 8001c70:	3728      	adds	r7, #40	@ 0x28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40005400 	.word	0x40005400
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020400 	.word	0x40020400

08001c84 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001c88:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <MX_I2S3_Init+0x54>)
 8001c8a:	4a14      	ldr	r2, [pc, #80]	@ (8001cdc <MX_I2S3_Init+0x58>)
 8001c8c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001c8e:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <MX_I2S3_Init+0x54>)
 8001c90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c94:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001c96:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <MX_I2S3_Init+0x54>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <MX_I2S3_Init+0x54>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <MX_I2S3_Init+0x54>)
 8001ca4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ca8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001caa:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <MX_I2S3_Init+0x54>)
 8001cac:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce0 <MX_I2S3_Init+0x5c>)
 8001cae:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001cb0:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <MX_I2S3_Init+0x54>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001cb6:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <MX_I2S3_Init+0x54>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <MX_I2S3_Init+0x54>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001cc2:	4805      	ldr	r0, [pc, #20]	@ (8001cd8 <MX_I2S3_Init+0x54>)
 8001cc4:	f004 fb70 	bl	80063a8 <HAL_I2S_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001cce:	f000 fbb7 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000268 	.word	0x20000268
 8001cdc:	40003c00 	.word	0x40003c00
 8001ce0:	00017700 	.word	0x00017700

08001ce4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08e      	sub	sp, #56	@ 0x38
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a31      	ldr	r2, [pc, #196]	@ (8001dd4 <HAL_I2S_MspInit+0xf0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d15a      	bne.n	8001dca <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001d14:	2301      	movs	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001d18:	23c0      	movs	r3, #192	@ 0xc0
 8001d1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	4618      	mov	r0, r3
 8001d26:	f005 fc63 	bl	80075f0 <HAL_RCCEx_PeriphCLKConfig>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001d30:	f000 fb86 	bl	8002440 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	4b27      	ldr	r3, [pc, #156]	@ (8001dd8 <HAL_I2S_MspInit+0xf4>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	4a26      	ldr	r2, [pc, #152]	@ (8001dd8 <HAL_I2S_MspInit+0xf4>)
 8001d3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d42:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d44:	4b24      	ldr	r3, [pc, #144]	@ (8001dd8 <HAL_I2S_MspInit+0xf4>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	4b20      	ldr	r3, [pc, #128]	@ (8001dd8 <HAL_I2S_MspInit+0xf4>)
 8001d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d58:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd8 <HAL_I2S_MspInit+0xf4>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d60:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd8 <HAL_I2S_MspInit+0xf4>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <HAL_I2S_MspInit+0xf4>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d74:	4a18      	ldr	r2, [pc, #96]	@ (8001dd8 <HAL_I2S_MspInit+0xf4>)
 8001d76:	f043 0304 	orr.w	r3, r3, #4
 8001d7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7c:	4b16      	ldr	r3, [pc, #88]	@ (8001dd8 <HAL_I2S_MspInit+0xf4>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d88:	2310      	movs	r3, #16
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d98:	2306      	movs	r3, #6
 8001d9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001da0:	4619      	mov	r1, r3
 8001da2:	480e      	ldr	r0, [pc, #56]	@ (8001ddc <HAL_I2S_MspInit+0xf8>)
 8001da4:	f001 f816 	bl	8002dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001da8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dba:	2306      	movs	r3, #6
 8001dbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4806      	ldr	r0, [pc, #24]	@ (8001de0 <HAL_I2S_MspInit+0xfc>)
 8001dc6:	f001 f805 	bl	8002dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001dca:	bf00      	nop
 8001dcc:	3738      	adds	r7, #56	@ 0x38
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40003c00 	.word	0x40003c00
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020000 	.word	0x40020000
 8001de0:	40020800 	.word	0x40020800
 8001de4:	00000000 	.word	0x00000000

08001de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	ed2d 8b02 	vpush	{d8}
 8001dee:	b09f      	sub	sp, #124	@ 0x7c
 8001df0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001df2:	f000 fe47 	bl	8002a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001df6:	f000 fab9 	bl	800236c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dfa:	f7ff fda9 	bl	8001950 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001dfe:	f7ff fecb 	bl	8001b98 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001e02:	f7ff ff3f 	bl	8001c84 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001e06:	f000 fc5b 	bl	80026c0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001e0a:	f009 f9d7 	bl	800b1bc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  MPU9250_Init();
 8001e0e:	f000 fb1d 	bl	800244c <MPU9250_Init>
  AK8963_Init();
 8001e12:	f000 fbcb 	bl	80025ac <AK8963_Init>

  ILI9341_Init();
 8001e16:	f7ff fabd 	bl	8001394 <ILI9341_Init>
  ILI9341_SetRotation(SCREEN_HORIZONTAL_1);  // 가로 모드 설정
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f7ff fbc4 	bl	80015a8 <ILI9341_SetRotation>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001e20:	f009 f9f2 	bl	800b208 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    MPU9250_Read_Accel_Gyro(AccelGyroData);
 8001e24:	48e0      	ldr	r0, [pc, #896]	@ (80021a8 <main+0x3c0>)
 8001e26:	f000 fb67 	bl	80024f8 <MPU9250_Read_Accel_Gyro>
    MPU9250_Read_Mag(MagData);
 8001e2a:	48e0      	ldr	r0, [pc, #896]	@ (80021ac <main+0x3c4>)
 8001e2c:	f000 fc10 	bl	8002650 <MPU9250_Read_Mag>

    // 변환 (±2g 설정 → 16384 LSB = 1g)
    float ax_g = (float)AccelGyroData[0] / 16384.0f;
 8001e30:	4bdd      	ldr	r3, [pc, #884]	@ (80021a8 <main+0x3c0>)
 8001e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e3e:	eddf 6adc 	vldr	s13, [pc, #880]	@ 80021b0 <main+0x3c8>
 8001e42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e46:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    float ay_g = (float)AccelGyroData[1] / 16384.0f;
 8001e4a:	4bd7      	ldr	r3, [pc, #860]	@ (80021a8 <main+0x3c0>)
 8001e4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e50:	ee07 3a90 	vmov	s15, r3
 8001e54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e58:	eddf 6ad5 	vldr	s13, [pc, #852]	@ 80021b0 <main+0x3c8>
 8001e5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e60:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    float az_g = (float)AccelGyroData[2] / 16384.0f;
 8001e64:	4bd0      	ldr	r3, [pc, #832]	@ (80021a8 <main+0x3c0>)
 8001e66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e72:	eddf 6acf 	vldr	s13, [pc, #828]	@ 80021b0 <main+0x3c8>
 8001e76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e7a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

    // Pitch, Roll 계산 (단위: 라디안 → degree 변환)
    float pitch = atan2f(ax_g, sqrtf(ay_g*ay_g + az_g*az_g)) * 180.0f / M_PI;
 8001e7e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001e82:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e86:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001e8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e92:	eeb0 0a67 	vmov.f32	s0, s15
 8001e96:	f00c fadf 	bl	800e458 <sqrtf>
 8001e9a:	eef0 7a40 	vmov.f32	s15, s0
 8001e9e:	eef0 0a67 	vmov.f32	s1, s15
 8001ea2:	ed97 0a1a 	vldr	s0, [r7, #104]	@ 0x68
 8001ea6:	f00c fad5 	bl	800e454 <atan2f>
 8001eaa:	eef0 7a40 	vmov.f32	s15, s0
 8001eae:	ed9f 7ac1 	vldr	s14, [pc, #772]	@ 80021b4 <main+0x3cc>
 8001eb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb6:	ee17 0a90 	vmov	r0, s15
 8001eba:	f7fe fb45 	bl	8000548 <__aeabi_f2d>
 8001ebe:	a3b8      	add	r3, pc, #736	@ (adr r3, 80021a0 <main+0x3b8>)
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	f7fe fcc2 	bl	800084c <__aeabi_ddiv>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f7fe fe6a 	bl	8000ba8 <__aeabi_d2f>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    float roll  = atan2f(ay_g, sqrtf(ax_g*ax_g + az_g*az_g)) * 180.0f / M_PI;
 8001ed8:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001edc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001ee0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001ee4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eec:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef0:	f00c fab2 	bl	800e458 <sqrtf>
 8001ef4:	eef0 7a40 	vmov.f32	s15, s0
 8001ef8:	eef0 0a67 	vmov.f32	s1, s15
 8001efc:	ed97 0a19 	vldr	s0, [r7, #100]	@ 0x64
 8001f00:	f00c faa8 	bl	800e454 <atan2f>
 8001f04:	eef0 7a40 	vmov.f32	s15, s0
 8001f08:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 80021b4 <main+0x3cc>
 8001f0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f10:	ee17 0a90 	vmov	r0, s15
 8001f14:	f7fe fb18 	bl	8000548 <__aeabi_f2d>
 8001f18:	a3a1      	add	r3, pc, #644	@ (adr r3, 80021a0 <main+0x3b8>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe fc95 	bl	800084c <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f7fe fe3d 	bl	8000ba8 <__aeabi_d2f>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	65bb      	str	r3, [r7, #88]	@ 0x58

    // 자력계 원시값
    float mx = (float)MagData[0];
 8001f32:	4b9e      	ldr	r3, [pc, #632]	@ (80021ac <main+0x3c4>)
 8001f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f38:	ee07 3a90 	vmov	s15, r3
 8001f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f40:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    float my = (float)MagData[1];
 8001f44:	4b99      	ldr	r3, [pc, #612]	@ (80021ac <main+0x3c4>)
 8001f46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f52:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    float mz = (float)MagData[2];
 8001f56:	4b95      	ldr	r3, [pc, #596]	@ (80021ac <main+0x3c4>)
 8001f58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f5c:	ee07 3a90 	vmov	s15, r3
 8001f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f64:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    // Pitch, Roll 값 (라디안으로 변환)
    float pitchRad = pitch * M_PI / 180.0f;
 8001f68:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001f6a:	f7fe faed 	bl	8000548 <__aeabi_f2d>
 8001f6e:	a38c      	add	r3, pc, #560	@ (adr r3, 80021a0 <main+0x3b8>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	f7fe fb40 	bl	80005f8 <__aeabi_dmul>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	4b8c      	ldr	r3, [pc, #560]	@ (80021b8 <main+0x3d0>)
 8001f86:	f7fe fc61 	bl	800084c <__aeabi_ddiv>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	f7fe fe09 	bl	8000ba8 <__aeabi_d2f>
 8001f96:	4603      	mov	r3, r0
 8001f98:	64bb      	str	r3, [r7, #72]	@ 0x48
    float rollRad  = roll  * M_PI / 180.0f;
 8001f9a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001f9c:	f7fe fad4 	bl	8000548 <__aeabi_f2d>
 8001fa0:	a37f      	add	r3, pc, #508	@ (adr r3, 80021a0 <main+0x3b8>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	f7fe fb27 	bl	80005f8 <__aeabi_dmul>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	4b80      	ldr	r3, [pc, #512]	@ (80021b8 <main+0x3d0>)
 8001fb8:	f7fe fc48 	bl	800084c <__aeabi_ddiv>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f7fe fdf0 	bl	8000ba8 <__aeabi_d2f>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	647b      	str	r3, [r7, #68]	@ 0x44

    // Tilt 보정
    float mx_comp = mx * cosf(pitchRad) + mz * sinf(pitchRad);
 8001fcc:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8001fd0:	f00c fa60 	bl	800e494 <cosf>
 8001fd4:	eeb0 7a40 	vmov.f32	s14, s0
 8001fd8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001fdc:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001fe0:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8001fe4:	f00c fa9a 	bl	800e51c <sinf>
 8001fe8:	eeb0 7a40 	vmov.f32	s14, s0
 8001fec:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001ff8:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float my_comp = mx * sinf(rollRad) * sinf(pitchRad)
 8001ffc:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8002000:	f00c fa8c 	bl	800e51c <sinf>
 8002004:	eeb0 7a40 	vmov.f32	s14, s0
 8002008:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800200c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002010:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8002014:	f00c fa82 	bl	800e51c <sinf>
 8002018:	eef0 7a40 	vmov.f32	s15, s0
 800201c:	ee28 8a27 	vmul.f32	s16, s16, s15
                  + my * cosf(rollRad)
 8002020:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8002024:	f00c fa36 	bl	800e494 <cosf>
 8002028:	eeb0 7a40 	vmov.f32	s14, s0
 800202c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002034:	ee38 8a27 	vadd.f32	s16, s16, s15
                  - mz * sinf(rollRad) * cosf(pitchRad);
 8002038:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 800203c:	f00c fa6e 	bl	800e51c <sinf>
 8002040:	eeb0 7a40 	vmov.f32	s14, s0
 8002044:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002048:	ee67 8a27 	vmul.f32	s17, s14, s15
 800204c:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8002050:	f00c fa20 	bl	800e494 <cosf>
 8002054:	eef0 7a40 	vmov.f32	s15, s0
 8002058:	ee68 7aa7 	vmul.f32	s15, s17, s15
    float my_comp = mx * sinf(rollRad) * sinf(pitchRad)
 800205c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002060:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // Yaw 계산 (단위: 도)
    float yaw = atan2f(-my_comp, mx_comp) * 180.0f / M_PI;
 8002064:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002068:	eef1 7a67 	vneg.f32	s15, s15
 800206c:	edd7 0a10 	vldr	s1, [r7, #64]	@ 0x40
 8002070:	eeb0 0a67 	vmov.f32	s0, s15
 8002074:	f00c f9ee 	bl	800e454 <atan2f>
 8002078:	eef0 7a40 	vmov.f32	s15, s0
 800207c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80021b4 <main+0x3cc>
 8002080:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002084:	ee17 0a90 	vmov	r0, s15
 8002088:	f7fe fa5e 	bl	8000548 <__aeabi_f2d>
 800208c:	a344      	add	r3, pc, #272	@ (adr r3, 80021a0 <main+0x3b8>)
 800208e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002092:	f7fe fbdb 	bl	800084c <__aeabi_ddiv>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	f7fe fd83 	bl	8000ba8 <__aeabi_d2f>
 80020a2:	4603      	mov	r3, r0
 80020a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (yaw < 0) yaw += 360.0f;  // 0~360° 범위로 보정
 80020a6:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80020aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	d507      	bpl.n	80020c4 <main+0x2dc>
 80020b4:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80020b8:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 80021bc <main+0x3d4>
 80020bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020c0:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c


    // ---------------------- LCD 출력 ---------------------------------

    char buf[30];
    ILI9341_FillScreen(BLACK); // 새로 그리기 전에 화면 지움
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7ff fb5b 	bl	8001780 <ILI9341_FillScreen>


    sprintf(buf, "Pitch: %.2f deg", pitch);
 80020ca:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80020cc:	f7fe fa3c 	bl	8000548 <__aeabi_f2d>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	1d38      	adds	r0, r7, #4
 80020d6:	493a      	ldr	r1, [pc, #232]	@ (80021c0 <main+0x3d8>)
 80020d8:	f00a f93e 	bl	800c358 <siprintf>
    ILI9341_DrawText(buf, Arial_Narrow12x16, 10, 120, WHITE, BLACK);
 80020dc:	1d38      	adds	r0, r7, #4
 80020de:	2300      	movs	r3, #0
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2378      	movs	r3, #120	@ 0x78
 80020ea:	220a      	movs	r2, #10
 80020ec:	4935      	ldr	r1, [pc, #212]	@ (80021c4 <main+0x3dc>)
 80020ee:	f7ff f817 	bl	8001120 <ILI9341_DrawText>

    sprintf(buf, "Roll : %.2f deg", roll);
 80020f2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80020f4:	f7fe fa28 	bl	8000548 <__aeabi_f2d>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	1d38      	adds	r0, r7, #4
 80020fe:	4932      	ldr	r1, [pc, #200]	@ (80021c8 <main+0x3e0>)
 8002100:	f00a f92a 	bl	800c358 <siprintf>
    ILI9341_DrawText(buf, Arial_Narrow12x16, 10, 140, WHITE, BLACK);
 8002104:	1d38      	adds	r0, r7, #4
 8002106:	2300      	movs	r3, #0
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	238c      	movs	r3, #140	@ 0x8c
 8002112:	220a      	movs	r2, #10
 8002114:	492b      	ldr	r1, [pc, #172]	@ (80021c4 <main+0x3dc>)
 8002116:	f7ff f803 	bl	8001120 <ILI9341_DrawText>

    sprintf(buf, "Yaw  : %.2f deg", yaw);
 800211a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800211c:	f7fe fa14 	bl	8000548 <__aeabi_f2d>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	1d38      	adds	r0, r7, #4
 8002126:	4929      	ldr	r1, [pc, #164]	@ (80021cc <main+0x3e4>)
 8002128:	f00a f916 	bl	800c358 <siprintf>
	ILI9341_DrawText(buf, Arial_Narrow12x16, 10, 160, WHITE, BLACK);
 800212c:	1d38      	adds	r0, r7, #4
 800212e:	2300      	movs	r3, #0
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	23a0      	movs	r3, #160	@ 0xa0
 800213a:	220a      	movs	r2, #10
 800213c:	4921      	ldr	r1, [pc, #132]	@ (80021c4 <main+0x3dc>)
 800213e:	f7fe ffef 	bl	8001120 <ILI9341_DrawText>

    // 숫자 출력 ----------------------
    sprintf(buf, "AX: %.2f g", ax_g);
 8002142:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002144:	f7fe fa00 	bl	8000548 <__aeabi_f2d>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	1d38      	adds	r0, r7, #4
 800214e:	4920      	ldr	r1, [pc, #128]	@ (80021d0 <main+0x3e8>)
 8002150:	f00a f902 	bl	800c358 <siprintf>
    ILI9341_DrawText(buf, Arial_Narrow12x16, 10, 10, WHITE, BLACK);
 8002154:	1d38      	adds	r0, r7, #4
 8002156:	2300      	movs	r3, #0
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	230a      	movs	r3, #10
 8002162:	220a      	movs	r2, #10
 8002164:	4917      	ldr	r1, [pc, #92]	@ (80021c4 <main+0x3dc>)
 8002166:	f7fe ffdb 	bl	8001120 <ILI9341_DrawText>

    sprintf(buf, "AY: %.2f g", ay_g);
 800216a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800216c:	f7fe f9ec 	bl	8000548 <__aeabi_f2d>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	1d38      	adds	r0, r7, #4
 8002176:	4917      	ldr	r1, [pc, #92]	@ (80021d4 <main+0x3ec>)
 8002178:	f00a f8ee 	bl	800c358 <siprintf>
    ILI9341_DrawText(buf, Arial_Narrow12x16, 10, 30, WHITE, BLACK);
 800217c:	1d38      	adds	r0, r7, #4
 800217e:	2300      	movs	r3, #0
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	231e      	movs	r3, #30
 800218a:	220a      	movs	r2, #10
 800218c:	490d      	ldr	r1, [pc, #52]	@ (80021c4 <main+0x3dc>)
 800218e:	f7fe ffc7 	bl	8001120 <ILI9341_DrawText>

    sprintf(buf, "AZ: %.2f g", az_g);
 8002192:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002194:	f7fe f9d8 	bl	8000548 <__aeabi_f2d>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	1d38      	adds	r0, r7, #4
 800219e:	e01b      	b.n	80021d8 <main+0x3f0>
 80021a0:	54442d18 	.word	0x54442d18
 80021a4:	400921fb 	.word	0x400921fb
 80021a8:	200002b0 	.word	0x200002b0
 80021ac:	200002bc 	.word	0x200002bc
 80021b0:	46800000 	.word	0x46800000
 80021b4:	43340000 	.word	0x43340000
 80021b8:	40668000 	.word	0x40668000
 80021bc:	43b40000 	.word	0x43b40000
 80021c0:	0800f288 	.word	0x0800f288
 80021c4:	0800f2e0 	.word	0x0800f2e0
 80021c8:	0800f298 	.word	0x0800f298
 80021cc:	0800f2a8 	.word	0x0800f2a8
 80021d0:	0800f2b8 	.word	0x0800f2b8
 80021d4:	0800f2c4 	.word	0x0800f2c4
 80021d8:	4962      	ldr	r1, [pc, #392]	@ (8002364 <main+0x57c>)
 80021da:	f00a f8bd 	bl	800c358 <siprintf>
    ILI9341_DrawText(buf, Arial_Narrow12x16, 10, 50, WHITE, BLACK);
 80021de:	1d38      	adds	r0, r7, #4
 80021e0:	2300      	movs	r3, #0
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2332      	movs	r3, #50	@ 0x32
 80021ec:	220a      	movs	r2, #10
 80021ee:	495e      	ldr	r1, [pc, #376]	@ (8002368 <main+0x580>)
 80021f0:	f7fe ff96 	bl	8001120 <ILI9341_DrawText>

    // 그래프 출력 ----------------------
    // 기준점
    int baseX = 180;  // 그래프 시작 X (화면 가운데)
 80021f4:	23b4      	movs	r3, #180	@ 0xb4
 80021f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    int startY = 10; // Y 위치
 80021f8:	230a      	movs	r3, #10
 80021fa:	637b      	str	r3, [r7, #52]	@ 0x34

    // 스케일링 (±2g → ±100픽셀)
    int scale = 50; // 1g = 50픽셀
 80021fc:	2332      	movs	r3, #50	@ 0x32
 80021fe:	633b      	str	r3, [r7, #48]	@ 0x30
    int bar_ax = (int)(ax_g * scale);
 8002200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800220a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800220e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002212:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002216:	ee17 3a90 	vmov	r3, s15
 800221a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int bar_ay = (int)(ay_g * scale);
 800221c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221e:	ee07 3a90 	vmov	s15, r3
 8002222:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002226:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800222a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002232:	ee17 3a90 	vmov	r3, s15
 8002236:	62bb      	str	r3, [r7, #40]	@ 0x28
    int bar_az = (int)(az_g * scale);
 8002238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223a:	ee07 3a90 	vmov	s15, r3
 800223e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002242:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800224e:	ee17 3a90 	vmov	r3, s15
 8002252:	627b      	str	r3, [r7, #36]	@ 0x24

    // X축 그래프 (빨강)
    if (bar_ax >= 0)
 8002254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002256:	2b00      	cmp	r3, #0
 8002258:	db13      	blt.n	8002282 <main+0x49a>
        ILI9341_DrawFilledRectangleCoord(baseX, startY, baseX + bar_ax, startY + 10, RED);
 800225a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800225c:	b298      	uxth	r0, r3
 800225e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002260:	b299      	uxth	r1, r3
 8002262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002264:	b29a      	uxth	r2, r3
 8002266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002268:	b29b      	uxth	r3, r3
 800226a:	4413      	add	r3, r2
 800226c:	b29a      	uxth	r2, r3
 800226e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002270:	b29b      	uxth	r3, r3
 8002272:	330a      	adds	r3, #10
 8002274:	b29b      	uxth	r3, r3
 8002276:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 800227a:	9400      	str	r4, [sp, #0]
 800227c:	f7fe fe7a 	bl	8000f74 <ILI9341_DrawFilledRectangleCoord>
 8002280:	e012      	b.n	80022a8 <main+0x4c0>
    else
        ILI9341_DrawFilledRectangleCoord(baseX + bar_ax, startY, baseX, startY + 10, RED);
 8002282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002284:	b29a      	uxth	r2, r3
 8002286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002288:	b29b      	uxth	r3, r3
 800228a:	4413      	add	r3, r2
 800228c:	b298      	uxth	r0, r3
 800228e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002290:	b299      	uxth	r1, r3
 8002292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002294:	b29a      	uxth	r2, r3
 8002296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002298:	b29b      	uxth	r3, r3
 800229a:	330a      	adds	r3, #10
 800229c:	b29b      	uxth	r3, r3
 800229e:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 80022a2:	9400      	str	r4, [sp, #0]
 80022a4:	f7fe fe66 	bl	8000f74 <ILI9341_DrawFilledRectangleCoord>

    // Y축 그래프 (초록)
    if (bar_ay >= 0)
 80022a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	db15      	blt.n	80022da <main+0x4f2>
        ILI9341_DrawFilledRectangleCoord(baseX, startY + 20, baseX + bar_ay, startY + 30, GREEN);
 80022ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b0:	b298      	uxth	r0, r3
 80022b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3314      	adds	r3, #20
 80022b8:	b299      	uxth	r1, r3
 80022ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022bc:	b29a      	uxth	r2, r3
 80022be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	331e      	adds	r3, #30
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 80022d2:	9400      	str	r4, [sp, #0]
 80022d4:	f7fe fe4e 	bl	8000f74 <ILI9341_DrawFilledRectangleCoord>
 80022d8:	e014      	b.n	8002304 <main+0x51c>
    else
        ILI9341_DrawFilledRectangleCoord(baseX + bar_ay, startY + 20, baseX, startY + 30, GREEN);
 80022da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022dc:	b29a      	uxth	r2, r3
 80022de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	4413      	add	r3, r2
 80022e4:	b298      	uxth	r0, r3
 80022e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	3314      	adds	r3, #20
 80022ec:	b299      	uxth	r1, r3
 80022ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	331e      	adds	r3, #30
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 80022fe:	9400      	str	r4, [sp, #0]
 8002300:	f7fe fe38 	bl	8000f74 <ILI9341_DrawFilledRectangleCoord>

    // Z축 그래프 (파랑)
    if (bar_az >= 0)
 8002304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002306:	2b00      	cmp	r3, #0
 8002308:	db14      	blt.n	8002334 <main+0x54c>
        ILI9341_DrawFilledRectangleCoord(baseX, startY + 40, baseX + bar_az, startY + 50, BLUE);
 800230a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800230c:	b298      	uxth	r0, r3
 800230e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002310:	b29b      	uxth	r3, r3
 8002312:	3328      	adds	r3, #40	@ 0x28
 8002314:	b299      	uxth	r1, r3
 8002316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002318:	b29a      	uxth	r2, r3
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	b29b      	uxth	r3, r3
 800231e:	4413      	add	r3, r2
 8002320:	b29a      	uxth	r2, r3
 8002322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002324:	b29b      	uxth	r3, r3
 8002326:	3332      	adds	r3, #50	@ 0x32
 8002328:	b29b      	uxth	r3, r3
 800232a:	241f      	movs	r4, #31
 800232c:	9400      	str	r4, [sp, #0]
 800232e:	f7fe fe21 	bl	8000f74 <ILI9341_DrawFilledRectangleCoord>
 8002332:	e013      	b.n	800235c <main+0x574>
    else
        ILI9341_DrawFilledRectangleCoord(baseX + bar_az, startY + 40, baseX, startY + 50, BLUE);
 8002334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002336:	b29a      	uxth	r2, r3
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	b29b      	uxth	r3, r3
 800233c:	4413      	add	r3, r2
 800233e:	b298      	uxth	r0, r3
 8002340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002342:	b29b      	uxth	r3, r3
 8002344:	3328      	adds	r3, #40	@ 0x28
 8002346:	b299      	uxth	r1, r3
 8002348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800234a:	b29a      	uxth	r2, r3
 800234c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800234e:	b29b      	uxth	r3, r3
 8002350:	3332      	adds	r3, #50	@ 0x32
 8002352:	b29b      	uxth	r3, r3
 8002354:	241f      	movs	r4, #31
 8002356:	9400      	str	r4, [sp, #0]
 8002358:	f7fe fe0c 	bl	8000f74 <ILI9341_DrawFilledRectangleCoord>

    HAL_Delay(5); // 10Hz
 800235c:	2005      	movs	r0, #5
 800235e:	f000 fc03 	bl	8002b68 <HAL_Delay>
  {
 8002362:	e55d      	b.n	8001e20 <main+0x38>
 8002364:	0800f2d0 	.word	0x0800f2d0
 8002368:	0800f2e0 	.word	0x0800f2e0

0800236c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b094      	sub	sp, #80	@ 0x50
 8002370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002372:	f107 0320 	add.w	r3, r7, #32
 8002376:	2230      	movs	r2, #48	@ 0x30
 8002378:	2100      	movs	r1, #0
 800237a:	4618      	mov	r0, r3
 800237c:	f00a f851 	bl	800c422 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002390:	2300      	movs	r3, #0
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	4b28      	ldr	r3, [pc, #160]	@ (8002438 <SystemClock_Config+0xcc>)
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	4a27      	ldr	r2, [pc, #156]	@ (8002438 <SystemClock_Config+0xcc>)
 800239a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800239e:	6413      	str	r3, [r2, #64]	@ 0x40
 80023a0:	4b25      	ldr	r3, [pc, #148]	@ (8002438 <SystemClock_Config+0xcc>)
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ac:	2300      	movs	r3, #0
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	4b22      	ldr	r3, [pc, #136]	@ (800243c <SystemClock_Config+0xd0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a21      	ldr	r2, [pc, #132]	@ (800243c <SystemClock_Config+0xd0>)
 80023b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	4b1f      	ldr	r3, [pc, #124]	@ (800243c <SystemClock_Config+0xd0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023c8:	2301      	movs	r3, #1
 80023ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023d2:	2302      	movs	r3, #2
 80023d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023dc:	2308      	movs	r3, #8
 80023de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80023e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80023e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023e6:	2302      	movs	r3, #2
 80023e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80023ea:	2307      	movs	r3, #7
 80023ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ee:	f107 0320 	add.w	r3, r7, #32
 80023f2:	4618      	mov	r0, r3
 80023f4:	f004 fc78 	bl	8006ce8 <HAL_RCC_OscConfig>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80023fe:	f000 f81f 	bl	8002440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002402:	230f      	movs	r3, #15
 8002404:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002406:	2302      	movs	r3, #2
 8002408:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800240e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002412:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002414:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002418:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800241a:	f107 030c 	add.w	r3, r7, #12
 800241e:	2105      	movs	r1, #5
 8002420:	4618      	mov	r0, r3
 8002422:	f004 fed9 	bl	80071d8 <HAL_RCC_ClockConfig>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800242c:	f000 f808 	bl	8002440 <Error_Handler>
  }
}
 8002430:	bf00      	nop
 8002432:	3750      	adds	r7, #80	@ 0x50
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40023800 	.word	0x40023800
 800243c:	40007000 	.word	0x40007000

08002440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002444:	b672      	cpsid	i
}
 8002446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <Error_Handler+0x8>

0800244c <MPU9250_Init>:
#include "mpu9250.h"
#include <string.h>

void MPU9250_Init(void) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af04      	add	r7, sp, #16
    uint8_t check, data;

    // WHO_AM_I 확인 (0x75)
    HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDR, 0x75, 1, &check, 1, 1000);
 8002452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002456:	9302      	str	r3, [sp, #8]
 8002458:	2301      	movs	r3, #1
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	1dfb      	adds	r3, r7, #7
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2301      	movs	r3, #1
 8002462:	2275      	movs	r2, #117	@ 0x75
 8002464:	21d0      	movs	r1, #208	@ 0xd0
 8002466:	4823      	ldr	r0, [pc, #140]	@ (80024f4 <MPU9250_Init+0xa8>)
 8002468:	f003 f9b8 	bl	80057dc <HAL_I2C_Mem_Read>
    if (check == 0x71) {  // MPU9250 WHOAMI = 0x71
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	2b71      	cmp	r3, #113	@ 0x71
 8002470:	d13b      	bne.n	80024ea <MPU9250_Init+0x9e>
        // 슬립 해제
        data = 0x00;
 8002472:	2300      	movs	r3, #0
 8002474:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, 0x6B, 1, &data, 1, 1000);
 8002476:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800247a:	9302      	str	r3, [sp, #8]
 800247c:	2301      	movs	r3, #1
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	1dbb      	adds	r3, r7, #6
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2301      	movs	r3, #1
 8002486:	226b      	movs	r2, #107	@ 0x6b
 8002488:	21d0      	movs	r1, #208	@ 0xd0
 800248a:	481a      	ldr	r0, [pc, #104]	@ (80024f4 <MPU9250_Init+0xa8>)
 800248c:	f003 f8ac 	bl	80055e8 <HAL_I2C_Mem_Write>

        // 가속도 ±2g
        data = 0x00;
 8002490:	2300      	movs	r3, #0
 8002492:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, 0x1C, 1, &data, 1, 1000);
 8002494:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002498:	9302      	str	r3, [sp, #8]
 800249a:	2301      	movs	r3, #1
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	1dbb      	adds	r3, r7, #6
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2301      	movs	r3, #1
 80024a4:	221c      	movs	r2, #28
 80024a6:	21d0      	movs	r1, #208	@ 0xd0
 80024a8:	4812      	ldr	r0, [pc, #72]	@ (80024f4 <MPU9250_Init+0xa8>)
 80024aa:	f003 f89d 	bl	80055e8 <HAL_I2C_Mem_Write>

        // 자이로 ±250 dps
        data = 0x00;
 80024ae:	2300      	movs	r3, #0
 80024b0:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, 0x1B, 1, &data, 1, 1000);
 80024b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024b6:	9302      	str	r3, [sp, #8]
 80024b8:	2301      	movs	r3, #1
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	1dbb      	adds	r3, r7, #6
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2301      	movs	r3, #1
 80024c2:	221b      	movs	r2, #27
 80024c4:	21d0      	movs	r1, #208	@ 0xd0
 80024c6:	480b      	ldr	r0, [pc, #44]	@ (80024f4 <MPU9250_Init+0xa8>)
 80024c8:	f003 f88e 	bl	80055e8 <HAL_I2C_Mem_Write>

        // I2C Bypass Enable (자력계 직접 접근 허용)
        data = 0x02;
 80024cc:	2302      	movs	r3, #2
 80024ce:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, 0x37, 1, &data, 1, 1000);
 80024d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024d4:	9302      	str	r3, [sp, #8]
 80024d6:	2301      	movs	r3, #1
 80024d8:	9301      	str	r3, [sp, #4]
 80024da:	1dbb      	adds	r3, r7, #6
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	2301      	movs	r3, #1
 80024e0:	2237      	movs	r2, #55	@ 0x37
 80024e2:	21d0      	movs	r1, #208	@ 0xd0
 80024e4:	4803      	ldr	r0, [pc, #12]	@ (80024f4 <MPU9250_Init+0xa8>)
 80024e6:	f003 f87f 	bl	80055e8 <HAL_I2C_Mem_Write>
    }
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000214 	.word	0x20000214

080024f8 <MPU9250_Read_Accel_Gyro>:

void MPU9250_Read_Accel_Gyro(int16_t* AccelGyroData) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	@ 0x28
 80024fc:	af04      	add	r7, sp, #16
 80024fe:	6078      	str	r0, [r7, #4]
    uint8_t Rec_Data[14];
    HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDR, 0x3B, 1, Rec_Data, 14, 1000);
 8002500:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002504:	9302      	str	r3, [sp, #8]
 8002506:	230e      	movs	r3, #14
 8002508:	9301      	str	r3, [sp, #4]
 800250a:	f107 0308 	add.w	r3, r7, #8
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2301      	movs	r3, #1
 8002512:	223b      	movs	r2, #59	@ 0x3b
 8002514:	21d0      	movs	r1, #208	@ 0xd0
 8002516:	4824      	ldr	r0, [pc, #144]	@ (80025a8 <MPU9250_Read_Accel_Gyro+0xb0>)
 8002518:	f003 f960 	bl	80057dc <HAL_I2C_Mem_Read>

    // 가속도
    AccelGyroData[0] = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);  // X
 800251c:	7a3b      	ldrb	r3, [r7, #8]
 800251e:	b21b      	sxth	r3, r3
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	b21a      	sxth	r2, r3
 8002524:	7a7b      	ldrb	r3, [r7, #9]
 8002526:	b21b      	sxth	r3, r3
 8002528:	4313      	orrs	r3, r2
 800252a:	b21a      	sxth	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	801a      	strh	r2, [r3, #0]
    AccelGyroData[1] = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);  // Y
 8002530:	7abb      	ldrb	r3, [r7, #10]
 8002532:	b21b      	sxth	r3, r3
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	b219      	sxth	r1, r3
 8002538:	7afb      	ldrb	r3, [r7, #11]
 800253a:	b21a      	sxth	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3302      	adds	r3, #2
 8002540:	430a      	orrs	r2, r1
 8002542:	b212      	sxth	r2, r2
 8002544:	801a      	strh	r2, [r3, #0]
    AccelGyroData[2] = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);  // Z
 8002546:	7b3b      	ldrb	r3, [r7, #12]
 8002548:	b21b      	sxth	r3, r3
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	b219      	sxth	r1, r3
 800254e:	7b7b      	ldrb	r3, [r7, #13]
 8002550:	b21a      	sxth	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3304      	adds	r3, #4
 8002556:	430a      	orrs	r2, r1
 8002558:	b212      	sxth	r2, r2
 800255a:	801a      	strh	r2, [r3, #0]

    // 자이로
    AccelGyroData[3] = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);   // X
 800255c:	7c3b      	ldrb	r3, [r7, #16]
 800255e:	b21b      	sxth	r3, r3
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	b219      	sxth	r1, r3
 8002564:	7c7b      	ldrb	r3, [r7, #17]
 8002566:	b21a      	sxth	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3306      	adds	r3, #6
 800256c:	430a      	orrs	r2, r1
 800256e:	b212      	sxth	r2, r2
 8002570:	801a      	strh	r2, [r3, #0]
    AccelGyroData[4] = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]); // Y
 8002572:	7cbb      	ldrb	r3, [r7, #18]
 8002574:	b21b      	sxth	r3, r3
 8002576:	021b      	lsls	r3, r3, #8
 8002578:	b219      	sxth	r1, r3
 800257a:	7cfb      	ldrb	r3, [r7, #19]
 800257c:	b21a      	sxth	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3308      	adds	r3, #8
 8002582:	430a      	orrs	r2, r1
 8002584:	b212      	sxth	r2, r2
 8002586:	801a      	strh	r2, [r3, #0]
    AccelGyroData[5] = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]); // Z
 8002588:	7d3b      	ldrb	r3, [r7, #20]
 800258a:	b21b      	sxth	r3, r3
 800258c:	021b      	lsls	r3, r3, #8
 800258e:	b219      	sxth	r1, r3
 8002590:	7d7b      	ldrb	r3, [r7, #21]
 8002592:	b21a      	sxth	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	330a      	adds	r3, #10
 8002598:	430a      	orrs	r2, r1
 800259a:	b212      	sxth	r2, r2
 800259c:	801a      	strh	r2, [r3, #0]
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000214 	.word	0x20000214

080025ac <AK8963_Init>:

void AK8963_Init(void) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af04      	add	r7, sp, #16
    uint8_t data;

    // Power down mode
    data = 0x00;
 80025b2:	2300      	movs	r3, #0
 80025b4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, AK8963_ADDR, 0x0A, 1, &data, 1, 1000);
 80025b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025ba:	9302      	str	r3, [sp, #8]
 80025bc:	2301      	movs	r3, #1
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	1dfb      	adds	r3, r7, #7
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2301      	movs	r3, #1
 80025c6:	220a      	movs	r2, #10
 80025c8:	2118      	movs	r1, #24
 80025ca:	4820      	ldr	r0, [pc, #128]	@ (800264c <AK8963_Init+0xa0>)
 80025cc:	f003 f80c 	bl	80055e8 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 80025d0:	200a      	movs	r0, #10
 80025d2:	f000 fac9 	bl	8002b68 <HAL_Delay>

    // Fuse ROM access mode
    data = 0x0F;
 80025d6:	230f      	movs	r3, #15
 80025d8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, AK8963_ADDR, 0x0A, 1, &data, 1, 1000);
 80025da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025de:	9302      	str	r3, [sp, #8]
 80025e0:	2301      	movs	r3, #1
 80025e2:	9301      	str	r3, [sp, #4]
 80025e4:	1dfb      	adds	r3, r7, #7
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2301      	movs	r3, #1
 80025ea:	220a      	movs	r2, #10
 80025ec:	2118      	movs	r1, #24
 80025ee:	4817      	ldr	r0, [pc, #92]	@ (800264c <AK8963_Init+0xa0>)
 80025f0:	f002 fffa 	bl	80055e8 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 80025f4:	200a      	movs	r0, #10
 80025f6:	f000 fab7 	bl	8002b68 <HAL_Delay>

    // 다시 Power down
    data = 0x00;
 80025fa:	2300      	movs	r3, #0
 80025fc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, AK8963_ADDR, 0x0A, 1, &data, 1, 1000);
 80025fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002602:	9302      	str	r3, [sp, #8]
 8002604:	2301      	movs	r3, #1
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	1dfb      	adds	r3, r7, #7
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	2301      	movs	r3, #1
 800260e:	220a      	movs	r2, #10
 8002610:	2118      	movs	r1, #24
 8002612:	480e      	ldr	r0, [pc, #56]	@ (800264c <AK8963_Init+0xa0>)
 8002614:	f002 ffe8 	bl	80055e8 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 8002618:	200a      	movs	r0, #10
 800261a:	f000 faa5 	bl	8002b68 <HAL_Delay>

    // Continuous measurement mode 2 (100Hz, 16-bit)
    data = 0x16;
 800261e:	2316      	movs	r3, #22
 8002620:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, AK8963_ADDR, 0x0A, 1, &data, 1, 1000);
 8002622:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002626:	9302      	str	r3, [sp, #8]
 8002628:	2301      	movs	r3, #1
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	1dfb      	adds	r3, r7, #7
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2301      	movs	r3, #1
 8002632:	220a      	movs	r2, #10
 8002634:	2118      	movs	r1, #24
 8002636:	4805      	ldr	r0, [pc, #20]	@ (800264c <AK8963_Init+0xa0>)
 8002638:	f002 ffd6 	bl	80055e8 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 800263c:	200a      	movs	r0, #10
 800263e:	f000 fa93 	bl	8002b68 <HAL_Delay>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000214 	.word	0x20000214

08002650 <MPU9250_Read_Mag>:

void MPU9250_Read_Mag(int16_t* MagData) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af04      	add	r7, sp, #16
 8002656:	6078      	str	r0, [r7, #4]
    uint8_t Rec_Data[7];

    // 데이터 읽기 (ST1 + HXL..HZH + ST2)
    HAL_I2C_Mem_Read(&hi2c1, AK8963_ADDR, 0x02, 1, Rec_Data, 7, 1000);
 8002658:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800265c:	9302      	str	r3, [sp, #8]
 800265e:	2307      	movs	r3, #7
 8002660:	9301      	str	r3, [sp, #4]
 8002662:	f107 0308 	add.w	r3, r7, #8
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	2301      	movs	r3, #1
 800266a:	2202      	movs	r2, #2
 800266c:	2118      	movs	r1, #24
 800266e:	4813      	ldr	r0, [pc, #76]	@ (80026bc <MPU9250_Read_Mag+0x6c>)
 8002670:	f003 f8b4 	bl	80057dc <HAL_I2C_Mem_Read>

    // X, Y, Z (리틀엔디안 → Low, High 순서)
    MagData[0] = (int16_t)(Rec_Data[1] << 8 | Rec_Data[0]);
 8002674:	7a7b      	ldrb	r3, [r7, #9]
 8002676:	b21b      	sxth	r3, r3
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	b21a      	sxth	r2, r3
 800267c:	7a3b      	ldrb	r3, [r7, #8]
 800267e:	b21b      	sxth	r3, r3
 8002680:	4313      	orrs	r3, r2
 8002682:	b21a      	sxth	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	801a      	strh	r2, [r3, #0]
    MagData[1] = (int16_t)(Rec_Data[3] << 8 | Rec_Data[2]);
 8002688:	7afb      	ldrb	r3, [r7, #11]
 800268a:	b21b      	sxth	r3, r3
 800268c:	021b      	lsls	r3, r3, #8
 800268e:	b219      	sxth	r1, r3
 8002690:	7abb      	ldrb	r3, [r7, #10]
 8002692:	b21a      	sxth	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3302      	adds	r3, #2
 8002698:	430a      	orrs	r2, r1
 800269a:	b212      	sxth	r2, r2
 800269c:	801a      	strh	r2, [r3, #0]
    MagData[2] = (int16_t)(Rec_Data[5] << 8 | Rec_Data[4]);
 800269e:	7b7b      	ldrb	r3, [r7, #13]
 80026a0:	b21b      	sxth	r3, r3
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	b219      	sxth	r1, r3
 80026a6:	7b3b      	ldrb	r3, [r7, #12]
 80026a8:	b21a      	sxth	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3304      	adds	r3, #4
 80026ae:	430a      	orrs	r2, r1
 80026b0:	b212      	sxth	r2, r2
 80026b2:	801a      	strh	r2, [r3, #0]
}
 80026b4:	bf00      	nop
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000214 	.word	0x20000214

080026c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80026c4:	4b17      	ldr	r3, [pc, #92]	@ (8002724 <MX_SPI1_Init+0x64>)
 80026c6:	4a18      	ldr	r2, [pc, #96]	@ (8002728 <MX_SPI1_Init+0x68>)
 80026c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026ca:	4b16      	ldr	r3, [pc, #88]	@ (8002724 <MX_SPI1_Init+0x64>)
 80026cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026d2:	4b14      	ldr	r3, [pc, #80]	@ (8002724 <MX_SPI1_Init+0x64>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026d8:	4b12      	ldr	r3, [pc, #72]	@ (8002724 <MX_SPI1_Init+0x64>)
 80026da:	2200      	movs	r2, #0
 80026dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026de:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <MX_SPI1_Init+0x64>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002724 <MX_SPI1_Init+0x64>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002724 <MX_SPI1_Init+0x64>)
 80026ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80026f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002724 <MX_SPI1_Init+0x64>)
 80026f4:	2208      	movs	r2, #8
 80026f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002724 <MX_SPI1_Init+0x64>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026fe:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <MX_SPI1_Init+0x64>)
 8002700:	2200      	movs	r2, #0
 8002702:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002704:	4b07      	ldr	r3, [pc, #28]	@ (8002724 <MX_SPI1_Init+0x64>)
 8002706:	2200      	movs	r2, #0
 8002708:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800270a:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <MX_SPI1_Init+0x64>)
 800270c:	220a      	movs	r2, #10
 800270e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002710:	4804      	ldr	r0, [pc, #16]	@ (8002724 <MX_SPI1_Init+0x64>)
 8002712:	f005 f8af 	bl	8007874 <HAL_SPI_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800271c:	f7ff fe90 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}
 8002724:	200002c4 	.word	0x200002c4
 8002728:	40013000 	.word	0x40013000

0800272c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08a      	sub	sp, #40	@ 0x28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a19      	ldr	r2, [pc, #100]	@ (80027b0 <HAL_SPI_MspInit+0x84>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d12b      	bne.n	80027a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	4b18      	ldr	r3, [pc, #96]	@ (80027b4 <HAL_SPI_MspInit+0x88>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	4a17      	ldr	r2, [pc, #92]	@ (80027b4 <HAL_SPI_MspInit+0x88>)
 8002758:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800275c:	6453      	str	r3, [r2, #68]	@ 0x44
 800275e:	4b15      	ldr	r3, [pc, #84]	@ (80027b4 <HAL_SPI_MspInit+0x88>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002762:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <HAL_SPI_MspInit+0x88>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	4a10      	ldr	r2, [pc, #64]	@ (80027b4 <HAL_SPI_MspInit+0x88>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6313      	str	r3, [r2, #48]	@ 0x30
 800277a:	4b0e      	ldr	r3, [pc, #56]	@ (80027b4 <HAL_SPI_MspInit+0x88>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002786:	23e0      	movs	r3, #224	@ 0xe0
 8002788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278a:	2302      	movs	r3, #2
 800278c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002792:	2302      	movs	r3, #2
 8002794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002796:	2305      	movs	r3, #5
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	4619      	mov	r1, r3
 80027a0:	4805      	ldr	r0, [pc, #20]	@ (80027b8 <HAL_SPI_MspInit+0x8c>)
 80027a2:	f000 fb17 	bl	8002dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80027a6:	bf00      	nop
 80027a8:	3728      	adds	r7, #40	@ 0x28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40013000 	.word	0x40013000
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40020000 	.word	0x40020000

080027bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	607b      	str	r3, [r7, #4]
 80027c6:	4b10      	ldr	r3, [pc, #64]	@ (8002808 <HAL_MspInit+0x4c>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002808 <HAL_MspInit+0x4c>)
 80027cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80027d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002808 <HAL_MspInit+0x4c>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027da:	607b      	str	r3, [r7, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	4b09      	ldr	r3, [pc, #36]	@ (8002808 <HAL_MspInit+0x4c>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	4a08      	ldr	r2, [pc, #32]	@ (8002808 <HAL_MspInit+0x4c>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ee:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <HAL_MspInit+0x4c>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80027fa:	2007      	movs	r0, #7
 80027fc:	f000 faa8 	bl	8002d50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40023800 	.word	0x40023800

0800280c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002810:	bf00      	nop
 8002812:	e7fd      	b.n	8002810 <NMI_Handler+0x4>

08002814 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002818:	bf00      	nop
 800281a:	e7fd      	b.n	8002818 <HardFault_Handler+0x4>

0800281c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002820:	bf00      	nop
 8002822:	e7fd      	b.n	8002820 <MemManage_Handler+0x4>

08002824 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <BusFault_Handler+0x4>

0800282c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002830:	bf00      	nop
 8002832:	e7fd      	b.n	8002830 <UsageFault_Handler+0x4>

08002834 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002862:	f000 f961 	bl	8002b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002870:	4802      	ldr	r0, [pc, #8]	@ (800287c <OTG_FS_IRQHandler+0x10>)
 8002872:	f000 ff21 	bl	80036b8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000700 	.word	0x20000700

08002880 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return 1;
 8002884:	2301      	movs	r3, #1
}
 8002886:	4618      	mov	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <_kill>:

int _kill(int pid, int sig)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800289a:	f009 fe25 	bl	800c4e8 <__errno>
 800289e:	4603      	mov	r3, r0
 80028a0:	2216      	movs	r2, #22
 80028a2:	601a      	str	r2, [r3, #0]
  return -1;
 80028a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <_exit>:

void _exit (int status)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028b8:	f04f 31ff 	mov.w	r1, #4294967295
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ffe7 	bl	8002890 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028c2:	bf00      	nop
 80028c4:	e7fd      	b.n	80028c2 <_exit+0x12>

080028c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e00a      	b.n	80028ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028d8:	f3af 8000 	nop.w
 80028dc:	4601      	mov	r1, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	60ba      	str	r2, [r7, #8]
 80028e4:	b2ca      	uxtb	r2, r1
 80028e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	3301      	adds	r3, #1
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	dbf0      	blt.n	80028d8 <_read+0x12>
  }

  return len;
 80028f6:	687b      	ldr	r3, [r7, #4]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	e009      	b.n	8002926 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	60ba      	str	r2, [r7, #8]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	3301      	adds	r3, #1
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	429a      	cmp	r2, r3
 800292c:	dbf1      	blt.n	8002912 <_write+0x12>
  }
  return len;
 800292e:	687b      	ldr	r3, [r7, #4]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <_close>:

int _close(int file)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002940:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002960:	605a      	str	r2, [r3, #4]
  return 0;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <_isatty>:

int _isatty(int file)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002978:	2301      	movs	r3, #1
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002986:	b480      	push	{r7}
 8002988:	b085      	sub	sp, #20
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a8:	4a14      	ldr	r2, [pc, #80]	@ (80029fc <_sbrk+0x5c>)
 80029aa:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <_sbrk+0x60>)
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b4:	4b13      	ldr	r3, [pc, #76]	@ (8002a04 <_sbrk+0x64>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029bc:	4b11      	ldr	r3, [pc, #68]	@ (8002a04 <_sbrk+0x64>)
 80029be:	4a12      	ldr	r2, [pc, #72]	@ (8002a08 <_sbrk+0x68>)
 80029c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029c2:	4b10      	ldr	r3, [pc, #64]	@ (8002a04 <_sbrk+0x64>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d207      	bcs.n	80029e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029d0:	f009 fd8a 	bl	800c4e8 <__errno>
 80029d4:	4603      	mov	r3, r0
 80029d6:	220c      	movs	r2, #12
 80029d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029da:	f04f 33ff 	mov.w	r3, #4294967295
 80029de:	e009      	b.n	80029f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029e0:	4b08      	ldr	r3, [pc, #32]	@ (8002a04 <_sbrk+0x64>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029e6:	4b07      	ldr	r3, [pc, #28]	@ (8002a04 <_sbrk+0x64>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	4a05      	ldr	r2, [pc, #20]	@ (8002a04 <_sbrk+0x64>)
 80029f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029f2:	68fb      	ldr	r3, [r7, #12]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20020000 	.word	0x20020000
 8002a00:	00000400 	.word	0x00000400
 8002a04:	2000031c 	.word	0x2000031c
 8002a08:	20000c30 	.word	0x20000c30

08002a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a10:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <SystemInit+0x20>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a16:	4a05      	ldr	r2, [pc, #20]	@ (8002a2c <SystemInit+0x20>)
 8002a18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a34:	f7ff ffea 	bl	8002a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a38:	480c      	ldr	r0, [pc, #48]	@ (8002a6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a3a:	490d      	ldr	r1, [pc, #52]	@ (8002a70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a40:	e002      	b.n	8002a48 <LoopCopyDataInit>

08002a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a46:	3304      	adds	r3, #4

08002a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a4c:	d3f9      	bcc.n	8002a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a50:	4c0a      	ldr	r4, [pc, #40]	@ (8002a7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a54:	e001      	b.n	8002a5a <LoopFillZerobss>

08002a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a58:	3204      	adds	r2, #4

08002a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a5c:	d3fb      	bcc.n	8002a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a5e:	f009 fd49 	bl	800c4f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a62:	f7ff f9c1 	bl	8001de8 <main>
  bx  lr    
 8002a66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a70:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002a74:	080103ec 	.word	0x080103ec
  ldr r2, =_sbss
 8002a78:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002a7c:	20000c2c 	.word	0x20000c2c

08002a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a80:	e7fe      	b.n	8002a80 <ADC_IRQHandler>
	...

08002a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a88:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac4 <HAL_Init+0x40>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac4 <HAL_Init+0x40>)
 8002a8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac4 <HAL_Init+0x40>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac4 <HAL_Init+0x40>)
 8002a9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa0:	4b08      	ldr	r3, [pc, #32]	@ (8002ac4 <HAL_Init+0x40>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a07      	ldr	r2, [pc, #28]	@ (8002ac4 <HAL_Init+0x40>)
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aac:	2003      	movs	r0, #3
 8002aae:	f000 f94f 	bl	8002d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f000 f808 	bl	8002ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ab8:	f7ff fe80 	bl	80027bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023c00 	.word	0x40023c00

08002ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ad0:	4b12      	ldr	r3, [pc, #72]	@ (8002b1c <HAL_InitTick+0x54>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <HAL_InitTick+0x58>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f967 	bl	8002dba <HAL_SYSTICK_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e00e      	b.n	8002b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b0f      	cmp	r3, #15
 8002afa:	d80a      	bhi.n	8002b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002afc:	2200      	movs	r2, #0
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	f04f 30ff 	mov.w	r0, #4294967295
 8002b04:	f000 f92f 	bl	8002d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b08:	4a06      	ldr	r2, [pc, #24]	@ (8002b24 <HAL_InitTick+0x5c>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e000      	b.n	8002b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000004 	.word	0x20000004
 8002b20:	2000000c 	.word	0x2000000c
 8002b24:	20000008 	.word	0x20000008

08002b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <HAL_IncTick+0x20>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <HAL_IncTick+0x24>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4413      	add	r3, r2
 8002b38:	4a04      	ldr	r2, [pc, #16]	@ (8002b4c <HAL_IncTick+0x24>)
 8002b3a:	6013      	str	r3, [r2, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	2000000c 	.word	0x2000000c
 8002b4c:	20000320 	.word	0x20000320

08002b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return uwTick;
 8002b54:	4b03      	ldr	r3, [pc, #12]	@ (8002b64 <HAL_GetTick+0x14>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20000320 	.word	0x20000320

08002b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b70:	f7ff ffee 	bl	8002b50 <HAL_GetTick>
 8002b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b80:	d005      	beq.n	8002b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b82:	4b0a      	ldr	r3, [pc, #40]	@ (8002bac <HAL_Delay+0x44>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b8e:	bf00      	nop
 8002b90:	f7ff ffde 	bl	8002b50 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d8f7      	bhi.n	8002b90 <HAL_Delay+0x28>
  {
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	2000000c 	.word	0x2000000c

08002bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002be2:	4a04      	ldr	r2, [pc, #16]	@ (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	60d3      	str	r3, [r2, #12]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bfc:	4b04      	ldr	r3, [pc, #16]	@ (8002c10 <__NVIC_GetPriorityGrouping+0x18>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	f003 0307 	and.w	r3, r3, #7
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	db0b      	blt.n	8002c3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	f003 021f 	and.w	r2, r3, #31
 8002c2c:	4907      	ldr	r1, [pc, #28]	@ (8002c4c <__NVIC_EnableIRQ+0x38>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	2001      	movs	r0, #1
 8002c36:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000e100 	.word	0xe000e100

08002c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	6039      	str	r1, [r7, #0]
 8002c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	db0a      	blt.n	8002c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	490c      	ldr	r1, [pc, #48]	@ (8002c9c <__NVIC_SetPriority+0x4c>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	0112      	lsls	r2, r2, #4
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	440b      	add	r3, r1
 8002c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c78:	e00a      	b.n	8002c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	4908      	ldr	r1, [pc, #32]	@ (8002ca0 <__NVIC_SetPriority+0x50>)
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	3b04      	subs	r3, #4
 8002c88:	0112      	lsls	r2, r2, #4
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	761a      	strb	r2, [r3, #24]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000e100 	.word	0xe000e100
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	@ 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f1c3 0307 	rsb	r3, r3, #7
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	bf28      	it	cs
 8002cc2:	2304      	movcs	r3, #4
 8002cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d902      	bls.n	8002cd4 <NVIC_EncodePriority+0x30>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3b03      	subs	r3, #3
 8002cd2:	e000      	b.n	8002cd6 <NVIC_EncodePriority+0x32>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cec:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf6:	43d9      	mvns	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	4313      	orrs	r3, r2
         );
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3724      	adds	r7, #36	@ 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d1c:	d301      	bcc.n	8002d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e00f      	b.n	8002d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d22:	4a0a      	ldr	r2, [pc, #40]	@ (8002d4c <SysTick_Config+0x40>)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d2a:	210f      	movs	r1, #15
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d30:	f7ff ff8e 	bl	8002c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d34:	4b05      	ldr	r3, [pc, #20]	@ (8002d4c <SysTick_Config+0x40>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3a:	4b04      	ldr	r3, [pc, #16]	@ (8002d4c <SysTick_Config+0x40>)
 8002d3c:	2207      	movs	r2, #7
 8002d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	e000e010 	.word	0xe000e010

08002d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff ff29 	bl	8002bb0 <__NVIC_SetPriorityGrouping>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d78:	f7ff ff3e 	bl	8002bf8 <__NVIC_GetPriorityGrouping>
 8002d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	6978      	ldr	r0, [r7, #20]
 8002d84:	f7ff ff8e 	bl	8002ca4 <NVIC_EncodePriority>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff5d 	bl	8002c50 <__NVIC_SetPriority>
}
 8002d96:	bf00      	nop
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff31 	bl	8002c14 <__NVIC_EnableIRQ>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff ffa2 	bl	8002d0c <SysTick_Config>
 8002dc8:	4603      	mov	r3, r0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	@ 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	e16b      	b.n	80030c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002df0:	2201      	movs	r2, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	f040 815a 	bne.w	80030c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d005      	beq.n	8002e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d130      	bne.n	8002e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	2203      	movs	r2, #3
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 0201 	and.w	r2, r3, #1
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d017      	beq.n	8002ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d123      	bne.n	8002f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	08da      	lsrs	r2, r3, #3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3208      	adds	r2, #8
 8002ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	220f      	movs	r2, #15
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	08da      	lsrs	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3208      	adds	r2, #8
 8002f12:	69b9      	ldr	r1, [r7, #24]
 8002f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	2203      	movs	r2, #3
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0203 	and.w	r2, r3, #3
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80b4 	beq.w	80030c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	4b60      	ldr	r3, [pc, #384]	@ (80030e0 <HAL_GPIO_Init+0x30c>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	4a5f      	ldr	r2, [pc, #380]	@ (80030e0 <HAL_GPIO_Init+0x30c>)
 8002f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80030e0 <HAL_GPIO_Init+0x30c>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f76:	4a5b      	ldr	r2, [pc, #364]	@ (80030e4 <HAL_GPIO_Init+0x310>)
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	220f      	movs	r2, #15
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a52      	ldr	r2, [pc, #328]	@ (80030e8 <HAL_GPIO_Init+0x314>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d02b      	beq.n	8002ffa <HAL_GPIO_Init+0x226>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a51      	ldr	r2, [pc, #324]	@ (80030ec <HAL_GPIO_Init+0x318>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d025      	beq.n	8002ff6 <HAL_GPIO_Init+0x222>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a50      	ldr	r2, [pc, #320]	@ (80030f0 <HAL_GPIO_Init+0x31c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01f      	beq.n	8002ff2 <HAL_GPIO_Init+0x21e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a4f      	ldr	r2, [pc, #316]	@ (80030f4 <HAL_GPIO_Init+0x320>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d019      	beq.n	8002fee <HAL_GPIO_Init+0x21a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a4e      	ldr	r2, [pc, #312]	@ (80030f8 <HAL_GPIO_Init+0x324>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d013      	beq.n	8002fea <HAL_GPIO_Init+0x216>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a4d      	ldr	r2, [pc, #308]	@ (80030fc <HAL_GPIO_Init+0x328>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00d      	beq.n	8002fe6 <HAL_GPIO_Init+0x212>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a4c      	ldr	r2, [pc, #304]	@ (8003100 <HAL_GPIO_Init+0x32c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d007      	beq.n	8002fe2 <HAL_GPIO_Init+0x20e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a4b      	ldr	r2, [pc, #300]	@ (8003104 <HAL_GPIO_Init+0x330>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d101      	bne.n	8002fde <HAL_GPIO_Init+0x20a>
 8002fda:	2307      	movs	r3, #7
 8002fdc:	e00e      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fde:	2308      	movs	r3, #8
 8002fe0:	e00c      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fe2:	2306      	movs	r3, #6
 8002fe4:	e00a      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fe6:	2305      	movs	r3, #5
 8002fe8:	e008      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fea:	2304      	movs	r3, #4
 8002fec:	e006      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e004      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e002      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	f002 0203 	and.w	r2, r2, #3
 8003002:	0092      	lsls	r2, r2, #2
 8003004:	4093      	lsls	r3, r2
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800300c:	4935      	ldr	r1, [pc, #212]	@ (80030e4 <HAL_GPIO_Init+0x310>)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	3302      	adds	r3, #2
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800301a:	4b3b      	ldr	r3, [pc, #236]	@ (8003108 <HAL_GPIO_Init+0x334>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800303e:	4a32      	ldr	r2, [pc, #200]	@ (8003108 <HAL_GPIO_Init+0x334>)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003044:	4b30      	ldr	r3, [pc, #192]	@ (8003108 <HAL_GPIO_Init+0x334>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003068:	4a27      	ldr	r2, [pc, #156]	@ (8003108 <HAL_GPIO_Init+0x334>)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800306e:	4b26      	ldr	r3, [pc, #152]	@ (8003108 <HAL_GPIO_Init+0x334>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003092:	4a1d      	ldr	r2, [pc, #116]	@ (8003108 <HAL_GPIO_Init+0x334>)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003098:	4b1b      	ldr	r3, [pc, #108]	@ (8003108 <HAL_GPIO_Init+0x334>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030bc:	4a12      	ldr	r2, [pc, #72]	@ (8003108 <HAL_GPIO_Init+0x334>)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3301      	adds	r3, #1
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	2b0f      	cmp	r3, #15
 80030cc:	f67f ae90 	bls.w	8002df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	3724      	adds	r7, #36	@ 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40013800 	.word	0x40013800
 80030e8:	40020000 	.word	0x40020000
 80030ec:	40020400 	.word	0x40020400
 80030f0:	40020800 	.word	0x40020800
 80030f4:	40020c00 	.word	0x40020c00
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40021400 	.word	0x40021400
 8003100:	40021800 	.word	0x40021800
 8003104:	40021c00 	.word	0x40021c00
 8003108:	40013c00 	.word	0x40013c00

0800310c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	807b      	strh	r3, [r7, #2]
 8003118:	4613      	mov	r3, r2
 800311a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800311c:	787b      	ldrb	r3, [r7, #1]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003122:	887a      	ldrh	r2, [r7, #2]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003128:	e003      	b.n	8003132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800312a:	887b      	ldrh	r3, [r7, #2]
 800312c:	041a      	lsls	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	619a      	str	r2, [r3, #24]
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b086      	sub	sp, #24
 8003142:	af02      	add	r7, sp, #8
 8003144:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e059      	b.n	8003204 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f008 f884 	bl	800b278 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2203      	movs	r2, #3
 8003174:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800317e:	d102      	bne.n	8003186 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f004 fe91 	bl	8007eb2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	7c1a      	ldrb	r2, [r3, #16]
 8003198:	f88d 2000 	strb.w	r2, [sp]
 800319c:	3304      	adds	r3, #4
 800319e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031a0:	f004 fe12 	bl	8007dc8 <USB_CoreInit>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e026      	b.n	8003204 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2101      	movs	r1, #1
 80031bc:	4618      	mov	r0, r3
 80031be:	f004 fe89 	bl	8007ed4 <USB_SetCurrentMode>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e017      	b.n	8003204 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	7c1a      	ldrb	r2, [r3, #16]
 80031dc:	f88d 2000 	strb.w	r2, [sp]
 80031e0:	3304      	adds	r3, #4
 80031e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031e4:	f005 f832 	bl	800824c <USB_HostInit>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2202      	movs	r2, #2
 80031f2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e004      	b.n	8003204 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800320c:	b590      	push	{r4, r7, lr}
 800320e:	b08b      	sub	sp, #44	@ 0x2c
 8003210:	af04      	add	r7, sp, #16
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	4608      	mov	r0, r1
 8003216:	4611      	mov	r1, r2
 8003218:	461a      	mov	r2, r3
 800321a:	4603      	mov	r3, r0
 800321c:	70fb      	strb	r3, [r7, #3]
 800321e:	460b      	mov	r3, r1
 8003220:	70bb      	strb	r3, [r7, #2]
 8003222:	4613      	mov	r3, r2
 8003224:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003226:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003228:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_HCD_HC_Init+0x2c>
 8003234:	2302      	movs	r3, #2
 8003236:	e09d      	b.n	8003374 <HAL_HCD_HC_Init+0x168>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	3319      	adds	r3, #25
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	3314      	adds	r3, #20
 8003264:	787a      	ldrb	r2, [r7, #1]
 8003266:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003268:	78fa      	ldrb	r2, [r7, #3]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	3315      	adds	r3, #21
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	3326      	adds	r3, #38	@ 0x26
 800328c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003290:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	78bb      	ldrb	r3, [r7, #2]
 8003296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800329a:	b2d8      	uxtb	r0, r3
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	3316      	adds	r3, #22
 80032aa:	4602      	mov	r2, r0
 80032ac:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80032ae:	78fb      	ldrb	r3, [r7, #3]
 80032b0:	4619      	mov	r1, r3
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fba4 	bl	8003a00 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80032b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	da0a      	bge.n	80032d6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	3317      	adds	r3, #23
 80032d0:	2201      	movs	r2, #1
 80032d2:	701a      	strb	r2, [r3, #0]
 80032d4:	e009      	b.n	80032ea <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	3317      	adds	r3, #23
 80032e6:	2200      	movs	r2, #0
 80032e8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f005 f910 	bl	8008514 <USB_GetHostSpeed>
 80032f4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80032f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d10b      	bne.n	8003316 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80032fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003302:	2b01      	cmp	r3, #1
 8003304:	d107      	bne.n	8003316 <HAL_HCD_HC_Init+0x10a>
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d104      	bne.n	8003316 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2bbc      	cmp	r3, #188	@ 0xbc
 8003310:	d901      	bls.n	8003316 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003312:	23bc      	movs	r3, #188	@ 0xbc
 8003314:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	3318      	adds	r3, #24
 8003326:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800332a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	b298      	uxth	r0, r3
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	3328      	adds	r3, #40	@ 0x28
 8003340:	4602      	mov	r2, r0
 8003342:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	b29b      	uxth	r3, r3
 800334c:	787c      	ldrb	r4, [r7, #1]
 800334e:	78ba      	ldrb	r2, [r7, #2]
 8003350:	78f9      	ldrb	r1, [r7, #3]
 8003352:	9302      	str	r3, [sp, #8]
 8003354:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	4623      	mov	r3, r4
 8003362:	f005 f8ff 	bl	8008564 <USB_HC_Init>
 8003366:	4603      	mov	r3, r0
 8003368:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003372:	7bfb      	ldrb	r3, [r7, #15]
}
 8003374:	4618      	mov	r0, r3
 8003376:	371c      	adds	r7, #28
 8003378:	46bd      	mov	sp, r7
 800337a:	bd90      	pop	{r4, r7, pc}

0800337c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	4608      	mov	r0, r1
 8003386:	4611      	mov	r1, r2
 8003388:	461a      	mov	r2, r3
 800338a:	4603      	mov	r3, r0
 800338c:	70fb      	strb	r3, [r7, #3]
 800338e:	460b      	mov	r3, r1
 8003390:	70bb      	strb	r3, [r7, #2]
 8003392:	4613      	mov	r3, r2
 8003394:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	3317      	adds	r3, #23
 80033a6:	78ba      	ldrb	r2, [r7, #2]
 80033a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	3326      	adds	r3, #38	@ 0x26
 80033ba:	787a      	ldrb	r2, [r7, #1]
 80033bc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80033be:	7c3b      	ldrb	r3, [r7, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d114      	bne.n	80033ee <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	332a      	adds	r3, #42	@ 0x2a
 80033d4:	2203      	movs	r2, #3
 80033d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	3319      	adds	r3, #25
 80033e8:	7f3a      	ldrb	r2, [r7, #28]
 80033ea:	701a      	strb	r2, [r3, #0]
 80033ec:	e009      	b.n	8003402 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	332a      	adds	r3, #42	@ 0x2a
 80033fe:	2202      	movs	r2, #2
 8003400:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003402:	787b      	ldrb	r3, [r7, #1]
 8003404:	2b03      	cmp	r3, #3
 8003406:	f200 8102 	bhi.w	800360e <HAL_HCD_HC_SubmitRequest+0x292>
 800340a:	a201      	add	r2, pc, #4	@ (adr r2, 8003410 <HAL_HCD_HC_SubmitRequest+0x94>)
 800340c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003410:	08003421 	.word	0x08003421
 8003414:	080035f9 	.word	0x080035f9
 8003418:	080034e5 	.word	0x080034e5
 800341c:	0800356f 	.word	0x0800356f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003420:	7c3b      	ldrb	r3, [r7, #16]
 8003422:	2b01      	cmp	r3, #1
 8003424:	f040 80f5 	bne.w	8003612 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003428:	78bb      	ldrb	r3, [r7, #2]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d12d      	bne.n	800348a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800342e:	8b3b      	ldrh	r3, [r7, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d109      	bne.n	8003448 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	333d      	adds	r3, #61	@ 0x3d
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	333d      	adds	r3, #61	@ 0x3d
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10a      	bne.n	8003474 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	332a      	adds	r3, #42	@ 0x2a
 800346e:	2200      	movs	r2, #0
 8003470:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003472:	e0ce      	b.n	8003612 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	332a      	adds	r3, #42	@ 0x2a
 8003484:	2202      	movs	r2, #2
 8003486:	701a      	strb	r2, [r3, #0]
      break;
 8003488:	e0c3      	b.n	8003612 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	331a      	adds	r3, #26
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b01      	cmp	r3, #1
 800349e:	f040 80b8 	bne.w	8003612 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	333c      	adds	r3, #60	@ 0x3c
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	332a      	adds	r3, #42	@ 0x2a
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
      break;
 80034cc:	e0a1      	b.n	8003612 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	332a      	adds	r3, #42	@ 0x2a
 80034de:	2202      	movs	r2, #2
 80034e0:	701a      	strb	r2, [r3, #0]
      break;
 80034e2:	e096      	b.n	8003612 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80034e4:	78bb      	ldrb	r3, [r7, #2]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d120      	bne.n	800352c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	333d      	adds	r3, #61	@ 0x3d
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	332a      	adds	r3, #42	@ 0x2a
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003514:	e07e      	b.n	8003614 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	332a      	adds	r3, #42	@ 0x2a
 8003526:	2202      	movs	r2, #2
 8003528:	701a      	strb	r2, [r3, #0]
      break;
 800352a:	e073      	b.n	8003614 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	333c      	adds	r3, #60	@ 0x3c
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10a      	bne.n	8003558 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	332a      	adds	r3, #42	@ 0x2a
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
      break;
 8003556:	e05d      	b.n	8003614 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	332a      	adds	r3, #42	@ 0x2a
 8003568:	2202      	movs	r2, #2
 800356a:	701a      	strb	r2, [r3, #0]
      break;
 800356c:	e052      	b.n	8003614 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800356e:	78bb      	ldrb	r3, [r7, #2]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d120      	bne.n	80035b6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	333d      	adds	r3, #61	@ 0x3d
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	4613      	mov	r3, r2
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	332a      	adds	r3, #42	@ 0x2a
 800359a:	2200      	movs	r2, #0
 800359c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800359e:	e039      	b.n	8003614 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035a0:	78fa      	ldrb	r2, [r7, #3]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	332a      	adds	r3, #42	@ 0x2a
 80035b0:	2202      	movs	r2, #2
 80035b2:	701a      	strb	r2, [r3, #0]
      break;
 80035b4:	e02e      	b.n	8003614 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	333c      	adds	r3, #60	@ 0x3c
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	332a      	adds	r3, #42	@ 0x2a
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
      break;
 80035e0:	e018      	b.n	8003614 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	332a      	adds	r3, #42	@ 0x2a
 80035f2:	2202      	movs	r2, #2
 80035f4:	701a      	strb	r2, [r3, #0]
      break;
 80035f6:	e00d      	b.n	8003614 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035f8:	78fa      	ldrb	r2, [r7, #3]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	1a9b      	subs	r3, r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	332a      	adds	r3, #42	@ 0x2a
 8003608:	2200      	movs	r2, #0
 800360a:	701a      	strb	r2, [r3, #0]
      break;
 800360c:	e002      	b.n	8003614 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800360e:	bf00      	nop
 8003610:	e000      	b.n	8003614 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003612:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	332c      	adds	r3, #44	@ 0x2c
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003628:	78fa      	ldrb	r2, [r7, #3]
 800362a:	8b39      	ldrh	r1, [r7, #24]
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4403      	add	r3, r0
 8003638:	3334      	adds	r3, #52	@ 0x34
 800363a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	334c      	adds	r3, #76	@ 0x4c
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003650:	78fa      	ldrb	r2, [r7, #3]
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	1a9b      	subs	r3, r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	3338      	adds	r3, #56	@ 0x38
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	3315      	adds	r3, #21
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	334d      	adds	r3, #77	@ 0x4d
 8003688:	2200      	movs	r2, #0
 800368a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	4613      	mov	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	3310      	adds	r3, #16
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	4413      	add	r3, r2
 80036a0:	1d19      	adds	r1, r3, #4
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	799b      	ldrb	r3, [r3, #6]
 80036a6:	461a      	mov	r2, r3
 80036a8:	f005 f888 	bl	80087bc <USB_HC_StartXfer>
 80036ac:	4603      	mov	r3, r0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop

080036b8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f004 fd76 	bl	80081c0 <USB_GetMode>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	f040 80fb 	bne.w	80038d2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f004 fd39 	bl	8008158 <USB_ReadInterrupts>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 80f1 	beq.w	80038d0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f004 fd30 	bl	8008158 <USB_ReadInterrupts>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003702:	d104      	bne.n	800370e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800370c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f004 fd20 	bl	8008158 <USB_ReadInterrupts>
 8003718:	4603      	mov	r3, r0
 800371a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800371e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003722:	d104      	bne.n	800372e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800372c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f004 fd10 	bl	8008158 <USB_ReadInterrupts>
 8003738:	4603      	mov	r3, r0
 800373a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800373e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003742:	d104      	bne.n	800374e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800374c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f004 fd00 	bl	8008158 <USB_ReadInterrupts>
 8003758:	4603      	mov	r3, r0
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b02      	cmp	r3, #2
 8003760:	d103      	bne.n	800376a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2202      	movs	r2, #2
 8003768:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f004 fcf2 	bl	8008158 <USB_ReadInterrupts>
 8003774:	4603      	mov	r3, r0
 8003776:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800377a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800377e:	d120      	bne.n	80037c2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003788:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d113      	bne.n	80037c2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800379a:	2110      	movs	r1, #16
 800379c:	6938      	ldr	r0, [r7, #16]
 800379e:	f004 fbe5 	bl	8007f6c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80037a2:	6938      	ldr	r0, [r7, #16]
 80037a4:	f004 fc14 	bl	8007fd0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	7a5b      	ldrb	r3, [r3, #9]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d105      	bne.n	80037bc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2101      	movs	r1, #1
 80037b6:	4618      	mov	r0, r3
 80037b8:	f004 fe0c 	bl	80083d4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f007 fdd9 	bl	800b374 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f004 fcc6 	bl	8008158 <USB_ReadInterrupts>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037d6:	d102      	bne.n	80037de <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f001 fd4d 	bl	8005278 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f004 fcb8 	bl	8008158 <USB_ReadInterrupts>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d106      	bne.n	8003800 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f007 fda2 	bl	800b33c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2208      	movs	r2, #8
 80037fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f004 fca7 	bl	8008158 <USB_ReadInterrupts>
 800380a:	4603      	mov	r3, r0
 800380c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003810:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003814:	d139      	bne.n	800388a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f005 fa48 	bl	8008cb0 <USB_HC_ReadInterrupt>
 8003820:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	e025      	b.n	8003874 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d018      	beq.n	800386e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4413      	add	r3, r2
 8003844:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800384e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003852:	d106      	bne.n	8003862 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	4619      	mov	r1, r3
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f905 	bl	8003a6a <HCD_HC_IN_IRQHandler>
 8003860:	e005      	b.n	800386e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	4619      	mov	r1, r3
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 ff67 	bl	800473c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	3301      	adds	r3, #1
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	795b      	ldrb	r3, [r3, #5]
 8003878:	461a      	mov	r2, r3
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	4293      	cmp	r3, r2
 800387e:	d3d3      	bcc.n	8003828 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003888:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f004 fc62 	bl	8008158 <USB_ReadInterrupts>
 8003894:	4603      	mov	r3, r0
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	2b10      	cmp	r3, #16
 800389c:	d101      	bne.n	80038a2 <HAL_HCD_IRQHandler+0x1ea>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <HAL_HCD_IRQHandler+0x1ec>
 80038a2:	2300      	movs	r3, #0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d014      	beq.n	80038d2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0210 	bic.w	r2, r2, #16
 80038b6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f001 fbfe 	bl	80050ba <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699a      	ldr	r2, [r3, #24]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0210 	orr.w	r2, r2, #16
 80038cc:	619a      	str	r2, [r3, #24]
 80038ce:	e000      	b.n	80038d2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80038d0:	bf00      	nop
    }
  }
}
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_HCD_Start+0x16>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e013      	b.n	8003916 <HAL_HCD_Start+0x3e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2101      	movs	r1, #1
 80038fc:	4618      	mov	r0, r3
 80038fe:	f004 fdd0 	bl	80084a2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f004 fac2 	bl	8007e90 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_HCD_Stop+0x16>
 8003930:	2302      	movs	r3, #2
 8003932:	e00d      	b.n	8003950 <HAL_HCD_Stop+0x32>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f005 fb23 	bl	8008f8c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f004 fd72 	bl	800844e <USB_ResetPort>
 800396a:	4603      	mov	r3, r0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	334c      	adds	r3, #76	@ 0x4c
 8003990:	781b      	ldrb	r3, [r3, #0]
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	460b      	mov	r3, r1
 80039a8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80039aa:	78fa      	ldrb	r2, [r7, #3]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	1a9b      	subs	r3, r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	3338      	adds	r3, #56	@ 0x38
 80039ba:	681b      	ldr	r3, [r3, #0]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f004 fdb4 	bl	8008542 <USB_GetCurrentFrame>
 80039da:	4603      	mov	r3, r0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f004 fd8f 	bl	8008514 <USB_GetHostSpeed>
 80039f6:	4603      	mov	r3, r0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	331a      	adds	r3, #26
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003a20:	78fa      	ldrb	r2, [r7, #3]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	331b      	adds	r3, #27
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	3325      	adds	r3, #37	@ 0x25
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	3324      	adds	r3, #36	@ 0x24
 8003a58:	2200      	movs	r2, #0
 8003a5a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b086      	sub	sp, #24
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	460b      	mov	r3, r1
 8003a74:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	78fa      	ldrb	r2, [r7, #3]
 8003a86:	4611      	mov	r1, r2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f004 fb78 	bl	800817e <USB_ReadChInterrupts>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d11a      	bne.n	8003ace <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003aaa:	78fa      	ldrb	r2, [r7, #3]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	334d      	adds	r3, #77	@ 0x4d
 8003aba:	2207      	movs	r2, #7
 8003abc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f005 f903 	bl	8008cd2 <USB_HC_Halt>
 8003acc:	e09e      	b.n	8003c0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f004 fb51 	bl	800817e <USB_ReadChInterrupts>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ae6:	d11b      	bne.n	8003b20 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003af4:	461a      	mov	r2, r3
 8003af6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003afa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	334d      	adds	r3, #77	@ 0x4d
 8003b0c:	2208      	movs	r2, #8
 8003b0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	4611      	mov	r1, r2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f005 f8da 	bl	8008cd2 <USB_HC_Halt>
 8003b1e:	e075      	b.n	8003c0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	78fa      	ldrb	r2, [r7, #3]
 8003b26:	4611      	mov	r1, r2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f004 fb28 	bl	800817e <USB_ReadChInterrupts>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d11a      	bne.n	8003b6e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b44:	461a      	mov	r2, r3
 8003b46:	2308      	movs	r3, #8
 8003b48:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	334d      	adds	r3, #77	@ 0x4d
 8003b5a:	2206      	movs	r2, #6
 8003b5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f005 f8b3 	bl	8008cd2 <USB_HC_Halt>
 8003b6c:	e04e      	b.n	8003c0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	4611      	mov	r1, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f004 fb01 	bl	800817e <USB_ReadChInterrupts>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b86:	d11b      	bne.n	8003bc0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b94:	461a      	mov	r2, r3
 8003b96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003b9c:	78fa      	ldrb	r2, [r7, #3]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	1a9b      	subs	r3, r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	334d      	adds	r3, #77	@ 0x4d
 8003bac:	2209      	movs	r2, #9
 8003bae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	78fa      	ldrb	r2, [r7, #3]
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f005 f88a 	bl	8008cd2 <USB_HC_Halt>
 8003bbe:	e025      	b.n	8003c0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f004 fad8 	bl	800817e <USB_ReadChInterrupts>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd4:	2b80      	cmp	r3, #128	@ 0x80
 8003bd6:	d119      	bne.n	8003c0c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003be4:	461a      	mov	r2, r3
 8003be6:	2380      	movs	r3, #128	@ 0x80
 8003be8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	334d      	adds	r3, #77	@ 0x4d
 8003bfa:	2207      	movs	r2, #7
 8003bfc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	4611      	mov	r1, r2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f005 f863 	bl	8008cd2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f004 fab2 	bl	800817e <USB_ReadChInterrupts>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c24:	d112      	bne.n	8003c4c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	78fa      	ldrb	r2, [r7, #3]
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f005 f84f 	bl	8008cd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c40:	461a      	mov	r2, r3
 8003c42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c46:	6093      	str	r3, [r2, #8]
 8003c48:	f000 bd75 	b.w	8004736 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f004 fa92 	bl	800817e <USB_ReadChInterrupts>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	f040 8128 	bne.w	8003eb6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003c66:	78fb      	ldrb	r3, [r7, #3]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c72:	461a      	mov	r2, r3
 8003c74:	2320      	movs	r3, #32
 8003c76:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	331b      	adds	r3, #27
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d119      	bne.n	8003cc2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	331b      	adds	r3, #27
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	0151      	lsls	r1, r2, #5
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	440a      	add	r2, r1
 8003cb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003cbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cc0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	799b      	ldrb	r3, [r3, #6]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d01b      	beq.n	8003d02 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003cca:	78fa      	ldrb	r2, [r7, #3]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	3330      	adds	r3, #48	@ 0x30
 8003cda:	6819      	ldr	r1, [r3, #0]
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cee:	78fa      	ldrb	r2, [r7, #3]
 8003cf0:	1ac9      	subs	r1, r1, r3
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4403      	add	r3, r0
 8003cfe:	3338      	adds	r3, #56	@ 0x38
 8003d00:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	334d      	adds	r3, #77	@ 0x4d
 8003d12:	2201      	movs	r2, #1
 8003d14:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d16:	78fa      	ldrb	r2, [r7, #3]
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	3344      	adds	r3, #68	@ 0x44
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d36:	461a      	mov	r2, r3
 8003d38:	2301      	movs	r3, #1
 8003d3a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d3c:	78fa      	ldrb	r2, [r7, #3]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	3326      	adds	r3, #38	@ 0x26
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	3326      	adds	r3, #38	@ 0x26
 8003d62:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d110      	bne.n	8003d8a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	78fa      	ldrb	r2, [r7, #3]
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f004 ffae 	bl	8008cd2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d82:	461a      	mov	r2, r3
 8003d84:	2310      	movs	r3, #16
 8003d86:	6093      	str	r3, [r2, #8]
 8003d88:	e03d      	b.n	8003e06 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	3326      	adds	r3, #38	@ 0x26
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d00a      	beq.n	8003db6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	3326      	adds	r3, #38	@ 0x26
 8003db0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d127      	bne.n	8003e06 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	78fa      	ldrb	r2, [r7, #3]
 8003dc6:	0151      	lsls	r1, r2, #5
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	440a      	add	r2, r1
 8003dcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003dd0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003dd4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	334c      	adds	r3, #76	@ 0x4c
 8003de6:	2201      	movs	r2, #1
 8003de8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	1a9b      	subs	r3, r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	334c      	adds	r3, #76	@ 0x4c
 8003dfa:	781a      	ldrb	r2, [r3, #0]
 8003dfc:	78fb      	ldrb	r3, [r7, #3]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f007 fac5 	bl	800b390 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	799b      	ldrb	r3, [r3, #6]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d13b      	bne.n	8003e86 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003e0e:	78fa      	ldrb	r2, [r7, #3]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	3338      	adds	r3, #56	@ 0x38
 8003e1e:	6819      	ldr	r1, [r3, #0]
 8003e20:	78fa      	ldrb	r2, [r7, #3]
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4403      	add	r3, r0
 8003e2e:	3328      	adds	r3, #40	@ 0x28
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	440b      	add	r3, r1
 8003e34:	1e59      	subs	r1, r3, #1
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4403      	add	r3, r0
 8003e44:	3328      	adds	r3, #40	@ 0x28
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 8470 	beq.w	8004736 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003e56:	78fa      	ldrb	r2, [r7, #3]
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	1a9b      	subs	r3, r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	440b      	add	r3, r1
 8003e64:	333c      	adds	r3, #60	@ 0x3c
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	f083 0301 	eor.w	r3, r3, #1
 8003e6e:	b2d8      	uxtb	r0, r3
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	4613      	mov	r3, r2
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	1a9b      	subs	r3, r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	333c      	adds	r3, #60	@ 0x3c
 8003e7e:	4602      	mov	r2, r0
 8003e80:	701a      	strb	r2, [r3, #0]
 8003e82:	f000 bc58 	b.w	8004736 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003e86:	78fa      	ldrb	r2, [r7, #3]
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	333c      	adds	r3, #60	@ 0x3c
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	78fa      	ldrb	r2, [r7, #3]
 8003e9a:	f083 0301 	eor.w	r3, r3, #1
 8003e9e:	b2d8      	uxtb	r0, r3
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	1a9b      	subs	r3, r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	440b      	add	r3, r1
 8003eac:	333c      	adds	r3, #60	@ 0x3c
 8003eae:	4602      	mov	r2, r0
 8003eb0:	701a      	strb	r2, [r3, #0]
 8003eb2:	f000 bc40 	b.w	8004736 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f004 f95d 	bl	800817e <USB_ReadChInterrupts>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f003 0320 	and.w	r3, r3, #32
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	d131      	bne.n	8003f32 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003ece:	78fb      	ldrb	r3, [r7, #3]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eda:	461a      	mov	r2, r3
 8003edc:	2320      	movs	r3, #32
 8003ede:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003ee0:	78fa      	ldrb	r2, [r7, #3]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	331a      	adds	r3, #26
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	f040 841f 	bne.w	8004736 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	331b      	adds	r3, #27
 8003f08:	2201      	movs	r2, #1
 8003f0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003f0c:	78fa      	ldrb	r2, [r7, #3]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	334d      	adds	r3, #77	@ 0x4d
 8003f1c:	2203      	movs	r2, #3
 8003f1e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f004 fed2 	bl	8008cd2 <USB_HC_Halt>
 8003f2e:	f000 bc02 	b.w	8004736 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	4611      	mov	r1, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f004 f91f 	bl	800817e <USB_ReadChInterrupts>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	f040 8305 	bne.w	8004556 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f58:	461a      	mov	r2, r3
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	334d      	adds	r3, #77	@ 0x4d
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d114      	bne.n	8003f9e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f74:	78fa      	ldrb	r2, [r7, #3]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	334d      	adds	r3, #77	@ 0x4d
 8003f84:	2202      	movs	r2, #2
 8003f86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	334c      	adds	r3, #76	@ 0x4c
 8003f98:	2201      	movs	r2, #1
 8003f9a:	701a      	strb	r2, [r3, #0]
 8003f9c:	e2cc      	b.n	8004538 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003f9e:	78fa      	ldrb	r2, [r7, #3]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	334d      	adds	r3, #77	@ 0x4d
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b06      	cmp	r3, #6
 8003fb2:	d114      	bne.n	8003fde <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	334d      	adds	r3, #77	@ 0x4d
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003fc8:	78fa      	ldrb	r2, [r7, #3]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	334c      	adds	r3, #76	@ 0x4c
 8003fd8:	2205      	movs	r2, #5
 8003fda:	701a      	strb	r2, [r3, #0]
 8003fdc:	e2ac      	b.n	8004538 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003fde:	78fa      	ldrb	r2, [r7, #3]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	334d      	adds	r3, #77	@ 0x4d
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b07      	cmp	r3, #7
 8003ff2:	d00b      	beq.n	800400c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003ff4:	78fa      	ldrb	r2, [r7, #3]
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	334d      	adds	r3, #77	@ 0x4d
 8004004:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004006:	2b09      	cmp	r3, #9
 8004008:	f040 80a6 	bne.w	8004158 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800400c:	78fa      	ldrb	r2, [r7, #3]
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	334d      	adds	r3, #77	@ 0x4d
 800401c:	2202      	movs	r2, #2
 800401e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004020:	78fa      	ldrb	r2, [r7, #3]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	1a9b      	subs	r3, r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	3344      	adds	r3, #68	@ 0x44
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	1c59      	adds	r1, r3, #1
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4403      	add	r3, r0
 8004040:	3344      	adds	r3, #68	@ 0x44
 8004042:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004044:	78fa      	ldrb	r2, [r7, #3]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	3344      	adds	r3, #68	@ 0x44
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d943      	bls.n	80040e2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800405a:	78fa      	ldrb	r2, [r7, #3]
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	1a9b      	subs	r3, r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	3344      	adds	r3, #68	@ 0x44
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800406e:	78fa      	ldrb	r2, [r7, #3]
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	331a      	adds	r3, #26
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d123      	bne.n	80040cc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004084:	78fa      	ldrb	r2, [r7, #3]
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	4613      	mov	r3, r2
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	331b      	adds	r3, #27
 8004094:	2200      	movs	r2, #0
 8004096:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	331c      	adds	r3, #28
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	78fa      	ldrb	r2, [r7, #3]
 80040bc:	0151      	lsls	r1, r2, #5
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	440a      	add	r2, r1
 80040c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ca:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	334c      	adds	r3, #76	@ 0x4c
 80040dc:	2204      	movs	r2, #4
 80040de:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80040e0:	e229      	b.n	8004536 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	334c      	adds	r3, #76	@ 0x4c
 80040f2:	2202      	movs	r2, #2
 80040f4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040f6:	78fa      	ldrb	r2, [r7, #3]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	3326      	adds	r3, #38	@ 0x26
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00b      	beq.n	8004124 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800410c:	78fa      	ldrb	r2, [r7, #3]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	3326      	adds	r3, #38	@ 0x26
 800411c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800411e:	2b02      	cmp	r3, #2
 8004120:	f040 8209 	bne.w	8004536 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	4413      	add	r3, r2
 800412c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800413a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004142:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4413      	add	r3, r2
 800414c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004150:	461a      	mov	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004156:	e1ee      	b.n	8004536 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004158:	78fa      	ldrb	r2, [r7, #3]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	334d      	adds	r3, #77	@ 0x4d
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b05      	cmp	r3, #5
 800416c:	f040 80c8 	bne.w	8004300 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004170:	78fa      	ldrb	r2, [r7, #3]
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	334d      	adds	r3, #77	@ 0x4d
 8004180:	2202      	movs	r2, #2
 8004182:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004184:	78fa      	ldrb	r2, [r7, #3]
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	331b      	adds	r3, #27
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b01      	cmp	r3, #1
 8004198:	f040 81ce 	bne.w	8004538 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800419c:	78fa      	ldrb	r2, [r7, #3]
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	4613      	mov	r3, r2
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	1a9b      	subs	r3, r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	3326      	adds	r3, #38	@ 0x26
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d16b      	bne.n	800428a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80041b2:	78fa      	ldrb	r2, [r7, #3]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	3348      	adds	r3, #72	@ 0x48
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	1c59      	adds	r1, r3, #1
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4403      	add	r3, r0
 80041d2:	3348      	adds	r3, #72	@ 0x48
 80041d4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80041d6:	78fa      	ldrb	r2, [r7, #3]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	3348      	adds	r3, #72	@ 0x48
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d943      	bls.n	8004274 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	3348      	adds	r3, #72	@ 0x48
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004200:	78fa      	ldrb	r2, [r7, #3]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	331b      	adds	r3, #27
 8004210:	2200      	movs	r2, #0
 8004212:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004214:	78fa      	ldrb	r2, [r7, #3]
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	1a9b      	subs	r3, r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	3344      	adds	r3, #68	@ 0x44
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d809      	bhi.n	800423e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800422a:	78fa      	ldrb	r2, [r7, #3]
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	331c      	adds	r3, #28
 800423a:	2201      	movs	r2, #1
 800423c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800423e:	78fb      	ldrb	r3, [r7, #3]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	4413      	add	r3, r2
 8004246:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	78fa      	ldrb	r2, [r7, #3]
 800424e:	0151      	lsls	r1, r2, #5
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	440a      	add	r2, r1
 8004254:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004258:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800425c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	334c      	adds	r3, #76	@ 0x4c
 800426e:	2204      	movs	r2, #4
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	e014      	b.n	800429e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004274:	78fa      	ldrb	r2, [r7, #3]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	334c      	adds	r3, #76	@ 0x4c
 8004284:	2202      	movs	r2, #2
 8004286:	701a      	strb	r2, [r3, #0]
 8004288:	e009      	b.n	800429e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800428a:	78fa      	ldrb	r2, [r7, #3]
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	4613      	mov	r3, r2
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	334c      	adds	r3, #76	@ 0x4c
 800429a:	2202      	movs	r2, #2
 800429c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	3326      	adds	r3, #38	@ 0x26
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00b      	beq.n	80042cc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80042b4:	78fa      	ldrb	r2, [r7, #3]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	3326      	adds	r3, #38	@ 0x26
 80042c4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	f040 8136 	bne.w	8004538 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80042e2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042ea:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042f8:	461a      	mov	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e11b      	b.n	8004538 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004300:	78fa      	ldrb	r2, [r7, #3]
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	334d      	adds	r3, #77	@ 0x4d
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b03      	cmp	r3, #3
 8004314:	f040 8081 	bne.w	800441a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004318:	78fa      	ldrb	r2, [r7, #3]
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	4613      	mov	r3, r2
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	1a9b      	subs	r3, r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	334d      	adds	r3, #77	@ 0x4d
 8004328:	2202      	movs	r2, #2
 800432a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800432c:	78fa      	ldrb	r2, [r7, #3]
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	1a9b      	subs	r3, r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	331b      	adds	r3, #27
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b01      	cmp	r3, #1
 8004340:	f040 80fa 	bne.w	8004538 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004344:	78fa      	ldrb	r2, [r7, #3]
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	334c      	adds	r3, #76	@ 0x4c
 8004354:	2202      	movs	r2, #2
 8004356:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	4413      	add	r3, r2
 8004360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	78fa      	ldrb	r2, [r7, #3]
 8004368:	0151      	lsls	r1, r2, #5
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	440a      	add	r2, r1
 800436e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004376:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4413      	add	r3, r2
 8004380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	78fa      	ldrb	r2, [r7, #3]
 8004388:	0151      	lsls	r1, r2, #5
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	440a      	add	r2, r1
 800438e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004396:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	78fa      	ldrb	r2, [r7, #3]
 80043a8:	0151      	lsls	r1, r2, #5
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	440a      	add	r2, r1
 80043ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043b2:	f023 0320 	bic.w	r3, r3, #32
 80043b6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	4613      	mov	r3, r2
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	3326      	adds	r3, #38	@ 0x26
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00b      	beq.n	80043e6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043ce:	78fa      	ldrb	r2, [r7, #3]
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	4613      	mov	r3, r2
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	3326      	adds	r3, #38	@ 0x26
 80043de:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	f040 80a9 	bne.w	8004538 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80043fc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004404:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4413      	add	r3, r2
 800440e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004412:	461a      	mov	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	e08e      	b.n	8004538 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800441a:	78fa      	ldrb	r2, [r7, #3]
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	1a9b      	subs	r3, r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	440b      	add	r3, r1
 8004428:	334d      	adds	r3, #77	@ 0x4d
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b04      	cmp	r3, #4
 800442e:	d143      	bne.n	80044b8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004430:	78fa      	ldrb	r2, [r7, #3]
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	4613      	mov	r3, r2
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	334d      	adds	r3, #77	@ 0x4d
 8004440:	2202      	movs	r2, #2
 8004442:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004444:	78fa      	ldrb	r2, [r7, #3]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	334c      	adds	r3, #76	@ 0x4c
 8004454:	2202      	movs	r2, #2
 8004456:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	3326      	adds	r3, #38	@ 0x26
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800446e:	78fa      	ldrb	r2, [r7, #3]
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	3326      	adds	r3, #38	@ 0x26
 800447e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004480:	2b02      	cmp	r3, #2
 8004482:	d159      	bne.n	8004538 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4413      	add	r3, r2
 800448c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800449a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80044a2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044b0:	461a      	mov	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	e03f      	b.n	8004538 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80044b8:	78fa      	ldrb	r2, [r7, #3]
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	4613      	mov	r3, r2
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	1a9b      	subs	r3, r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	334d      	adds	r3, #77	@ 0x4d
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d126      	bne.n	800451c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044ce:	78fa      	ldrb	r2, [r7, #3]
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	4613      	mov	r3, r2
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	1a9b      	subs	r3, r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	334d      	adds	r3, #77	@ 0x4d
 80044de:	2202      	movs	r2, #2
 80044e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80044e2:	78fa      	ldrb	r2, [r7, #3]
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	1a9b      	subs	r3, r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	440b      	add	r3, r1
 80044f0:	3344      	adds	r3, #68	@ 0x44
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	1c59      	adds	r1, r3, #1
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4403      	add	r3, r0
 8004502:	3344      	adds	r3, #68	@ 0x44
 8004504:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	334c      	adds	r3, #76	@ 0x4c
 8004516:	2204      	movs	r2, #4
 8004518:	701a      	strb	r2, [r3, #0]
 800451a:	e00d      	b.n	8004538 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800451c:	78fa      	ldrb	r2, [r7, #3]
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	4613      	mov	r3, r2
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	334d      	adds	r3, #77	@ 0x4d
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b02      	cmp	r3, #2
 8004530:	f000 8100 	beq.w	8004734 <HCD_HC_IN_IRQHandler+0xcca>
 8004534:	e000      	b.n	8004538 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004536:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004538:	78fa      	ldrb	r2, [r7, #3]
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	4613      	mov	r3, r2
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	1a9b      	subs	r3, r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	334c      	adds	r3, #76	@ 0x4c
 8004548:	781a      	ldrb	r2, [r3, #0]
 800454a:	78fb      	ldrb	r3, [r7, #3]
 800454c:	4619      	mov	r1, r3
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f006 ff1e 	bl	800b390 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004554:	e0ef      	b.n	8004736 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	78fa      	ldrb	r2, [r7, #3]
 800455c:	4611      	mov	r1, r2
 800455e:	4618      	mov	r0, r3
 8004560:	f003 fe0d 	bl	800817e <USB_ReadChInterrupts>
 8004564:	4603      	mov	r3, r0
 8004566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456a:	2b40      	cmp	r3, #64	@ 0x40
 800456c:	d12f      	bne.n	80045ce <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800456e:	78fb      	ldrb	r3, [r7, #3]
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	4413      	add	r3, r2
 8004576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800457a:	461a      	mov	r2, r3
 800457c:	2340      	movs	r3, #64	@ 0x40
 800457e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004580:	78fa      	ldrb	r2, [r7, #3]
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	334d      	adds	r3, #77	@ 0x4d
 8004590:	2205      	movs	r2, #5
 8004592:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004594:	78fa      	ldrb	r2, [r7, #3]
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	1a9b      	subs	r3, r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	331a      	adds	r3, #26
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d109      	bne.n	80045be <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80045aa:	78fa      	ldrb	r2, [r7, #3]
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	3344      	adds	r3, #68	@ 0x44
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	78fa      	ldrb	r2, [r7, #3]
 80045c4:	4611      	mov	r1, r2
 80045c6:	4618      	mov	r0, r3
 80045c8:	f004 fb83 	bl	8008cd2 <USB_HC_Halt>
 80045cc:	e0b3      	b.n	8004736 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	78fa      	ldrb	r2, [r7, #3]
 80045d4:	4611      	mov	r1, r2
 80045d6:	4618      	mov	r0, r3
 80045d8:	f003 fdd1 	bl	800817e <USB_ReadChInterrupts>
 80045dc:	4603      	mov	r3, r0
 80045de:	f003 0310 	and.w	r3, r3, #16
 80045e2:	2b10      	cmp	r3, #16
 80045e4:	f040 80a7 	bne.w	8004736 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	3326      	adds	r3, #38	@ 0x26
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d11b      	bne.n	8004636 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80045fe:	78fa      	ldrb	r2, [r7, #3]
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	1a9b      	subs	r3, r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	3344      	adds	r3, #68	@ 0x44
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004612:	78fa      	ldrb	r2, [r7, #3]
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	1a9b      	subs	r3, r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	334d      	adds	r3, #77	@ 0x4d
 8004622:	2204      	movs	r2, #4
 8004624:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	78fa      	ldrb	r2, [r7, #3]
 800462c:	4611      	mov	r1, r2
 800462e:	4618      	mov	r0, r3
 8004630:	f004 fb4f 	bl	8008cd2 <USB_HC_Halt>
 8004634:	e03f      	b.n	80046b6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	3326      	adds	r3, #38	@ 0x26
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800464c:	78fa      	ldrb	r2, [r7, #3]
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	1a9b      	subs	r3, r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	3326      	adds	r3, #38	@ 0x26
 800465c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800465e:	2b02      	cmp	r3, #2
 8004660:	d129      	bne.n	80046b6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004662:	78fa      	ldrb	r2, [r7, #3]
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	3344      	adds	r3, #68	@ 0x44
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	799b      	ldrb	r3, [r3, #6]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HCD_HC_IN_IRQHandler+0xc2a>
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	331b      	adds	r3, #27
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d110      	bne.n	80046b6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	334d      	adds	r3, #77	@ 0x4d
 80046a4:	2204      	movs	r2, #4
 80046a6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	4611      	mov	r1, r2
 80046b0:	4618      	mov	r0, r3
 80046b2:	f004 fb0e 	bl	8008cd2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80046b6:	78fa      	ldrb	r2, [r7, #3]
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	1a9b      	subs	r3, r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	331b      	adds	r3, #27
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d129      	bne.n	8004720 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80046cc:	78fa      	ldrb	r2, [r7, #3]
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	4613      	mov	r3, r2
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	1a9b      	subs	r3, r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	331b      	adds	r3, #27
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	78fa      	ldrb	r2, [r7, #3]
 80046f0:	0151      	lsls	r1, r2, #5
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	440a      	add	r2, r1
 80046f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046fe:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	4413      	add	r3, r2
 8004708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	78fa      	ldrb	r2, [r7, #3]
 8004710:	0151      	lsls	r1, r2, #5
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	440a      	add	r2, r1
 8004716:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800471a:	f043 0320 	orr.w	r3, r3, #32
 800471e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4413      	add	r3, r2
 8004728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800472c:	461a      	mov	r2, r3
 800472e:	2310      	movs	r3, #16
 8004730:	6093      	str	r3, [r2, #8]
 8004732:	e000      	b.n	8004736 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004734:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	4611      	mov	r1, r2
 800475a:	4618      	mov	r0, r3
 800475c:	f003 fd0f 	bl	800817e <USB_ReadChInterrupts>
 8004760:	4603      	mov	r3, r0
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b04      	cmp	r3, #4
 8004768:	d11b      	bne.n	80047a2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800476a:	78fb      	ldrb	r3, [r7, #3]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4413      	add	r3, r2
 8004772:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004776:	461a      	mov	r2, r3
 8004778:	2304      	movs	r3, #4
 800477a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800477c:	78fa      	ldrb	r2, [r7, #3]
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	334d      	adds	r3, #77	@ 0x4d
 800478c:	2207      	movs	r2, #7
 800478e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	78fa      	ldrb	r2, [r7, #3]
 8004796:	4611      	mov	r1, r2
 8004798:	4618      	mov	r0, r3
 800479a:	f004 fa9a 	bl	8008cd2 <USB_HC_Halt>
 800479e:	f000 bc89 	b.w	80050b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	78fa      	ldrb	r2, [r7, #3]
 80047a8:	4611      	mov	r1, r2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f003 fce7 	bl	800817e <USB_ReadChInterrupts>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b20      	cmp	r3, #32
 80047b8:	f040 8082 	bne.w	80048c0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80047bc:	78fb      	ldrb	r3, [r7, #3]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047c8:	461a      	mov	r2, r3
 80047ca:	2320      	movs	r3, #32
 80047cc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	3319      	adds	r3, #25
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d124      	bne.n	800482e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80047e4:	78fa      	ldrb	r2, [r7, #3]
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	4613      	mov	r3, r2
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	3319      	adds	r3, #25
 80047f4:	2200      	movs	r2, #0
 80047f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047f8:	78fa      	ldrb	r2, [r7, #3]
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	334c      	adds	r3, #76	@ 0x4c
 8004808:	2202      	movs	r2, #2
 800480a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	334d      	adds	r3, #77	@ 0x4d
 800481c:	2203      	movs	r2, #3
 800481e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	78fa      	ldrb	r2, [r7, #3]
 8004826:	4611      	mov	r1, r2
 8004828:	4618      	mov	r0, r3
 800482a:	f004 fa52 	bl	8008cd2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800482e:	78fa      	ldrb	r2, [r7, #3]
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	4613      	mov	r3, r2
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	440b      	add	r3, r1
 800483c:	331a      	adds	r3, #26
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b01      	cmp	r3, #1
 8004842:	f040 8437 	bne.w	80050b4 <HCD_HC_OUT_IRQHandler+0x978>
 8004846:	78fa      	ldrb	r2, [r7, #3]
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	1a9b      	subs	r3, r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	331b      	adds	r3, #27
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f040 842b 	bne.w	80050b4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800485e:	78fa      	ldrb	r2, [r7, #3]
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	3326      	adds	r3, #38	@ 0x26
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d009      	beq.n	8004888 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004874:	78fa      	ldrb	r2, [r7, #3]
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	4613      	mov	r3, r2
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	1a9b      	subs	r3, r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	440b      	add	r3, r1
 8004882:	331b      	adds	r3, #27
 8004884:	2201      	movs	r2, #1
 8004886:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004888:	78fa      	ldrb	r2, [r7, #3]
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	1a9b      	subs	r3, r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	334d      	adds	r3, #77	@ 0x4d
 8004898:	2203      	movs	r2, #3
 800489a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	78fa      	ldrb	r2, [r7, #3]
 80048a2:	4611      	mov	r1, r2
 80048a4:	4618      	mov	r0, r3
 80048a6:	f004 fa14 	bl	8008cd2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80048aa:	78fa      	ldrb	r2, [r7, #3]
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	440b      	add	r3, r1
 80048b8:	3344      	adds	r3, #68	@ 0x44
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	e3f9      	b.n	80050b4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	78fa      	ldrb	r2, [r7, #3]
 80048c6:	4611      	mov	r1, r2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f003 fc58 	bl	800817e <USB_ReadChInterrupts>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048d8:	d111      	bne.n	80048fe <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048e6:	461a      	mov	r2, r3
 80048e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80048ec:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	78fa      	ldrb	r2, [r7, #3]
 80048f4:	4611      	mov	r1, r2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f004 f9eb 	bl	8008cd2 <USB_HC_Halt>
 80048fc:	e3da      	b.n	80050b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	78fa      	ldrb	r2, [r7, #3]
 8004904:	4611      	mov	r1, r2
 8004906:	4618      	mov	r0, r3
 8004908:	f003 fc39 	bl	800817e <USB_ReadChInterrupts>
 800490c:	4603      	mov	r3, r0
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b01      	cmp	r3, #1
 8004914:	d168      	bne.n	80049e8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004916:	78fa      	ldrb	r2, [r7, #3]
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	3344      	adds	r3, #68	@ 0x44
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	78fa      	ldrb	r2, [r7, #3]
 8004930:	4611      	mov	r1, r2
 8004932:	4618      	mov	r0, r3
 8004934:	f003 fc23 	bl	800817e <USB_ReadChInterrupts>
 8004938:	4603      	mov	r3, r0
 800493a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800493e:	2b40      	cmp	r3, #64	@ 0x40
 8004940:	d112      	bne.n	8004968 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004942:	78fa      	ldrb	r2, [r7, #3]
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	3319      	adds	r3, #25
 8004952:	2201      	movs	r2, #1
 8004954:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004956:	78fb      	ldrb	r3, [r7, #3]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4413      	add	r3, r2
 800495e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004962:	461a      	mov	r2, r3
 8004964:	2340      	movs	r3, #64	@ 0x40
 8004966:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	1a9b      	subs	r3, r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	331b      	adds	r3, #27
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d019      	beq.n	80049b2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	331b      	adds	r3, #27
 800498e:	2200      	movs	r2, #0
 8004990:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004992:	78fb      	ldrb	r3, [r7, #3]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	4413      	add	r3, r2
 800499a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	78fa      	ldrb	r2, [r7, #3]
 80049a2:	0151      	lsls	r1, r2, #5
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	440a      	add	r2, r1
 80049a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049b0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80049b2:	78fb      	ldrb	r3, [r7, #3]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049be:	461a      	mov	r2, r3
 80049c0:	2301      	movs	r3, #1
 80049c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80049c4:	78fa      	ldrb	r2, [r7, #3]
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4613      	mov	r3, r2
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	334d      	adds	r3, #77	@ 0x4d
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	78fa      	ldrb	r2, [r7, #3]
 80049de:	4611      	mov	r1, r2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f004 f976 	bl	8008cd2 <USB_HC_Halt>
 80049e6:	e365      	b.n	80050b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	78fa      	ldrb	r2, [r7, #3]
 80049ee:	4611      	mov	r1, r2
 80049f0:	4618      	mov	r0, r3
 80049f2:	f003 fbc4 	bl	800817e <USB_ReadChInterrupts>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049fc:	2b40      	cmp	r3, #64	@ 0x40
 80049fe:	d139      	bne.n	8004a74 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004a00:	78fa      	ldrb	r2, [r7, #3]
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	4613      	mov	r3, r2
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	334d      	adds	r3, #77	@ 0x4d
 8004a10:	2205      	movs	r2, #5
 8004a12:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004a14:	78fa      	ldrb	r2, [r7, #3]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	1a9b      	subs	r3, r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	331a      	adds	r3, #26
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d109      	bne.n	8004a3e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004a2a:	78fa      	ldrb	r2, [r7, #3]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	3319      	adds	r3, #25
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004a3e:	78fa      	ldrb	r2, [r7, #3]
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	3344      	adds	r3, #68	@ 0x44
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	78fa      	ldrb	r2, [r7, #3]
 8004a58:	4611      	mov	r1, r2
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f004 f939 	bl	8008cd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	2340      	movs	r3, #64	@ 0x40
 8004a70:	6093      	str	r3, [r2, #8]
 8004a72:	e31f      	b.n	80050b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	78fa      	ldrb	r2, [r7, #3]
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f003 fb7e 	bl	800817e <USB_ReadChInterrupts>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d11a      	bne.n	8004ac2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004a8c:	78fb      	ldrb	r3, [r7, #3]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a98:	461a      	mov	r2, r3
 8004a9a:	2308      	movs	r3, #8
 8004a9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004a9e:	78fa      	ldrb	r2, [r7, #3]
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	334d      	adds	r3, #77	@ 0x4d
 8004aae:	2206      	movs	r2, #6
 8004ab0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	4611      	mov	r1, r2
 8004aba:	4618      	mov	r0, r3
 8004abc:	f004 f909 	bl	8008cd2 <USB_HC_Halt>
 8004ac0:	e2f8      	b.n	80050b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	4611      	mov	r1, r2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f003 fb57 	bl	800817e <USB_ReadChInterrupts>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	2b10      	cmp	r3, #16
 8004ad8:	d144      	bne.n	8004b64 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004ada:	78fa      	ldrb	r2, [r7, #3]
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	1a9b      	subs	r3, r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	3344      	adds	r3, #68	@ 0x44
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004aee:	78fa      	ldrb	r2, [r7, #3]
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	1a9b      	subs	r3, r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	334d      	adds	r3, #77	@ 0x4d
 8004afe:	2204      	movs	r2, #4
 8004b00:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	1a9b      	subs	r3, r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	440b      	add	r3, r1
 8004b10:	3319      	adds	r3, #25
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d114      	bne.n	8004b42 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	1a9b      	subs	r3, r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	3318      	adds	r3, #24
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d109      	bne.n	8004b42 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004b2e:	78fa      	ldrb	r2, [r7, #3]
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	4613      	mov	r3, r2
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	1a9b      	subs	r3, r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	3319      	adds	r3, #25
 8004b3e:	2201      	movs	r2, #1
 8004b40:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	78fa      	ldrb	r2, [r7, #3]
 8004b48:	4611      	mov	r1, r2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f004 f8c1 	bl	8008cd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	2310      	movs	r3, #16
 8004b60:	6093      	str	r3, [r2, #8]
 8004b62:	e2a7      	b.n	80050b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	78fa      	ldrb	r2, [r7, #3]
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f003 fb06 	bl	800817e <USB_ReadChInterrupts>
 8004b72:	4603      	mov	r3, r0
 8004b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b78:	2b80      	cmp	r3, #128	@ 0x80
 8004b7a:	f040 8083 	bne.w	8004c84 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	799b      	ldrb	r3, [r3, #6]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d111      	bne.n	8004baa <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004b86:	78fa      	ldrb	r2, [r7, #3]
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	334d      	adds	r3, #77	@ 0x4d
 8004b96:	2207      	movs	r2, #7
 8004b98:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	78fa      	ldrb	r2, [r7, #3]
 8004ba0:	4611      	mov	r1, r2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f004 f895 	bl	8008cd2 <USB_HC_Halt>
 8004ba8:	e062      	b.n	8004c70 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004baa:	78fa      	ldrb	r2, [r7, #3]
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	1a9b      	subs	r3, r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	440b      	add	r3, r1
 8004bb8:	3344      	adds	r3, #68	@ 0x44
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	1c59      	adds	r1, r3, #1
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	1a9b      	subs	r3, r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4403      	add	r3, r0
 8004bca:	3344      	adds	r3, #68	@ 0x44
 8004bcc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004bce:	78fa      	ldrb	r2, [r7, #3]
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	1a9b      	subs	r3, r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	3344      	adds	r3, #68	@ 0x44
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d922      	bls.n	8004c2a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004be4:	78fa      	ldrb	r2, [r7, #3]
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	4613      	mov	r3, r2
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	1a9b      	subs	r3, r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	3344      	adds	r3, #68	@ 0x44
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004bf8:	78fa      	ldrb	r2, [r7, #3]
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	1a9b      	subs	r3, r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	334c      	adds	r3, #76	@ 0x4c
 8004c08:	2204      	movs	r2, #4
 8004c0a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004c0c:	78fa      	ldrb	r2, [r7, #3]
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	1a9b      	subs	r3, r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	334c      	adds	r3, #76	@ 0x4c
 8004c1c:	781a      	ldrb	r2, [r3, #0]
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	4619      	mov	r1, r3
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f006 fbb4 	bl	800b390 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004c28:	e022      	b.n	8004c70 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c2a:	78fa      	ldrb	r2, [r7, #3]
 8004c2c:	6879      	ldr	r1, [r7, #4]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	440b      	add	r3, r1
 8004c38:	334c      	adds	r3, #76	@ 0x4c
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c54:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c5c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c5e:	78fb      	ldrb	r3, [r7, #3]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2380      	movs	r3, #128	@ 0x80
 8004c80:	6093      	str	r3, [r2, #8]
 8004c82:	e217      	b.n	80050b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	78fa      	ldrb	r2, [r7, #3]
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f003 fa76 	bl	800817e <USB_ReadChInterrupts>
 8004c92:	4603      	mov	r3, r0
 8004c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c9c:	d11b      	bne.n	8004cd6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004c9e:	78fa      	ldrb	r2, [r7, #3]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	334d      	adds	r3, #77	@ 0x4d
 8004cae:	2209      	movs	r2, #9
 8004cb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	78fa      	ldrb	r2, [r7, #3]
 8004cb8:	4611      	mov	r1, r2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f004 f809 	bl	8008cd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cd2:	6093      	str	r3, [r2, #8]
 8004cd4:	e1ee      	b.n	80050b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	78fa      	ldrb	r2, [r7, #3]
 8004cdc:	4611      	mov	r1, r2
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f003 fa4d 	bl	800817e <USB_ReadChInterrupts>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	f040 81df 	bne.w	80050ae <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	2302      	movs	r3, #2
 8004d00:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004d02:	78fa      	ldrb	r2, [r7, #3]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	334d      	adds	r3, #77	@ 0x4d
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	f040 8093 	bne.w	8004e40 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004d1a:	78fa      	ldrb	r2, [r7, #3]
 8004d1c:	6879      	ldr	r1, [r7, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	440b      	add	r3, r1
 8004d28:	334d      	adds	r3, #77	@ 0x4d
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004d2e:	78fa      	ldrb	r2, [r7, #3]
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	4613      	mov	r3, r2
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	1a9b      	subs	r3, r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	334c      	adds	r3, #76	@ 0x4c
 8004d3e:	2201      	movs	r2, #1
 8004d40:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	1a9b      	subs	r3, r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	3326      	adds	r3, #38	@ 0x26
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d00b      	beq.n	8004d70 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004d58:	78fa      	ldrb	r2, [r7, #3]
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	3326      	adds	r3, #38	@ 0x26
 8004d68:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	f040 8190 	bne.w	8005090 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	799b      	ldrb	r3, [r3, #6]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d115      	bne.n	8004da4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004d78:	78fa      	ldrb	r2, [r7, #3]
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	333d      	adds	r3, #61	@ 0x3d
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	78fa      	ldrb	r2, [r7, #3]
 8004d8c:	f083 0301 	eor.w	r3, r3, #1
 8004d90:	b2d8      	uxtb	r0, r3
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	1a9b      	subs	r3, r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	333d      	adds	r3, #61	@ 0x3d
 8004da0:	4602      	mov	r2, r0
 8004da2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	799b      	ldrb	r3, [r3, #6]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	f040 8171 	bne.w	8005090 <HCD_HC_OUT_IRQHandler+0x954>
 8004dae:	78fa      	ldrb	r2, [r7, #3]
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	4613      	mov	r3, r2
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	1a9b      	subs	r3, r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	3334      	adds	r3, #52	@ 0x34
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8165 	beq.w	8005090 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004dc6:	78fa      	ldrb	r2, [r7, #3]
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	1a9b      	subs	r3, r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	440b      	add	r3, r1
 8004dd4:	3334      	adds	r3, #52	@ 0x34
 8004dd6:	6819      	ldr	r1, [r3, #0]
 8004dd8:	78fa      	ldrb	r2, [r7, #3]
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	1a9b      	subs	r3, r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4403      	add	r3, r0
 8004de6:	3328      	adds	r3, #40	@ 0x28
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	440b      	add	r3, r1
 8004dec:	1e59      	subs	r1, r3, #1
 8004dee:	78fa      	ldrb	r2, [r7, #3]
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4403      	add	r3, r0
 8004dfc:	3328      	adds	r3, #40	@ 0x28
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e04:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 813f 	beq.w	8005090 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004e12:	78fa      	ldrb	r2, [r7, #3]
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	011b      	lsls	r3, r3, #4
 8004e1a:	1a9b      	subs	r3, r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	440b      	add	r3, r1
 8004e20:	333d      	adds	r3, #61	@ 0x3d
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	78fa      	ldrb	r2, [r7, #3]
 8004e26:	f083 0301 	eor.w	r3, r3, #1
 8004e2a:	b2d8      	uxtb	r0, r3
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	333d      	adds	r3, #61	@ 0x3d
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	e127      	b.n	8005090 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004e40:	78fa      	ldrb	r2, [r7, #3]
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	4613      	mov	r3, r2
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	1a9b      	subs	r3, r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	334d      	adds	r3, #77	@ 0x4d
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d120      	bne.n	8004e98 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e56:	78fa      	ldrb	r2, [r7, #3]
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	440b      	add	r3, r1
 8004e64:	334d      	adds	r3, #77	@ 0x4d
 8004e66:	2202      	movs	r2, #2
 8004e68:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004e6a:	78fa      	ldrb	r2, [r7, #3]
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	1a9b      	subs	r3, r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	331b      	adds	r3, #27
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	f040 8107 	bne.w	8005090 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e82:	78fa      	ldrb	r2, [r7, #3]
 8004e84:	6879      	ldr	r1, [r7, #4]
 8004e86:	4613      	mov	r3, r2
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	1a9b      	subs	r3, r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	440b      	add	r3, r1
 8004e90:	334c      	adds	r3, #76	@ 0x4c
 8004e92:	2202      	movs	r2, #2
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	e0fb      	b.n	8005090 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004e98:	78fa      	ldrb	r2, [r7, #3]
 8004e9a:	6879      	ldr	r1, [r7, #4]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	1a9b      	subs	r3, r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	334d      	adds	r3, #77	@ 0x4d
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d13a      	bne.n	8004f24 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004eae:	78fa      	ldrb	r2, [r7, #3]
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	1a9b      	subs	r3, r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	334d      	adds	r3, #77	@ 0x4d
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	334c      	adds	r3, #76	@ 0x4c
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004ed6:	78fa      	ldrb	r2, [r7, #3]
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	331b      	adds	r3, #27
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	f040 80d1 	bne.w	8005090 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004eee:	78fa      	ldrb	r2, [r7, #3]
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	1a9b      	subs	r3, r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	440b      	add	r3, r1
 8004efc:	331b      	adds	r3, #27
 8004efe:	2200      	movs	r2, #0
 8004f00:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	78fa      	ldrb	r2, [r7, #3]
 8004f12:	0151      	lsls	r1, r2, #5
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	440a      	add	r2, r1
 8004f18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f20:	6053      	str	r3, [r2, #4]
 8004f22:	e0b5      	b.n	8005090 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004f24:	78fa      	ldrb	r2, [r7, #3]
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	1a9b      	subs	r3, r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	334d      	adds	r3, #77	@ 0x4d
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b05      	cmp	r3, #5
 8004f38:	d114      	bne.n	8004f64 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f3a:	78fa      	ldrb	r2, [r7, #3]
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	011b      	lsls	r3, r3, #4
 8004f42:	1a9b      	subs	r3, r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	334d      	adds	r3, #77	@ 0x4d
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	334c      	adds	r3, #76	@ 0x4c
 8004f5e:	2202      	movs	r2, #2
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	e095      	b.n	8005090 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004f64:	78fa      	ldrb	r2, [r7, #3]
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	1a9b      	subs	r3, r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	440b      	add	r3, r1
 8004f72:	334d      	adds	r3, #77	@ 0x4d
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b06      	cmp	r3, #6
 8004f78:	d114      	bne.n	8004fa4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f7a:	78fa      	ldrb	r2, [r7, #3]
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	1a9b      	subs	r3, r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	334d      	adds	r3, #77	@ 0x4d
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004f8e:	78fa      	ldrb	r2, [r7, #3]
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	1a9b      	subs	r3, r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	334c      	adds	r3, #76	@ 0x4c
 8004f9e:	2205      	movs	r2, #5
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	e075      	b.n	8005090 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004fa4:	78fa      	ldrb	r2, [r7, #3]
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	1a9b      	subs	r3, r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	440b      	add	r3, r1
 8004fb2:	334d      	adds	r3, #77	@ 0x4d
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b07      	cmp	r3, #7
 8004fb8:	d00a      	beq.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004fba:	78fa      	ldrb	r2, [r7, #3]
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	1a9b      	subs	r3, r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	440b      	add	r3, r1
 8004fc8:	334d      	adds	r3, #77	@ 0x4d
 8004fca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004fcc:	2b09      	cmp	r3, #9
 8004fce:	d170      	bne.n	80050b2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004fd0:	78fa      	ldrb	r2, [r7, #3]
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	1a9b      	subs	r3, r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	334d      	adds	r3, #77	@ 0x4d
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004fe4:	78fa      	ldrb	r2, [r7, #3]
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	1a9b      	subs	r3, r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	3344      	adds	r3, #68	@ 0x44
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	1c59      	adds	r1, r3, #1
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	1a9b      	subs	r3, r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4403      	add	r3, r0
 8005004:	3344      	adds	r3, #68	@ 0x44
 8005006:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005008:	78fa      	ldrb	r2, [r7, #3]
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	4613      	mov	r3, r2
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	3344      	adds	r3, #68	@ 0x44
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d914      	bls.n	8005048 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800501e:	78fa      	ldrb	r2, [r7, #3]
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	4613      	mov	r3, r2
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	1a9b      	subs	r3, r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	440b      	add	r3, r1
 800502c:	3344      	adds	r3, #68	@ 0x44
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005032:	78fa      	ldrb	r2, [r7, #3]
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	334c      	adds	r3, #76	@ 0x4c
 8005042:	2204      	movs	r2, #4
 8005044:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005046:	e022      	b.n	800508e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005048:	78fa      	ldrb	r2, [r7, #3]
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	4613      	mov	r3, r2
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	1a9b      	subs	r3, r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	440b      	add	r3, r1
 8005056:	334c      	adds	r3, #76	@ 0x4c
 8005058:	2202      	movs	r2, #2
 800505a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800505c:	78fb      	ldrb	r3, [r7, #3]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4413      	add	r3, r2
 8005064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005072:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800507a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800507c:	78fb      	ldrb	r3, [r7, #3]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4413      	add	r3, r2
 8005084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005088:	461a      	mov	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800508e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005090:	78fa      	ldrb	r2, [r7, #3]
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	4613      	mov	r3, r2
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	1a9b      	subs	r3, r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	440b      	add	r3, r1
 800509e:	334c      	adds	r3, #76	@ 0x4c
 80050a0:	781a      	ldrb	r2, [r3, #0]
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	4619      	mov	r1, r3
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f006 f972 	bl	800b390 <HAL_HCD_HC_NotifyURBChange_Callback>
 80050ac:	e002      	b.n	80050b4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80050ae:	bf00      	nop
 80050b0:	e000      	b.n	80050b4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80050b2:	bf00      	nop
  }
}
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b08a      	sub	sp, #40	@ 0x28
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ca:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	0c5b      	lsrs	r3, r3, #17
 80050e0:	f003 030f 	and.w	r3, r3, #15
 80050e4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	091b      	lsrs	r3, r3, #4
 80050ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050ee:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d004      	beq.n	8005100 <HCD_RXQLVL_IRQHandler+0x46>
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b05      	cmp	r3, #5
 80050fa:	f000 80b6 	beq.w	800526a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80050fe:	e0b7      	b.n	8005270 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 80b3 	beq.w	800526e <HCD_RXQLVL_IRQHandler+0x1b4>
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4613      	mov	r3, r2
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	1a9b      	subs	r3, r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	332c      	adds	r3, #44	@ 0x2c
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 80a7 	beq.w	800526e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	4613      	mov	r3, r2
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	1a9b      	subs	r3, r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	440b      	add	r3, r1
 800512e:	3338      	adds	r3, #56	@ 0x38
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	18d1      	adds	r1, r2, r3
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4613      	mov	r3, r2
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	1a9b      	subs	r3, r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4403      	add	r3, r0
 8005144:	3334      	adds	r3, #52	@ 0x34
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4299      	cmp	r1, r3
 800514a:	f200 8083 	bhi.w	8005254 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4613      	mov	r3, r2
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	1a9b      	subs	r3, r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	332c      	adds	r3, #44	@ 0x2c
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	b292      	uxth	r2, r2
 8005168:	4619      	mov	r1, r3
 800516a:	f002 ff9d 	bl	80080a8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	4613      	mov	r3, r2
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	440b      	add	r3, r1
 800517c:	332c      	adds	r3, #44	@ 0x2c
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	18d1      	adds	r1, r2, r3
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4613      	mov	r3, r2
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	1a9b      	subs	r3, r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4403      	add	r3, r0
 8005192:	332c      	adds	r3, #44	@ 0x2c
 8005194:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4613      	mov	r3, r2
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	440b      	add	r3, r1
 80051a4:	3338      	adds	r3, #56	@ 0x38
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	18d1      	adds	r1, r2, r3
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	4613      	mov	r3, r2
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	1a9b      	subs	r3, r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4403      	add	r3, r0
 80051ba:	3338      	adds	r3, #56	@ 0x38
 80051bc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	0cdb      	lsrs	r3, r3, #19
 80051ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051d2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	4613      	mov	r3, r2
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	1a9b      	subs	r3, r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	3328      	adds	r3, #40	@ 0x28
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d13f      	bne.n	800526e <HCD_RXQLVL_IRQHandler+0x1b4>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d03c      	beq.n	800526e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800520a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005212:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	4413      	add	r3, r2
 800521c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005220:	461a      	mov	r2, r3
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	4613      	mov	r3, r2
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	1a9b      	subs	r3, r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	333c      	adds	r3, #60	@ 0x3c
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	f083 0301 	eor.w	r3, r3, #1
 800523c:	b2d8      	uxtb	r0, r3
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4613      	mov	r3, r2
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	1a9b      	subs	r3, r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	440b      	add	r3, r1
 800524c:	333c      	adds	r3, #60	@ 0x3c
 800524e:	4602      	mov	r2, r0
 8005250:	701a      	strb	r2, [r3, #0]
      break;
 8005252:	e00c      	b.n	800526e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	4613      	mov	r3, r2
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	1a9b      	subs	r3, r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	334c      	adds	r3, #76	@ 0x4c
 8005264:	2204      	movs	r2, #4
 8005266:	701a      	strb	r2, [r3, #0]
      break;
 8005268:	e001      	b.n	800526e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800526a:	bf00      	nop
 800526c:	e000      	b.n	8005270 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800526e:	bf00      	nop
  }
}
 8005270:	bf00      	nop
 8005272:	3728      	adds	r7, #40	@ 0x28
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80052a4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d10b      	bne.n	80052c8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d102      	bne.n	80052c0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f006 f84c 	bl	800b358 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f043 0302 	orr.w	r3, r3, #2
 80052c6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d132      	bne.n	8005338 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f043 0308 	orr.w	r3, r3, #8
 80052d8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d126      	bne.n	8005332 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	7a5b      	ldrb	r3, [r3, #9]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d113      	bne.n	8005314 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80052f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052f6:	d106      	bne.n	8005306 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2102      	movs	r1, #2
 80052fe:	4618      	mov	r0, r3
 8005300:	f003 f868 	bl	80083d4 <USB_InitFSLSPClkSel>
 8005304:	e011      	b.n	800532a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2101      	movs	r1, #1
 800530c:	4618      	mov	r0, r3
 800530e:	f003 f861 	bl	80083d4 <USB_InitFSLSPClkSel>
 8005312:	e00a      	b.n	800532a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	79db      	ldrb	r3, [r3, #7]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d106      	bne.n	800532a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005322:	461a      	mov	r2, r3
 8005324:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005328:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f006 f83e 	bl	800b3ac <HAL_HCD_PortEnabled_Callback>
 8005330:	e002      	b.n	8005338 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f006 f848 	bl	800b3c8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	2b20      	cmp	r3, #32
 8005340:	d103      	bne.n	800534a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	f043 0320 	orr.w	r3, r3, #32
 8005348:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005350:	461a      	mov	r2, r3
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	6013      	str	r3, [r2, #0]
}
 8005356:	bf00      	nop
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e12b      	b.n	80055ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fc fc34 	bl	8001bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2224      	movs	r2, #36	@ 0x24
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0201 	bic.w	r2, r2, #1
 80053a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80053c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053c4:	f002 f900 	bl	80075c8 <HAL_RCC_GetPCLK1Freq>
 80053c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	4a81      	ldr	r2, [pc, #516]	@ (80055d4 <HAL_I2C_Init+0x274>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d807      	bhi.n	80053e4 <HAL_I2C_Init+0x84>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a80      	ldr	r2, [pc, #512]	@ (80055d8 <HAL_I2C_Init+0x278>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	bf94      	ite	ls
 80053dc:	2301      	movls	r3, #1
 80053de:	2300      	movhi	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	e006      	b.n	80053f2 <HAL_I2C_Init+0x92>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4a7d      	ldr	r2, [pc, #500]	@ (80055dc <HAL_I2C_Init+0x27c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	bf94      	ite	ls
 80053ec:	2301      	movls	r3, #1
 80053ee:	2300      	movhi	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e0e7      	b.n	80055ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4a78      	ldr	r2, [pc, #480]	@ (80055e0 <HAL_I2C_Init+0x280>)
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	0c9b      	lsrs	r3, r3, #18
 8005404:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	4a6a      	ldr	r2, [pc, #424]	@ (80055d4 <HAL_I2C_Init+0x274>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d802      	bhi.n	8005434 <HAL_I2C_Init+0xd4>
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	3301      	adds	r3, #1
 8005432:	e009      	b.n	8005448 <HAL_I2C_Init+0xe8>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800543a:	fb02 f303 	mul.w	r3, r2, r3
 800543e:	4a69      	ldr	r2, [pc, #420]	@ (80055e4 <HAL_I2C_Init+0x284>)
 8005440:	fba2 2303 	umull	r2, r3, r2, r3
 8005444:	099b      	lsrs	r3, r3, #6
 8005446:	3301      	adds	r3, #1
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	6812      	ldr	r2, [r2, #0]
 800544c:	430b      	orrs	r3, r1
 800544e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800545a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	495c      	ldr	r1, [pc, #368]	@ (80055d4 <HAL_I2C_Init+0x274>)
 8005464:	428b      	cmp	r3, r1
 8005466:	d819      	bhi.n	800549c <HAL_I2C_Init+0x13c>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	1e59      	subs	r1, r3, #1
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	fbb1 f3f3 	udiv	r3, r1, r3
 8005476:	1c59      	adds	r1, r3, #1
 8005478:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800547c:	400b      	ands	r3, r1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_I2C_Init+0x138>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1e59      	subs	r1, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005490:	3301      	adds	r3, #1
 8005492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005496:	e051      	b.n	800553c <HAL_I2C_Init+0x1dc>
 8005498:	2304      	movs	r3, #4
 800549a:	e04f      	b.n	800553c <HAL_I2C_Init+0x1dc>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d111      	bne.n	80054c8 <HAL_I2C_Init+0x168>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	1e58      	subs	r0, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6859      	ldr	r1, [r3, #4]
 80054ac:	460b      	mov	r3, r1
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	440b      	add	r3, r1
 80054b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80054b6:	3301      	adds	r3, #1
 80054b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054bc:	2b00      	cmp	r3, #0
 80054be:	bf0c      	ite	eq
 80054c0:	2301      	moveq	r3, #1
 80054c2:	2300      	movne	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	e012      	b.n	80054ee <HAL_I2C_Init+0x18e>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	1e58      	subs	r0, r3, #1
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6859      	ldr	r1, [r3, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	0099      	lsls	r1, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	fbb0 f3f3 	udiv	r3, r0, r3
 80054de:	3301      	adds	r3, #1
 80054e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bf0c      	ite	eq
 80054e8:	2301      	moveq	r3, #1
 80054ea:	2300      	movne	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <HAL_I2C_Init+0x196>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e022      	b.n	800553c <HAL_I2C_Init+0x1dc>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10e      	bne.n	800551c <HAL_I2C_Init+0x1bc>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	1e58      	subs	r0, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6859      	ldr	r1, [r3, #4]
 8005506:	460b      	mov	r3, r1
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	440b      	add	r3, r1
 800550c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005510:	3301      	adds	r3, #1
 8005512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800551a:	e00f      	b.n	800553c <HAL_I2C_Init+0x1dc>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	1e58      	subs	r0, r3, #1
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6859      	ldr	r1, [r3, #4]
 8005524:	460b      	mov	r3, r1
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	0099      	lsls	r1, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005532:	3301      	adds	r3, #1
 8005534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005538:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	6809      	ldr	r1, [r1, #0]
 8005540:	4313      	orrs	r3, r2
 8005542:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69da      	ldr	r2, [r3, #28]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800556a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	6911      	ldr	r1, [r2, #16]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	68d2      	ldr	r2, [r2, #12]
 8005576:	4311      	orrs	r1, r2
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	430b      	orrs	r3, r1
 800557e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	695a      	ldr	r2, [r3, #20]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	431a      	orrs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0201 	orr.w	r2, r2, #1
 80055aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	000186a0 	.word	0x000186a0
 80055d8:	001e847f 	.word	0x001e847f
 80055dc:	003d08ff 	.word	0x003d08ff
 80055e0:	431bde83 	.word	0x431bde83
 80055e4:	10624dd3 	.word	0x10624dd3

080055e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	4608      	mov	r0, r1
 80055f2:	4611      	mov	r1, r2
 80055f4:	461a      	mov	r2, r3
 80055f6:	4603      	mov	r3, r0
 80055f8:	817b      	strh	r3, [r7, #10]
 80055fa:	460b      	mov	r3, r1
 80055fc:	813b      	strh	r3, [r7, #8]
 80055fe:	4613      	mov	r3, r2
 8005600:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005602:	f7fd faa5 	bl	8002b50 <HAL_GetTick>
 8005606:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b20      	cmp	r3, #32
 8005612:	f040 80d9 	bne.w	80057c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	2319      	movs	r3, #25
 800561c:	2201      	movs	r2, #1
 800561e:	496d      	ldr	r1, [pc, #436]	@ (80057d4 <HAL_I2C_Mem_Write+0x1ec>)
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 fc8b 	bl	8005f3c <I2C_WaitOnFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800562c:	2302      	movs	r3, #2
 800562e:	e0cc      	b.n	80057ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_I2C_Mem_Write+0x56>
 800563a:	2302      	movs	r3, #2
 800563c:	e0c5      	b.n	80057ca <HAL_I2C_Mem_Write+0x1e2>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b01      	cmp	r3, #1
 8005652:	d007      	beq.n	8005664 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005672:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2221      	movs	r2, #33	@ 0x21
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2240      	movs	r2, #64	@ 0x40
 8005680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a3a      	ldr	r2, [r7, #32]
 800568e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005694:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4a4d      	ldr	r2, [pc, #308]	@ (80057d8 <HAL_I2C_Mem_Write+0x1f0>)
 80056a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056a6:	88f8      	ldrh	r0, [r7, #6]
 80056a8:	893a      	ldrh	r2, [r7, #8]
 80056aa:	8979      	ldrh	r1, [r7, #10]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	9301      	str	r3, [sp, #4]
 80056b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	4603      	mov	r3, r0
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fac2 	bl	8005c40 <I2C_RequestMemoryWrite>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d052      	beq.n	8005768 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e081      	b.n	80057ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 fd50 	bl	8006170 <I2C_WaitOnTXEFlagUntilTimeout>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00d      	beq.n	80056f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d107      	bne.n	80056ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e06b      	b.n	80057ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f6:	781a      	ldrb	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800570c:	3b01      	subs	r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b04      	cmp	r3, #4
 800572e:	d11b      	bne.n	8005768 <HAL_I2C_Mem_Write+0x180>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005734:	2b00      	cmp	r3, #0
 8005736:	d017      	beq.n	8005768 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573c:	781a      	ldrb	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b01      	subs	r3, #1
 8005762:	b29a      	uxth	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1aa      	bne.n	80056c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 fd43 	bl	8006200 <I2C_WaitOnBTFFlagUntilTimeout>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00d      	beq.n	800579c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005784:	2b04      	cmp	r3, #4
 8005786:	d107      	bne.n	8005798 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005796:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e016      	b.n	80057ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	e000      	b.n	80057ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80057c8:	2302      	movs	r3, #2
  }
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	00100002 	.word	0x00100002
 80057d8:	ffff0000 	.word	0xffff0000

080057dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08c      	sub	sp, #48	@ 0x30
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	4608      	mov	r0, r1
 80057e6:	4611      	mov	r1, r2
 80057e8:	461a      	mov	r2, r3
 80057ea:	4603      	mov	r3, r0
 80057ec:	817b      	strh	r3, [r7, #10]
 80057ee:	460b      	mov	r3, r1
 80057f0:	813b      	strh	r3, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057f6:	f7fd f9ab 	bl	8002b50 <HAL_GetTick>
 80057fa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b20      	cmp	r3, #32
 8005806:	f040 8214 	bne.w	8005c32 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800580a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	2319      	movs	r3, #25
 8005810:	2201      	movs	r2, #1
 8005812:	497b      	ldr	r1, [pc, #492]	@ (8005a00 <HAL_I2C_Mem_Read+0x224>)
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 fb91 	bl	8005f3c <I2C_WaitOnFlagUntilTimeout>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005820:	2302      	movs	r3, #2
 8005822:	e207      	b.n	8005c34 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <HAL_I2C_Mem_Read+0x56>
 800582e:	2302      	movs	r3, #2
 8005830:	e200      	b.n	8005c34 <HAL_I2C_Mem_Read+0x458>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b01      	cmp	r3, #1
 8005846:	d007      	beq.n	8005858 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 0201 	orr.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005866:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2222      	movs	r2, #34	@ 0x22
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2240      	movs	r2, #64	@ 0x40
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005882:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005888:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4a5b      	ldr	r2, [pc, #364]	@ (8005a04 <HAL_I2C_Mem_Read+0x228>)
 8005898:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800589a:	88f8      	ldrh	r0, [r7, #6]
 800589c:	893a      	ldrh	r2, [r7, #8]
 800589e:	8979      	ldrh	r1, [r7, #10]
 80058a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a2:	9301      	str	r3, [sp, #4]
 80058a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	4603      	mov	r3, r0
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 fa5e 	bl	8005d6c <I2C_RequestMemoryRead>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e1bc      	b.n	8005c34 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d113      	bne.n	80058ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c2:	2300      	movs	r3, #0
 80058c4:	623b      	str	r3, [r7, #32]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	623b      	str	r3, [r7, #32]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	623b      	str	r3, [r7, #32]
 80058d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	e190      	b.n	8005c0c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d11b      	bne.n	800592a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005900:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005902:	2300      	movs	r3, #0
 8005904:	61fb      	str	r3, [r7, #28]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	61fb      	str	r3, [r7, #28]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	61fb      	str	r3, [r7, #28]
 8005916:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	e170      	b.n	8005c0c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800592e:	2b02      	cmp	r3, #2
 8005930:	d11b      	bne.n	800596a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005940:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005950:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005952:	2300      	movs	r3, #0
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	61bb      	str	r3, [r7, #24]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	61bb      	str	r3, [r7, #24]
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	e150      	b.n	8005c0c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005980:	e144      	b.n	8005c0c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005986:	2b03      	cmp	r3, #3
 8005988:	f200 80f1 	bhi.w	8005b6e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005990:	2b01      	cmp	r3, #1
 8005992:	d123      	bne.n	80059dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005996:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 fc79 	bl	8006290 <I2C_WaitOnRXNEFlagUntilTimeout>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e145      	b.n	8005c34 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691a      	ldr	r2, [r3, #16]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80059da:	e117      	b.n	8005c0c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d14e      	bne.n	8005a82 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ea:	2200      	movs	r2, #0
 80059ec:	4906      	ldr	r1, [pc, #24]	@ (8005a08 <HAL_I2C_Mem_Read+0x22c>)
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 faa4 	bl	8005f3c <I2C_WaitOnFlagUntilTimeout>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d008      	beq.n	8005a0c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e11a      	b.n	8005c34 <HAL_I2C_Mem_Read+0x458>
 80059fe:	bf00      	nop
 8005a00:	00100002 	.word	0x00100002
 8005a04:	ffff0000 	.word	0xffff0000
 8005a08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a80:	e0c4      	b.n	8005c0c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a88:	2200      	movs	r2, #0
 8005a8a:	496c      	ldr	r1, [pc, #432]	@ (8005c3c <HAL_I2C_Mem_Read+0x460>)
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 fa55 	bl	8005f3c <I2C_WaitOnFlagUntilTimeout>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0cb      	b.n	8005c34 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	691a      	ldr	r2, [r3, #16]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	4955      	ldr	r1, [pc, #340]	@ (8005c3c <HAL_I2C_Mem_Read+0x460>)
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 fa27 	bl	8005f3c <I2C_WaitOnFlagUntilTimeout>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e09d      	b.n	8005c34 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691a      	ldr	r2, [r3, #16]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b44:	b2d2      	uxtb	r2, r2
 8005b46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b6c:	e04e      	b.n	8005c0c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b70:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 fb8c 	bl	8006290 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e058      	b.n	8005c34 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	3b01      	subs	r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d124      	bne.n	8005c0c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d107      	bne.n	8005bda <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bd8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	691a      	ldr	r2, [r3, #16]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f47f aeb6 	bne.w	8005982 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e000      	b.n	8005c34 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005c32:	2302      	movs	r3, #2
  }
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3728      	adds	r7, #40	@ 0x28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	00010004 	.word	0x00010004

08005c40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	4608      	mov	r0, r1
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	4603      	mov	r3, r0
 8005c50:	817b      	strh	r3, [r7, #10]
 8005c52:	460b      	mov	r3, r1
 8005c54:	813b      	strh	r3, [r7, #8]
 8005c56:	4613      	mov	r3, r2
 8005c58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 f960 	bl	8005f3c <I2C_WaitOnFlagUntilTimeout>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00d      	beq.n	8005c9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c90:	d103      	bne.n	8005c9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e05f      	b.n	8005d5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c9e:	897b      	ldrh	r3, [r7, #10]
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005cac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	6a3a      	ldr	r2, [r7, #32]
 8005cb2:	492d      	ldr	r1, [pc, #180]	@ (8005d68 <I2C_RequestMemoryWrite+0x128>)
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 f9bb 	bl	8006030 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e04c      	b.n	8005d5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cdc:	6a39      	ldr	r1, [r7, #32]
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 fa46 	bl	8006170 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00d      	beq.n	8005d06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d107      	bne.n	8005d02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e02b      	b.n	8005d5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d06:	88fb      	ldrh	r3, [r7, #6]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d105      	bne.n	8005d18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d0c:	893b      	ldrh	r3, [r7, #8]
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	611a      	str	r2, [r3, #16]
 8005d16:	e021      	b.n	8005d5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d18:	893b      	ldrh	r3, [r7, #8]
 8005d1a:	0a1b      	lsrs	r3, r3, #8
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d28:	6a39      	ldr	r1, [r7, #32]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 fa20 	bl	8006170 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00d      	beq.n	8005d52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d107      	bne.n	8005d4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e005      	b.n	8005d5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d52:	893b      	ldrh	r3, [r7, #8]
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	00010002 	.word	0x00010002

08005d6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	4608      	mov	r0, r1
 8005d76:	4611      	mov	r1, r2
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	817b      	strh	r3, [r7, #10]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	813b      	strh	r3, [r7, #8]
 8005d82:	4613      	mov	r3, r2
 8005d84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005da4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 f8c2 	bl	8005f3c <I2C_WaitOnFlagUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00d      	beq.n	8005dda <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dcc:	d103      	bne.n	8005dd6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e0aa      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dda:	897b      	ldrh	r3, [r7, #10]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005de8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	6a3a      	ldr	r2, [r7, #32]
 8005dee:	4952      	ldr	r1, [pc, #328]	@ (8005f38 <I2C_RequestMemoryRead+0x1cc>)
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f91d 	bl	8006030 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e097      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e00:	2300      	movs	r3, #0
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e18:	6a39      	ldr	r1, [r7, #32]
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 f9a8 	bl	8006170 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00d      	beq.n	8005e42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d107      	bne.n	8005e3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e076      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e42:	88fb      	ldrh	r3, [r7, #6]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d105      	bne.n	8005e54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e48:	893b      	ldrh	r3, [r7, #8]
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	611a      	str	r2, [r3, #16]
 8005e52:	e021      	b.n	8005e98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e54:	893b      	ldrh	r3, [r7, #8]
 8005e56:	0a1b      	lsrs	r3, r3, #8
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e64:	6a39      	ldr	r1, [r7, #32]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 f982 	bl	8006170 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00d      	beq.n	8005e8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d107      	bne.n	8005e8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e050      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e8e:	893b      	ldrh	r3, [r7, #8]
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e9a:	6a39      	ldr	r1, [r7, #32]
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f967 	bl	8006170 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00d      	beq.n	8005ec4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d107      	bne.n	8005ec0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ebe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e035      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ed2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 f82b 	bl	8005f3c <I2C_WaitOnFlagUntilTimeout>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00d      	beq.n	8005f08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005efa:	d103      	bne.n	8005f04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e013      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f08:	897b      	ldrh	r3, [r7, #10]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1a:	6a3a      	ldr	r2, [r7, #32]
 8005f1c:	4906      	ldr	r1, [pc, #24]	@ (8005f38 <I2C_RequestMemoryRead+0x1cc>)
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 f886 	bl	8006030 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e000      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	00010002 	.word	0x00010002

08005f3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f4c:	e048      	b.n	8005fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f54:	d044      	beq.n	8005fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f56:	f7fc fdfb 	bl	8002b50 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d302      	bcc.n	8005f6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d139      	bne.n	8005fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	0c1b      	lsrs	r3, r3, #16
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d10d      	bne.n	8005f92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	43da      	mvns	r2, r3
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	4013      	ands	r3, r2
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	bf0c      	ite	eq
 8005f88:	2301      	moveq	r3, #1
 8005f8a:	2300      	movne	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	e00c      	b.n	8005fac <I2C_WaitOnFlagUntilTimeout+0x70>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	43da      	mvns	r2, r3
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	bf0c      	ite	eq
 8005fa4:	2301      	moveq	r3, #1
 8005fa6:	2300      	movne	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d116      	bne.n	8005fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fcc:	f043 0220 	orr.w	r2, r3, #32
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e023      	b.n	8006028 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	0c1b      	lsrs	r3, r3, #16
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d10d      	bne.n	8006006 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	43da      	mvns	r2, r3
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	bf0c      	ite	eq
 8005ffc:	2301      	moveq	r3, #1
 8005ffe:	2300      	movne	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	461a      	mov	r2, r3
 8006004:	e00c      	b.n	8006020 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	43da      	mvns	r2, r3
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	4013      	ands	r3, r2
 8006012:	b29b      	uxth	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	bf0c      	ite	eq
 8006018:	2301      	moveq	r3, #1
 800601a:	2300      	movne	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	461a      	mov	r2, r3
 8006020:	79fb      	ldrb	r3, [r7, #7]
 8006022:	429a      	cmp	r2, r3
 8006024:	d093      	beq.n	8005f4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800603e:	e071      	b.n	8006124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800604a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800604e:	d123      	bne.n	8006098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800605e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006068:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2220      	movs	r2, #32
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006084:	f043 0204 	orr.w	r2, r3, #4
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e067      	b.n	8006168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609e:	d041      	beq.n	8006124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a0:	f7fc fd56 	bl	8002b50 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d302      	bcc.n	80060b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d136      	bne.n	8006124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	0c1b      	lsrs	r3, r3, #16
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d10c      	bne.n	80060da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	43da      	mvns	r2, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4013      	ands	r3, r2
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	bf14      	ite	ne
 80060d2:	2301      	movne	r3, #1
 80060d4:	2300      	moveq	r3, #0
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	e00b      	b.n	80060f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	43da      	mvns	r2, r3
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	4013      	ands	r3, r2
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	bf14      	ite	ne
 80060ec:	2301      	movne	r3, #1
 80060ee:	2300      	moveq	r3, #0
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d016      	beq.n	8006124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2220      	movs	r2, #32
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006110:	f043 0220 	orr.w	r2, r3, #32
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e021      	b.n	8006168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	0c1b      	lsrs	r3, r3, #16
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b01      	cmp	r3, #1
 800612c:	d10c      	bne.n	8006148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	43da      	mvns	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	4013      	ands	r3, r2
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	bf14      	ite	ne
 8006140:	2301      	movne	r3, #1
 8006142:	2300      	moveq	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	e00b      	b.n	8006160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	43da      	mvns	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	4013      	ands	r3, r2
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	bf14      	ite	ne
 800615a:	2301      	movne	r3, #1
 800615c:	2300      	moveq	r3, #0
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	f47f af6d 	bne.w	8006040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800617c:	e034      	b.n	80061e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 f8e3 	bl	800634a <I2C_IsAcknowledgeFailed>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e034      	b.n	80061f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006194:	d028      	beq.n	80061e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006196:	f7fc fcdb 	bl	8002b50 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d302      	bcc.n	80061ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d11d      	bne.n	80061e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061b6:	2b80      	cmp	r3, #128	@ 0x80
 80061b8:	d016      	beq.n	80061e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d4:	f043 0220 	orr.w	r2, r3, #32
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e007      	b.n	80061f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f2:	2b80      	cmp	r3, #128	@ 0x80
 80061f4:	d1c3      	bne.n	800617e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800620c:	e034      	b.n	8006278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 f89b 	bl	800634a <I2C_IsAcknowledgeFailed>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e034      	b.n	8006288 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006224:	d028      	beq.n	8006278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006226:	f7fc fc93 	bl	8002b50 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	429a      	cmp	r2, r3
 8006234:	d302      	bcc.n	800623c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d11d      	bne.n	8006278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b04      	cmp	r3, #4
 8006248:	d016      	beq.n	8006278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006264:	f043 0220 	orr.w	r2, r3, #32
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e007      	b.n	8006288 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b04      	cmp	r3, #4
 8006284:	d1c3      	bne.n	800620e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800629c:	e049      	b.n	8006332 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b10      	cmp	r3, #16
 80062aa:	d119      	bne.n	80062e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f06f 0210 	mvn.w	r2, #16
 80062b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2220      	movs	r2, #32
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e030      	b.n	8006342 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e0:	f7fc fc36 	bl	8002b50 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d302      	bcc.n	80062f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d11d      	bne.n	8006332 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006300:	2b40      	cmp	r3, #64	@ 0x40
 8006302:	d016      	beq.n	8006332 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2220      	movs	r2, #32
 800630e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631e:	f043 0220 	orr.w	r2, r3, #32
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e007      	b.n	8006342 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800633c:	2b40      	cmp	r3, #64	@ 0x40
 800633e:	d1ae      	bne.n	800629e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800635c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006360:	d11b      	bne.n	800639a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800636a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2220      	movs	r2, #32
 8006376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006386:	f043 0204 	orr.w	r2, r3, #4
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e000      	b.n	800639c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e128      	b.n	800660c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d109      	bne.n	80063da <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a90      	ldr	r2, [pc, #576]	@ (8006614 <HAL_I2S_Init+0x26c>)
 80063d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7fb fc85 	bl	8001ce4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2202      	movs	r2, #2
 80063de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	6812      	ldr	r2, [r2, #0]
 80063ec:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80063f0:	f023 030f 	bic.w	r3, r3, #15
 80063f4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2202      	movs	r2, #2
 80063fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	2b02      	cmp	r3, #2
 8006404:	d060      	beq.n	80064c8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d102      	bne.n	8006414 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800640e:	2310      	movs	r3, #16
 8006410:	617b      	str	r3, [r7, #20]
 8006412:	e001      	b.n	8006418 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006414:	2320      	movs	r3, #32
 8006416:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2b20      	cmp	r3, #32
 800641e:	d802      	bhi.n	8006426 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006426:	2001      	movs	r0, #1
 8006428:	f001 f9c4 	bl	80077b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800642c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006436:	d125      	bne.n	8006484 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d010      	beq.n	8006462 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	fbb2 f2f3 	udiv	r2, r2, r3
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	461a      	mov	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	fbb2 f3f3 	udiv	r3, r2, r3
 800645c:	3305      	adds	r3, #5
 800645e:	613b      	str	r3, [r7, #16]
 8006460:	e01f      	b.n	80064a2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	fbb2 f2f3 	udiv	r2, r2, r3
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	461a      	mov	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	fbb2 f3f3 	udiv	r3, r2, r3
 800647e:	3305      	adds	r3, #5
 8006480:	613b      	str	r3, [r7, #16]
 8006482:	e00e      	b.n	80064a2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	fbb2 f2f3 	udiv	r2, r2, r3
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	461a      	mov	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	fbb2 f3f3 	udiv	r3, r2, r3
 800649e:	3305      	adds	r3, #5
 80064a0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	4a5c      	ldr	r2, [pc, #368]	@ (8006618 <HAL_I2S_Init+0x270>)
 80064a6:	fba2 2303 	umull	r2, r3, r2, r3
 80064aa:	08db      	lsrs	r3, r3, #3
 80064ac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	085b      	lsrs	r3, r3, #1
 80064be:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	021b      	lsls	r3, r3, #8
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	e003      	b.n	80064d0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80064c8:	2302      	movs	r3, #2
 80064ca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d902      	bls.n	80064dc <HAL_I2S_Init+0x134>
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	2bff      	cmp	r3, #255	@ 0xff
 80064da:	d907      	bls.n	80064ec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064e0:	f043 0210 	orr.w	r2, r3, #16
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e08f      	b.n	800660c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	ea42 0103 	orr.w	r1, r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800650a:	f023 030f 	bic.w	r3, r3, #15
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	6851      	ldr	r1, [r2, #4]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	6892      	ldr	r2, [r2, #8]
 8006516:	4311      	orrs	r1, r2
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	68d2      	ldr	r2, [r2, #12]
 800651c:	4311      	orrs	r1, r2
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	6992      	ldr	r2, [r2, #24]
 8006522:	430a      	orrs	r2, r1
 8006524:	431a      	orrs	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800652e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d161      	bne.n	80065fc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a38      	ldr	r2, [pc, #224]	@ (800661c <HAL_I2S_Init+0x274>)
 800653c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a37      	ldr	r2, [pc, #220]	@ (8006620 <HAL_I2S_Init+0x278>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d101      	bne.n	800654c <HAL_I2S_Init+0x1a4>
 8006548:	4b36      	ldr	r3, [pc, #216]	@ (8006624 <HAL_I2S_Init+0x27c>)
 800654a:	e001      	b.n	8006550 <HAL_I2S_Init+0x1a8>
 800654c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6812      	ldr	r2, [r2, #0]
 8006556:	4932      	ldr	r1, [pc, #200]	@ (8006620 <HAL_I2S_Init+0x278>)
 8006558:	428a      	cmp	r2, r1
 800655a:	d101      	bne.n	8006560 <HAL_I2S_Init+0x1b8>
 800655c:	4a31      	ldr	r2, [pc, #196]	@ (8006624 <HAL_I2S_Init+0x27c>)
 800655e:	e001      	b.n	8006564 <HAL_I2S_Init+0x1bc>
 8006560:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006564:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006568:	f023 030f 	bic.w	r3, r3, #15
 800656c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a2b      	ldr	r2, [pc, #172]	@ (8006620 <HAL_I2S_Init+0x278>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d101      	bne.n	800657c <HAL_I2S_Init+0x1d4>
 8006578:	4b2a      	ldr	r3, [pc, #168]	@ (8006624 <HAL_I2S_Init+0x27c>)
 800657a:	e001      	b.n	8006580 <HAL_I2S_Init+0x1d8>
 800657c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006580:	2202      	movs	r2, #2
 8006582:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a25      	ldr	r2, [pc, #148]	@ (8006620 <HAL_I2S_Init+0x278>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d101      	bne.n	8006592 <HAL_I2S_Init+0x1ea>
 800658e:	4b25      	ldr	r3, [pc, #148]	@ (8006624 <HAL_I2S_Init+0x27c>)
 8006590:	e001      	b.n	8006596 <HAL_I2S_Init+0x1ee>
 8006592:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065a2:	d003      	beq.n	80065ac <HAL_I2S_Init+0x204>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d103      	bne.n	80065b4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80065ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80065b0:	613b      	str	r3, [r7, #16]
 80065b2:	e001      	b.n	80065b8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80065b4:	2300      	movs	r3, #0
 80065b6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80065c2:	4313      	orrs	r3, r2
 80065c4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80065cc:	4313      	orrs	r3, r2
 80065ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80065d6:	4313      	orrs	r3, r2
 80065d8:	b29a      	uxth	r2, r3
 80065da:	897b      	ldrh	r3, [r7, #10]
 80065dc:	4313      	orrs	r3, r2
 80065de:	b29b      	uxth	r3, r3
 80065e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80065e4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a0d      	ldr	r2, [pc, #52]	@ (8006620 <HAL_I2S_Init+0x278>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d101      	bne.n	80065f4 <HAL_I2S_Init+0x24c>
 80065f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006624 <HAL_I2S_Init+0x27c>)
 80065f2:	e001      	b.n	80065f8 <HAL_I2S_Init+0x250>
 80065f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065f8:	897a      	ldrh	r2, [r7, #10]
 80065fa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3720      	adds	r7, #32
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	0800671f 	.word	0x0800671f
 8006618:	cccccccd 	.word	0xcccccccd
 800661c:	08006835 	.word	0x08006835
 8006620:	40003800 	.word	0x40003800
 8006624:	40003400 	.word	0x40003400

08006628 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006670:	881a      	ldrh	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667c:	1c9a      	adds	r2, r3, #2
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006686:	b29b      	uxth	r3, r3
 8006688:	3b01      	subs	r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006694:	b29b      	uxth	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10e      	bne.n	80066b8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80066a8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff ffb8 	bl	8006628 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80066b8:	bf00      	nop
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68da      	ldr	r2, [r3, #12]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d2:	b292      	uxth	r2, r2
 80066d4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066da:	1c9a      	adds	r2, r3, #2
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	3b01      	subs	r3, #1
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10e      	bne.n	8006716 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006706:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7ff ff93 	bl	800663c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006716:	bf00      	nop
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b086      	sub	sp, #24
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b04      	cmp	r3, #4
 8006738:	d13a      	bne.n	80067b0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b01      	cmp	r3, #1
 8006742:	d109      	bne.n	8006758 <I2S_IRQHandler+0x3a>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800674e:	2b40      	cmp	r3, #64	@ 0x40
 8006750:	d102      	bne.n	8006758 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff ffb4 	bl	80066c0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800675e:	2b40      	cmp	r3, #64	@ 0x40
 8006760:	d126      	bne.n	80067b0 <I2S_IRQHandler+0x92>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b20      	cmp	r3, #32
 800676e:	d11f      	bne.n	80067b0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800677e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006780:	2300      	movs	r3, #0
 8006782:	613b      	str	r3, [r7, #16]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	613b      	str	r3, [r7, #16]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	613b      	str	r3, [r7, #16]
 8006794:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a2:	f043 0202 	orr.w	r2, r3, #2
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7ff ff50 	bl	8006650 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	d136      	bne.n	800682a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d109      	bne.n	80067da <I2S_IRQHandler+0xbc>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067d0:	2b80      	cmp	r3, #128	@ 0x80
 80067d2:	d102      	bne.n	80067da <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff ff45 	bl	8006664 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f003 0308 	and.w	r3, r3, #8
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d122      	bne.n	800682a <I2S_IRQHandler+0x10c>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b20      	cmp	r3, #32
 80067f0:	d11b      	bne.n	800682a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006800:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006802:	2300      	movs	r3, #0
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800681c:	f043 0204 	orr.w	r2, r3, #4
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7ff ff13 	bl	8006650 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800682a:	bf00      	nop
 800682c:	3718      	adds	r7, #24
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
	...

08006834 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b088      	sub	sp, #32
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a92      	ldr	r2, [pc, #584]	@ (8006a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d101      	bne.n	8006852 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800684e:	4b92      	ldr	r3, [pc, #584]	@ (8006a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006850:	e001      	b.n	8006856 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006852:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a8b      	ldr	r2, [pc, #556]	@ (8006a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d101      	bne.n	8006870 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800686c:	4b8a      	ldr	r3, [pc, #552]	@ (8006a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800686e:	e001      	b.n	8006874 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006870:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006880:	d004      	beq.n	800688c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	f040 8099 	bne.w	80069be <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b02      	cmp	r3, #2
 8006894:	d107      	bne.n	80068a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800689c:	2b00      	cmp	r3, #0
 800689e:	d002      	beq.n	80068a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f925 	bl	8006af0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d107      	bne.n	80068c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f9c8 	bl	8006c50 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c6:	2b40      	cmp	r3, #64	@ 0x40
 80068c8:	d13a      	bne.n	8006940 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f003 0320 	and.w	r3, r3, #32
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d035      	beq.n	8006940 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a6e      	ldr	r2, [pc, #440]	@ (8006a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d101      	bne.n	80068e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80068de:	4b6e      	ldr	r3, [pc, #440]	@ (8006a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068e0:	e001      	b.n	80068e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80068e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4969      	ldr	r1, [pc, #420]	@ (8006a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068ee:	428b      	cmp	r3, r1
 80068f0:	d101      	bne.n	80068f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80068f2:	4b69      	ldr	r3, [pc, #420]	@ (8006a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068f4:	e001      	b.n	80068fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80068f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068fa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80068fe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800690e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006910:	2300      	movs	r3, #0
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006932:	f043 0202 	orr.w	r2, r3, #2
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7ff fe88 	bl	8006650 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b08      	cmp	r3, #8
 8006948:	f040 80c3 	bne.w	8006ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f003 0320 	and.w	r3, r3, #32
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 80bd 	beq.w	8006ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006966:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a49      	ldr	r2, [pc, #292]	@ (8006a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d101      	bne.n	8006976 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006972:	4b49      	ldr	r3, [pc, #292]	@ (8006a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006974:	e001      	b.n	800697a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006976:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4944      	ldr	r1, [pc, #272]	@ (8006a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006982:	428b      	cmp	r3, r1
 8006984:	d101      	bne.n	800698a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006986:	4b44      	ldr	r3, [pc, #272]	@ (8006a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006988:	e001      	b.n	800698e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800698a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800698e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006992:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006994:	2300      	movs	r3, #0
 8006996:	60bb      	str	r3, [r7, #8]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	60bb      	str	r3, [r7, #8]
 80069a0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ae:	f043 0204 	orr.w	r2, r3, #4
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff fe4a 	bl	8006650 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069bc:	e089      	b.n	8006ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d107      	bne.n	80069d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f8be 	bl	8006b54 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d107      	bne.n	80069f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d002      	beq.n	80069f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f8fd 	bl	8006bec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f8:	2b40      	cmp	r3, #64	@ 0x40
 80069fa:	d12f      	bne.n	8006a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f003 0320 	and.w	r3, r3, #32
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d02a      	beq.n	8006a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006a14:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8006a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d101      	bne.n	8006a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006a20:	4b1d      	ldr	r3, [pc, #116]	@ (8006a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006a22:	e001      	b.n	8006a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006a24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4919      	ldr	r1, [pc, #100]	@ (8006a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006a30:	428b      	cmp	r3, r1
 8006a32:	d101      	bne.n	8006a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006a34:	4b18      	ldr	r3, [pc, #96]	@ (8006a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006a36:	e001      	b.n	8006a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006a38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a3c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006a40:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a4e:	f043 0202 	orr.w	r2, r3, #2
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7ff fdfa 	bl	8006650 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	f003 0308 	and.w	r3, r3, #8
 8006a62:	2b08      	cmp	r3, #8
 8006a64:	d136      	bne.n	8006ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f003 0320 	and.w	r3, r3, #32
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d031      	beq.n	8006ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a07      	ldr	r2, [pc, #28]	@ (8006a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d101      	bne.n	8006a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006a7a:	4b07      	ldr	r3, [pc, #28]	@ (8006a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006a7c:	e001      	b.n	8006a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006a7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4902      	ldr	r1, [pc, #8]	@ (8006a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006a8a:	428b      	cmp	r3, r1
 8006a8c:	d106      	bne.n	8006a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006a8e:	4b02      	ldr	r3, [pc, #8]	@ (8006a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006a90:	e006      	b.n	8006aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006a92:	bf00      	nop
 8006a94:	40003800 	.word	0x40003800
 8006a98:	40003400 	.word	0x40003400
 8006a9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006aa0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006aa4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006ab4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ac2:	f043 0204 	orr.w	r2, r3, #4
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff fdc0 	bl	8006650 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006ad0:	e000      	b.n	8006ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006ad2:	bf00      	nop
}
 8006ad4:	bf00      	nop
 8006ad6:	3720      	adds	r7, #32
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afc:	1c99      	adds	r1, r3, #2
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6251      	str	r1, [r2, #36]	@ 0x24
 8006b02:	881a      	ldrh	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	3b01      	subs	r3, #1
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d113      	bne.n	8006b4a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006b30:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d106      	bne.n	8006b4a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f7ff ffc9 	bl	8006adc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b4a:	bf00      	nop
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
	...

08006b54 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b60:	1c99      	adds	r1, r3, #2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	6251      	str	r1, [r2, #36]	@ 0x24
 8006b66:	8819      	ldrh	r1, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8006be4 <I2SEx_TxISR_I2SExt+0x90>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d101      	bne.n	8006b76 <I2SEx_TxISR_I2SExt+0x22>
 8006b72:	4b1d      	ldr	r3, [pc, #116]	@ (8006be8 <I2SEx_TxISR_I2SExt+0x94>)
 8006b74:	e001      	b.n	8006b7a <I2SEx_TxISR_I2SExt+0x26>
 8006b76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b7a:	460a      	mov	r2, r1
 8006b7c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d121      	bne.n	8006bda <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a12      	ldr	r2, [pc, #72]	@ (8006be4 <I2SEx_TxISR_I2SExt+0x90>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d101      	bne.n	8006ba4 <I2SEx_TxISR_I2SExt+0x50>
 8006ba0:	4b11      	ldr	r3, [pc, #68]	@ (8006be8 <I2SEx_TxISR_I2SExt+0x94>)
 8006ba2:	e001      	b.n	8006ba8 <I2SEx_TxISR_I2SExt+0x54>
 8006ba4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	490d      	ldr	r1, [pc, #52]	@ (8006be4 <I2SEx_TxISR_I2SExt+0x90>)
 8006bb0:	428b      	cmp	r3, r1
 8006bb2:	d101      	bne.n	8006bb8 <I2SEx_TxISR_I2SExt+0x64>
 8006bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006be8 <I2SEx_TxISR_I2SExt+0x94>)
 8006bb6:	e001      	b.n	8006bbc <I2SEx_TxISR_I2SExt+0x68>
 8006bb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bbc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006bc0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d106      	bne.n	8006bda <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff ff81 	bl	8006adc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bda:	bf00      	nop
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	40003800 	.word	0x40003800
 8006be8:	40003400 	.word	0x40003400

08006bec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68d8      	ldr	r0, [r3, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfe:	1c99      	adds	r1, r3, #2
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006c04:	b282      	uxth	r2, r0
 8006c06:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d113      	bne.n	8006c48 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006c2e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff ff4a 	bl	8006adc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c48:	bf00      	nop
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a20      	ldr	r2, [pc, #128]	@ (8006ce0 <I2SEx_RxISR_I2SExt+0x90>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d101      	bne.n	8006c66 <I2SEx_RxISR_I2SExt+0x16>
 8006c62:	4b20      	ldr	r3, [pc, #128]	@ (8006ce4 <I2SEx_RxISR_I2SExt+0x94>)
 8006c64:	e001      	b.n	8006c6a <I2SEx_RxISR_I2SExt+0x1a>
 8006c66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c6a:	68d8      	ldr	r0, [r3, #12]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c70:	1c99      	adds	r1, r3, #2
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006c76:	b282      	uxth	r2, r0
 8006c78:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	3b01      	subs	r3, #1
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d121      	bne.n	8006cd6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a12      	ldr	r2, [pc, #72]	@ (8006ce0 <I2SEx_RxISR_I2SExt+0x90>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d101      	bne.n	8006ca0 <I2SEx_RxISR_I2SExt+0x50>
 8006c9c:	4b11      	ldr	r3, [pc, #68]	@ (8006ce4 <I2SEx_RxISR_I2SExt+0x94>)
 8006c9e:	e001      	b.n	8006ca4 <I2SEx_RxISR_I2SExt+0x54>
 8006ca0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	490d      	ldr	r1, [pc, #52]	@ (8006ce0 <I2SEx_RxISR_I2SExt+0x90>)
 8006cac:	428b      	cmp	r3, r1
 8006cae:	d101      	bne.n	8006cb4 <I2SEx_RxISR_I2SExt+0x64>
 8006cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce4 <I2SEx_RxISR_I2SExt+0x94>)
 8006cb2:	e001      	b.n	8006cb8 <I2SEx_RxISR_I2SExt+0x68>
 8006cb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006cb8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006cbc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d106      	bne.n	8006cd6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff ff03 	bl	8006adc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006cd6:	bf00      	nop
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	40003800 	.word	0x40003800
 8006ce4:	40003400 	.word	0x40003400

08006ce8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e267      	b.n	80071ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d075      	beq.n	8006df2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006d06:	4b88      	ldr	r3, [pc, #544]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 030c 	and.w	r3, r3, #12
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d00c      	beq.n	8006d2c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d12:	4b85      	ldr	r3, [pc, #532]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006d1a:	2b08      	cmp	r3, #8
 8006d1c:	d112      	bne.n	8006d44 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d1e:	4b82      	ldr	r3, [pc, #520]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d2a:	d10b      	bne.n	8006d44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d2c:	4b7e      	ldr	r3, [pc, #504]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d05b      	beq.n	8006df0 <HAL_RCC_OscConfig+0x108>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d157      	bne.n	8006df0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e242      	b.n	80071ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d4c:	d106      	bne.n	8006d5c <HAL_RCC_OscConfig+0x74>
 8006d4e:	4b76      	ldr	r3, [pc, #472]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a75      	ldr	r2, [pc, #468]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	e01d      	b.n	8006d98 <HAL_RCC_OscConfig+0xb0>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d64:	d10c      	bne.n	8006d80 <HAL_RCC_OscConfig+0x98>
 8006d66:	4b70      	ldr	r3, [pc, #448]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a6f      	ldr	r2, [pc, #444]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	4b6d      	ldr	r3, [pc, #436]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a6c      	ldr	r2, [pc, #432]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d7c:	6013      	str	r3, [r2, #0]
 8006d7e:	e00b      	b.n	8006d98 <HAL_RCC_OscConfig+0xb0>
 8006d80:	4b69      	ldr	r3, [pc, #420]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a68      	ldr	r2, [pc, #416]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d8a:	6013      	str	r3, [r2, #0]
 8006d8c:	4b66      	ldr	r3, [pc, #408]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a65      	ldr	r2, [pc, #404]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d013      	beq.n	8006dc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da0:	f7fb fed6 	bl	8002b50 <HAL_GetTick>
 8006da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006da6:	e008      	b.n	8006dba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006da8:	f7fb fed2 	bl	8002b50 <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	2b64      	cmp	r3, #100	@ 0x64
 8006db4:	d901      	bls.n	8006dba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e207      	b.n	80071ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dba:	4b5b      	ldr	r3, [pc, #364]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0f0      	beq.n	8006da8 <HAL_RCC_OscConfig+0xc0>
 8006dc6:	e014      	b.n	8006df2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc8:	f7fb fec2 	bl	8002b50 <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dd0:	f7fb febe 	bl	8002b50 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b64      	cmp	r3, #100	@ 0x64
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e1f3      	b.n	80071ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006de2:	4b51      	ldr	r3, [pc, #324]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1f0      	bne.n	8006dd0 <HAL_RCC_OscConfig+0xe8>
 8006dee:	e000      	b.n	8006df2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d063      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f003 030c 	and.w	r3, r3, #12
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00b      	beq.n	8006e22 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e0a:	4b47      	ldr	r3, [pc, #284]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006e12:	2b08      	cmp	r3, #8
 8006e14:	d11c      	bne.n	8006e50 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e16:	4b44      	ldr	r3, [pc, #272]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d116      	bne.n	8006e50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e22:	4b41      	ldr	r3, [pc, #260]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0302 	and.w	r3, r3, #2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d005      	beq.n	8006e3a <HAL_RCC_OscConfig+0x152>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d001      	beq.n	8006e3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e1c7      	b.n	80071ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	4937      	ldr	r1, [pc, #220]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e4e:	e03a      	b.n	8006ec6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d020      	beq.n	8006e9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e58:	4b34      	ldr	r3, [pc, #208]	@ (8006f2c <HAL_RCC_OscConfig+0x244>)
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5e:	f7fb fe77 	bl	8002b50 <HAL_GetTick>
 8006e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e64:	e008      	b.n	8006e78 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e66:	f7fb fe73 	bl	8002b50 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e1a8      	b.n	80071ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e78:	4b2b      	ldr	r3, [pc, #172]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d0f0      	beq.n	8006e66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e84:	4b28      	ldr	r3, [pc, #160]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	00db      	lsls	r3, r3, #3
 8006e92:	4925      	ldr	r1, [pc, #148]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	600b      	str	r3, [r1, #0]
 8006e98:	e015      	b.n	8006ec6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e9a:	4b24      	ldr	r3, [pc, #144]	@ (8006f2c <HAL_RCC_OscConfig+0x244>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea0:	f7fb fe56 	bl	8002b50 <HAL_GetTick>
 8006ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ea6:	e008      	b.n	8006eba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ea8:	f7fb fe52 	bl	8002b50 <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d901      	bls.n	8006eba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e187      	b.n	80071ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eba:	4b1b      	ldr	r3, [pc, #108]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1f0      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0308 	and.w	r3, r3, #8
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d036      	beq.n	8006f40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d016      	beq.n	8006f08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eda:	4b15      	ldr	r3, [pc, #84]	@ (8006f30 <HAL_RCC_OscConfig+0x248>)
 8006edc:	2201      	movs	r2, #1
 8006ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ee0:	f7fb fe36 	bl	8002b50 <HAL_GetTick>
 8006ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ee6:	e008      	b.n	8006efa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ee8:	f7fb fe32 	bl	8002b50 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e167      	b.n	80071ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006efa:	4b0b      	ldr	r3, [pc, #44]	@ (8006f28 <HAL_RCC_OscConfig+0x240>)
 8006efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d0f0      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x200>
 8006f06:	e01b      	b.n	8006f40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f08:	4b09      	ldr	r3, [pc, #36]	@ (8006f30 <HAL_RCC_OscConfig+0x248>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f0e:	f7fb fe1f 	bl	8002b50 <HAL_GetTick>
 8006f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f14:	e00e      	b.n	8006f34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f16:	f7fb fe1b 	bl	8002b50 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d907      	bls.n	8006f34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e150      	b.n	80071ca <HAL_RCC_OscConfig+0x4e2>
 8006f28:	40023800 	.word	0x40023800
 8006f2c:	42470000 	.word	0x42470000
 8006f30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f34:	4b88      	ldr	r3, [pc, #544]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8006f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f38:	f003 0302 	and.w	r3, r3, #2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1ea      	bne.n	8006f16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 8097 	beq.w	800707c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f52:	4b81      	ldr	r3, [pc, #516]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8006f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10f      	bne.n	8006f7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60bb      	str	r3, [r7, #8]
 8006f62:	4b7d      	ldr	r3, [pc, #500]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8006f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f66:	4a7c      	ldr	r2, [pc, #496]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8006f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f6e:	4b7a      	ldr	r3, [pc, #488]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8006f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f76:	60bb      	str	r3, [r7, #8]
 8006f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f7e:	4b77      	ldr	r3, [pc, #476]	@ (800715c <HAL_RCC_OscConfig+0x474>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d118      	bne.n	8006fbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f8a:	4b74      	ldr	r3, [pc, #464]	@ (800715c <HAL_RCC_OscConfig+0x474>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a73      	ldr	r2, [pc, #460]	@ (800715c <HAL_RCC_OscConfig+0x474>)
 8006f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f96:	f7fb fddb 	bl	8002b50 <HAL_GetTick>
 8006f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f9c:	e008      	b.n	8006fb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f9e:	f7fb fdd7 	bl	8002b50 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d901      	bls.n	8006fb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e10c      	b.n	80071ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fb0:	4b6a      	ldr	r3, [pc, #424]	@ (800715c <HAL_RCC_OscConfig+0x474>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d0f0      	beq.n	8006f9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d106      	bne.n	8006fd2 <HAL_RCC_OscConfig+0x2ea>
 8006fc4:	4b64      	ldr	r3, [pc, #400]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8006fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc8:	4a63      	ldr	r2, [pc, #396]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8006fca:	f043 0301 	orr.w	r3, r3, #1
 8006fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fd0:	e01c      	b.n	800700c <HAL_RCC_OscConfig+0x324>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	2b05      	cmp	r3, #5
 8006fd8:	d10c      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x30c>
 8006fda:	4b5f      	ldr	r3, [pc, #380]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8006fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fde:	4a5e      	ldr	r2, [pc, #376]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8006fe0:	f043 0304 	orr.w	r3, r3, #4
 8006fe4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fe6:	4b5c      	ldr	r3, [pc, #368]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8006fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fea:	4a5b      	ldr	r2, [pc, #364]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8006fec:	f043 0301 	orr.w	r3, r3, #1
 8006ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ff2:	e00b      	b.n	800700c <HAL_RCC_OscConfig+0x324>
 8006ff4:	4b58      	ldr	r3, [pc, #352]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8006ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ff8:	4a57      	ldr	r2, [pc, #348]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8006ffa:	f023 0301 	bic.w	r3, r3, #1
 8006ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8007000:	4b55      	ldr	r3, [pc, #340]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8007002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007004:	4a54      	ldr	r2, [pc, #336]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8007006:	f023 0304 	bic.w	r3, r3, #4
 800700a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d015      	beq.n	8007040 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007014:	f7fb fd9c 	bl	8002b50 <HAL_GetTick>
 8007018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800701a:	e00a      	b.n	8007032 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800701c:	f7fb fd98 	bl	8002b50 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800702a:	4293      	cmp	r3, r2
 800702c:	d901      	bls.n	8007032 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e0cb      	b.n	80071ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007032:	4b49      	ldr	r3, [pc, #292]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8007034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0ee      	beq.n	800701c <HAL_RCC_OscConfig+0x334>
 800703e:	e014      	b.n	800706a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007040:	f7fb fd86 	bl	8002b50 <HAL_GetTick>
 8007044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007046:	e00a      	b.n	800705e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007048:	f7fb fd82 	bl	8002b50 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007056:	4293      	cmp	r3, r2
 8007058:	d901      	bls.n	800705e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e0b5      	b.n	80071ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800705e:	4b3e      	ldr	r3, [pc, #248]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8007060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1ee      	bne.n	8007048 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800706a:	7dfb      	ldrb	r3, [r7, #23]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d105      	bne.n	800707c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007070:	4b39      	ldr	r3, [pc, #228]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8007072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007074:	4a38      	ldr	r2, [pc, #224]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8007076:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800707a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 80a1 	beq.w	80071c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007086:	4b34      	ldr	r3, [pc, #208]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f003 030c 	and.w	r3, r3, #12
 800708e:	2b08      	cmp	r3, #8
 8007090:	d05c      	beq.n	800714c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	2b02      	cmp	r3, #2
 8007098:	d141      	bne.n	800711e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800709a:	4b31      	ldr	r3, [pc, #196]	@ (8007160 <HAL_RCC_OscConfig+0x478>)
 800709c:	2200      	movs	r2, #0
 800709e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a0:	f7fb fd56 	bl	8002b50 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070a8:	f7fb fd52 	bl	8002b50 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e087      	b.n	80071ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070ba:	4b27      	ldr	r3, [pc, #156]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1f0      	bne.n	80070a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	69da      	ldr	r2, [r3, #28]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d4:	019b      	lsls	r3, r3, #6
 80070d6:	431a      	orrs	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070dc:	085b      	lsrs	r3, r3, #1
 80070de:	3b01      	subs	r3, #1
 80070e0:	041b      	lsls	r3, r3, #16
 80070e2:	431a      	orrs	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e8:	061b      	lsls	r3, r3, #24
 80070ea:	491b      	ldr	r1, [pc, #108]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007160 <HAL_RCC_OscConfig+0x478>)
 80070f2:	2201      	movs	r2, #1
 80070f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070f6:	f7fb fd2b 	bl	8002b50 <HAL_GetTick>
 80070fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070fc:	e008      	b.n	8007110 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070fe:	f7fb fd27 	bl	8002b50 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	2b02      	cmp	r3, #2
 800710a:	d901      	bls.n	8007110 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e05c      	b.n	80071ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007110:	4b11      	ldr	r3, [pc, #68]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d0f0      	beq.n	80070fe <HAL_RCC_OscConfig+0x416>
 800711c:	e054      	b.n	80071c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800711e:	4b10      	ldr	r3, [pc, #64]	@ (8007160 <HAL_RCC_OscConfig+0x478>)
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007124:	f7fb fd14 	bl	8002b50 <HAL_GetTick>
 8007128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800712a:	e008      	b.n	800713e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800712c:	f7fb fd10 	bl	8002b50 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b02      	cmp	r3, #2
 8007138:	d901      	bls.n	800713e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e045      	b.n	80071ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800713e:	4b06      	ldr	r3, [pc, #24]	@ (8007158 <HAL_RCC_OscConfig+0x470>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1f0      	bne.n	800712c <HAL_RCC_OscConfig+0x444>
 800714a:	e03d      	b.n	80071c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d107      	bne.n	8007164 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e038      	b.n	80071ca <HAL_RCC_OscConfig+0x4e2>
 8007158:	40023800 	.word	0x40023800
 800715c:	40007000 	.word	0x40007000
 8007160:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007164:	4b1b      	ldr	r3, [pc, #108]	@ (80071d4 <HAL_RCC_OscConfig+0x4ec>)
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d028      	beq.n	80071c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800717c:	429a      	cmp	r2, r3
 800717e:	d121      	bne.n	80071c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800718a:	429a      	cmp	r2, r3
 800718c:	d11a      	bne.n	80071c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007194:	4013      	ands	r3, r2
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800719a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800719c:	4293      	cmp	r3, r2
 800719e:	d111      	bne.n	80071c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071aa:	085b      	lsrs	r3, r3, #1
 80071ac:	3b01      	subs	r3, #1
 80071ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d107      	bne.n	80071c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d001      	beq.n	80071c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e000      	b.n	80071ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	40023800 	.word	0x40023800

080071d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e0cc      	b.n	8007386 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071ec:	4b68      	ldr	r3, [pc, #416]	@ (8007390 <HAL_RCC_ClockConfig+0x1b8>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d90c      	bls.n	8007214 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071fa:	4b65      	ldr	r3, [pc, #404]	@ (8007390 <HAL_RCC_ClockConfig+0x1b8>)
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	b2d2      	uxtb	r2, r2
 8007200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007202:	4b63      	ldr	r3, [pc, #396]	@ (8007390 <HAL_RCC_ClockConfig+0x1b8>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0307 	and.w	r3, r3, #7
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	429a      	cmp	r2, r3
 800720e:	d001      	beq.n	8007214 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e0b8      	b.n	8007386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b00      	cmp	r3, #0
 800721e:	d020      	beq.n	8007262 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b00      	cmp	r3, #0
 800722a:	d005      	beq.n	8007238 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800722c:	4b59      	ldr	r3, [pc, #356]	@ (8007394 <HAL_RCC_ClockConfig+0x1bc>)
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	4a58      	ldr	r2, [pc, #352]	@ (8007394 <HAL_RCC_ClockConfig+0x1bc>)
 8007232:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007236:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0308 	and.w	r3, r3, #8
 8007240:	2b00      	cmp	r3, #0
 8007242:	d005      	beq.n	8007250 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007244:	4b53      	ldr	r3, [pc, #332]	@ (8007394 <HAL_RCC_ClockConfig+0x1bc>)
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	4a52      	ldr	r2, [pc, #328]	@ (8007394 <HAL_RCC_ClockConfig+0x1bc>)
 800724a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800724e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007250:	4b50      	ldr	r3, [pc, #320]	@ (8007394 <HAL_RCC_ClockConfig+0x1bc>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	494d      	ldr	r1, [pc, #308]	@ (8007394 <HAL_RCC_ClockConfig+0x1bc>)
 800725e:	4313      	orrs	r3, r2
 8007260:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d044      	beq.n	80072f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d107      	bne.n	8007286 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007276:	4b47      	ldr	r3, [pc, #284]	@ (8007394 <HAL_RCC_ClockConfig+0x1bc>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d119      	bne.n	80072b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e07f      	b.n	8007386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	2b02      	cmp	r3, #2
 800728c:	d003      	beq.n	8007296 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007292:	2b03      	cmp	r3, #3
 8007294:	d107      	bne.n	80072a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007296:	4b3f      	ldr	r3, [pc, #252]	@ (8007394 <HAL_RCC_ClockConfig+0x1bc>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e06f      	b.n	8007386 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072a6:	4b3b      	ldr	r3, [pc, #236]	@ (8007394 <HAL_RCC_ClockConfig+0x1bc>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0302 	and.w	r3, r3, #2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e067      	b.n	8007386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072b6:	4b37      	ldr	r3, [pc, #220]	@ (8007394 <HAL_RCC_ClockConfig+0x1bc>)
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f023 0203 	bic.w	r2, r3, #3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	4934      	ldr	r1, [pc, #208]	@ (8007394 <HAL_RCC_ClockConfig+0x1bc>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072c8:	f7fb fc42 	bl	8002b50 <HAL_GetTick>
 80072cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072ce:	e00a      	b.n	80072e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072d0:	f7fb fc3e 	bl	8002b50 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072de:	4293      	cmp	r3, r2
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e04f      	b.n	8007386 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072e6:	4b2b      	ldr	r3, [pc, #172]	@ (8007394 <HAL_RCC_ClockConfig+0x1bc>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f003 020c 	and.w	r2, r3, #12
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d1eb      	bne.n	80072d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072f8:	4b25      	ldr	r3, [pc, #148]	@ (8007390 <HAL_RCC_ClockConfig+0x1b8>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0307 	and.w	r3, r3, #7
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d20c      	bcs.n	8007320 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007306:	4b22      	ldr	r3, [pc, #136]	@ (8007390 <HAL_RCC_ClockConfig+0x1b8>)
 8007308:	683a      	ldr	r2, [r7, #0]
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800730e:	4b20      	ldr	r3, [pc, #128]	@ (8007390 <HAL_RCC_ClockConfig+0x1b8>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0307 	and.w	r3, r3, #7
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	429a      	cmp	r2, r3
 800731a:	d001      	beq.n	8007320 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e032      	b.n	8007386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0304 	and.w	r3, r3, #4
 8007328:	2b00      	cmp	r3, #0
 800732a:	d008      	beq.n	800733e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800732c:	4b19      	ldr	r3, [pc, #100]	@ (8007394 <HAL_RCC_ClockConfig+0x1bc>)
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	4916      	ldr	r1, [pc, #88]	@ (8007394 <HAL_RCC_ClockConfig+0x1bc>)
 800733a:	4313      	orrs	r3, r2
 800733c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0308 	and.w	r3, r3, #8
 8007346:	2b00      	cmp	r3, #0
 8007348:	d009      	beq.n	800735e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800734a:	4b12      	ldr	r3, [pc, #72]	@ (8007394 <HAL_RCC_ClockConfig+0x1bc>)
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	490e      	ldr	r1, [pc, #56]	@ (8007394 <HAL_RCC_ClockConfig+0x1bc>)
 800735a:	4313      	orrs	r3, r2
 800735c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800735e:	f000 f821 	bl	80073a4 <HAL_RCC_GetSysClockFreq>
 8007362:	4602      	mov	r2, r0
 8007364:	4b0b      	ldr	r3, [pc, #44]	@ (8007394 <HAL_RCC_ClockConfig+0x1bc>)
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	091b      	lsrs	r3, r3, #4
 800736a:	f003 030f 	and.w	r3, r3, #15
 800736e:	490a      	ldr	r1, [pc, #40]	@ (8007398 <HAL_RCC_ClockConfig+0x1c0>)
 8007370:	5ccb      	ldrb	r3, [r1, r3]
 8007372:	fa22 f303 	lsr.w	r3, r2, r3
 8007376:	4a09      	ldr	r2, [pc, #36]	@ (800739c <HAL_RCC_ClockConfig+0x1c4>)
 8007378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800737a:	4b09      	ldr	r3, [pc, #36]	@ (80073a0 <HAL_RCC_ClockConfig+0x1c8>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4618      	mov	r0, r3
 8007380:	f7fb fba2 	bl	8002ac8 <HAL_InitTick>

  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	40023c00 	.word	0x40023c00
 8007394:	40023800 	.word	0x40023800
 8007398:	0800fc44 	.word	0x0800fc44
 800739c:	20000004 	.word	0x20000004
 80073a0:	20000008 	.word	0x20000008

080073a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073a8:	b094      	sub	sp, #80	@ 0x50
 80073aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073bc:	4b79      	ldr	r3, [pc, #484]	@ (80075a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f003 030c 	and.w	r3, r3, #12
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d00d      	beq.n	80073e4 <HAL_RCC_GetSysClockFreq+0x40>
 80073c8:	2b08      	cmp	r3, #8
 80073ca:	f200 80e1 	bhi.w	8007590 <HAL_RCC_GetSysClockFreq+0x1ec>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <HAL_RCC_GetSysClockFreq+0x34>
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	d003      	beq.n	80073de <HAL_RCC_GetSysClockFreq+0x3a>
 80073d6:	e0db      	b.n	8007590 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073d8:	4b73      	ldr	r3, [pc, #460]	@ (80075a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80073da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073dc:	e0db      	b.n	8007596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073de:	4b73      	ldr	r3, [pc, #460]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x208>)
 80073e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073e2:	e0d8      	b.n	8007596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073e4:	4b6f      	ldr	r3, [pc, #444]	@ (80075a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073ee:	4b6d      	ldr	r3, [pc, #436]	@ (80075a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d063      	beq.n	80074c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073fa:	4b6a      	ldr	r3, [pc, #424]	@ (80075a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	099b      	lsrs	r3, r3, #6
 8007400:	2200      	movs	r2, #0
 8007402:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007404:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800740c:	633b      	str	r3, [r7, #48]	@ 0x30
 800740e:	2300      	movs	r3, #0
 8007410:	637b      	str	r3, [r7, #52]	@ 0x34
 8007412:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007416:	4622      	mov	r2, r4
 8007418:	462b      	mov	r3, r5
 800741a:	f04f 0000 	mov.w	r0, #0
 800741e:	f04f 0100 	mov.w	r1, #0
 8007422:	0159      	lsls	r1, r3, #5
 8007424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007428:	0150      	lsls	r0, r2, #5
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	4621      	mov	r1, r4
 8007430:	1a51      	subs	r1, r2, r1
 8007432:	6139      	str	r1, [r7, #16]
 8007434:	4629      	mov	r1, r5
 8007436:	eb63 0301 	sbc.w	r3, r3, r1
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	f04f 0200 	mov.w	r2, #0
 8007440:	f04f 0300 	mov.w	r3, #0
 8007444:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007448:	4659      	mov	r1, fp
 800744a:	018b      	lsls	r3, r1, #6
 800744c:	4651      	mov	r1, sl
 800744e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007452:	4651      	mov	r1, sl
 8007454:	018a      	lsls	r2, r1, #6
 8007456:	4651      	mov	r1, sl
 8007458:	ebb2 0801 	subs.w	r8, r2, r1
 800745c:	4659      	mov	r1, fp
 800745e:	eb63 0901 	sbc.w	r9, r3, r1
 8007462:	f04f 0200 	mov.w	r2, #0
 8007466:	f04f 0300 	mov.w	r3, #0
 800746a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800746e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007472:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007476:	4690      	mov	r8, r2
 8007478:	4699      	mov	r9, r3
 800747a:	4623      	mov	r3, r4
 800747c:	eb18 0303 	adds.w	r3, r8, r3
 8007480:	60bb      	str	r3, [r7, #8]
 8007482:	462b      	mov	r3, r5
 8007484:	eb49 0303 	adc.w	r3, r9, r3
 8007488:	60fb      	str	r3, [r7, #12]
 800748a:	f04f 0200 	mov.w	r2, #0
 800748e:	f04f 0300 	mov.w	r3, #0
 8007492:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007496:	4629      	mov	r1, r5
 8007498:	024b      	lsls	r3, r1, #9
 800749a:	4621      	mov	r1, r4
 800749c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80074a0:	4621      	mov	r1, r4
 80074a2:	024a      	lsls	r2, r1, #9
 80074a4:	4610      	mov	r0, r2
 80074a6:	4619      	mov	r1, r3
 80074a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074aa:	2200      	movs	r2, #0
 80074ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80074b4:	f7f9 fbc8 	bl	8000c48 <__aeabi_uldivmod>
 80074b8:	4602      	mov	r2, r0
 80074ba:	460b      	mov	r3, r1
 80074bc:	4613      	mov	r3, r2
 80074be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074c0:	e058      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074c2:	4b38      	ldr	r3, [pc, #224]	@ (80075a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	099b      	lsrs	r3, r3, #6
 80074c8:	2200      	movs	r2, #0
 80074ca:	4618      	mov	r0, r3
 80074cc:	4611      	mov	r1, r2
 80074ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80074d2:	623b      	str	r3, [r7, #32]
 80074d4:	2300      	movs	r3, #0
 80074d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80074d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80074dc:	4642      	mov	r2, r8
 80074de:	464b      	mov	r3, r9
 80074e0:	f04f 0000 	mov.w	r0, #0
 80074e4:	f04f 0100 	mov.w	r1, #0
 80074e8:	0159      	lsls	r1, r3, #5
 80074ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074ee:	0150      	lsls	r0, r2, #5
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4641      	mov	r1, r8
 80074f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80074fa:	4649      	mov	r1, r9
 80074fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8007500:	f04f 0200 	mov.w	r2, #0
 8007504:	f04f 0300 	mov.w	r3, #0
 8007508:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800750c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007510:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007514:	ebb2 040a 	subs.w	r4, r2, sl
 8007518:	eb63 050b 	sbc.w	r5, r3, fp
 800751c:	f04f 0200 	mov.w	r2, #0
 8007520:	f04f 0300 	mov.w	r3, #0
 8007524:	00eb      	lsls	r3, r5, #3
 8007526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800752a:	00e2      	lsls	r2, r4, #3
 800752c:	4614      	mov	r4, r2
 800752e:	461d      	mov	r5, r3
 8007530:	4643      	mov	r3, r8
 8007532:	18e3      	adds	r3, r4, r3
 8007534:	603b      	str	r3, [r7, #0]
 8007536:	464b      	mov	r3, r9
 8007538:	eb45 0303 	adc.w	r3, r5, r3
 800753c:	607b      	str	r3, [r7, #4]
 800753e:	f04f 0200 	mov.w	r2, #0
 8007542:	f04f 0300 	mov.w	r3, #0
 8007546:	e9d7 4500 	ldrd	r4, r5, [r7]
 800754a:	4629      	mov	r1, r5
 800754c:	028b      	lsls	r3, r1, #10
 800754e:	4621      	mov	r1, r4
 8007550:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007554:	4621      	mov	r1, r4
 8007556:	028a      	lsls	r2, r1, #10
 8007558:	4610      	mov	r0, r2
 800755a:	4619      	mov	r1, r3
 800755c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800755e:	2200      	movs	r2, #0
 8007560:	61bb      	str	r3, [r7, #24]
 8007562:	61fa      	str	r2, [r7, #28]
 8007564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007568:	f7f9 fb6e 	bl	8000c48 <__aeabi_uldivmod>
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	4613      	mov	r3, r2
 8007572:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007574:	4b0b      	ldr	r3, [pc, #44]	@ (80075a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	0c1b      	lsrs	r3, r3, #16
 800757a:	f003 0303 	and.w	r3, r3, #3
 800757e:	3301      	adds	r3, #1
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007584:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007586:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007588:	fbb2 f3f3 	udiv	r3, r2, r3
 800758c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800758e:	e002      	b.n	8007596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007590:	4b05      	ldr	r3, [pc, #20]	@ (80075a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007592:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007598:	4618      	mov	r0, r3
 800759a:	3750      	adds	r7, #80	@ 0x50
 800759c:	46bd      	mov	sp, r7
 800759e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075a2:	bf00      	nop
 80075a4:	40023800 	.word	0x40023800
 80075a8:	00f42400 	.word	0x00f42400
 80075ac:	007a1200 	.word	0x007a1200

080075b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075b0:	b480      	push	{r7}
 80075b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075b4:	4b03      	ldr	r3, [pc, #12]	@ (80075c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80075b6:	681b      	ldr	r3, [r3, #0]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	20000004 	.word	0x20000004

080075c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80075cc:	f7ff fff0 	bl	80075b0 <HAL_RCC_GetHCLKFreq>
 80075d0:	4602      	mov	r2, r0
 80075d2:	4b05      	ldr	r3, [pc, #20]	@ (80075e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	0a9b      	lsrs	r3, r3, #10
 80075d8:	f003 0307 	and.w	r3, r3, #7
 80075dc:	4903      	ldr	r1, [pc, #12]	@ (80075ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80075de:	5ccb      	ldrb	r3, [r1, r3]
 80075e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	40023800 	.word	0x40023800
 80075ec:	0800fc54 	.word	0x0800fc54

080075f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80075fc:	2300      	movs	r3, #0
 80075fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	d105      	bne.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007614:	2b00      	cmp	r3, #0
 8007616:	d035      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007618:	4b62      	ldr	r3, [pc, #392]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800761a:	2200      	movs	r2, #0
 800761c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800761e:	f7fb fa97 	bl	8002b50 <HAL_GetTick>
 8007622:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007624:	e008      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007626:	f7fb fa93 	bl	8002b50 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	2b02      	cmp	r3, #2
 8007632:	d901      	bls.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e0b0      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007638:	4b5b      	ldr	r3, [pc, #364]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1f0      	bne.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	019a      	lsls	r2, r3, #6
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	071b      	lsls	r3, r3, #28
 8007650:	4955      	ldr	r1, [pc, #340]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007652:	4313      	orrs	r3, r2
 8007654:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007658:	4b52      	ldr	r3, [pc, #328]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800765a:	2201      	movs	r2, #1
 800765c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800765e:	f7fb fa77 	bl	8002b50 <HAL_GetTick>
 8007662:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007664:	e008      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007666:	f7fb fa73 	bl	8002b50 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	2b02      	cmp	r3, #2
 8007672:	d901      	bls.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e090      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007678:	4b4b      	ldr	r3, [pc, #300]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d0f0      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 8083 	beq.w	8007798 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
 8007696:	4b44      	ldr	r3, [pc, #272]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800769a:	4a43      	ldr	r2, [pc, #268]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800769c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80076a2:	4b41      	ldr	r3, [pc, #260]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076aa:	60fb      	str	r3, [r7, #12]
 80076ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80076ae:	4b3f      	ldr	r3, [pc, #252]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a3e      	ldr	r2, [pc, #248]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80076b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80076ba:	f7fb fa49 	bl	8002b50 <HAL_GetTick>
 80076be:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80076c0:	e008      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076c2:	f7fb fa45 	bl	8002b50 <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d901      	bls.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e062      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80076d4:	4b35      	ldr	r3, [pc, #212]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d0f0      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80076e0:	4b31      	ldr	r3, [pc, #196]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076e8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d02f      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d028      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076fe:	4b2a      	ldr	r3, [pc, #168]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007702:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007706:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007708:	4b29      	ldr	r3, [pc, #164]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800770a:	2201      	movs	r2, #1
 800770c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800770e:	4b28      	ldr	r3, [pc, #160]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007710:	2200      	movs	r2, #0
 8007712:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007714:	4a24      	ldr	r2, [pc, #144]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800771a:	4b23      	ldr	r3, [pc, #140]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800771c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b01      	cmp	r3, #1
 8007724:	d114      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007726:	f7fb fa13 	bl	8002b50 <HAL_GetTick>
 800772a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800772c:	e00a      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800772e:	f7fb fa0f 	bl	8002b50 <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800773c:	4293      	cmp	r3, r2
 800773e:	d901      	bls.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e02a      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007744:	4b18      	ldr	r3, [pc, #96]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007748:	f003 0302 	and.w	r3, r3, #2
 800774c:	2b00      	cmp	r3, #0
 800774e:	d0ee      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007758:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800775c:	d10d      	bne.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800775e:	4b12      	ldr	r3, [pc, #72]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800776e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007772:	490d      	ldr	r1, [pc, #52]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007774:	4313      	orrs	r3, r2
 8007776:	608b      	str	r3, [r1, #8]
 8007778:	e005      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800777a:	4b0b      	ldr	r3, [pc, #44]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	4a0a      	ldr	r2, [pc, #40]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007780:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007784:	6093      	str	r3, [r2, #8]
 8007786:	4b08      	ldr	r3, [pc, #32]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007788:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007792:	4905      	ldr	r1, [pc, #20]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007794:	4313      	orrs	r3, r2
 8007796:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	42470068 	.word	0x42470068
 80077a8:	40023800 	.word	0x40023800
 80077ac:	40007000 	.word	0x40007000
 80077b0:	42470e40 	.word	0x42470e40

080077b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b087      	sub	sp, #28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80077c8:	2300      	movs	r3, #0
 80077ca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d13f      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80077d2:	4b24      	ldr	r3, [pc, #144]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077da:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d006      	beq.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80077e8:	d12f      	bne.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80077ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80077ec:	617b      	str	r3, [r7, #20]
          break;
 80077ee:	e02f      	b.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80077f0:	4b1c      	ldr	r3, [pc, #112]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077fc:	d108      	bne.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80077fe:	4b19      	ldr	r3, [pc, #100]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007806:	4a19      	ldr	r2, [pc, #100]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007808:	fbb2 f3f3 	udiv	r3, r2, r3
 800780c:	613b      	str	r3, [r7, #16]
 800780e:	e007      	b.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007810:	4b14      	ldr	r3, [pc, #80]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007818:	4a15      	ldr	r2, [pc, #84]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800781a:	fbb2 f3f3 	udiv	r3, r2, r3
 800781e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007820:	4b10      	ldr	r3, [pc, #64]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007822:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007826:	099b      	lsrs	r3, r3, #6
 8007828:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	fb02 f303 	mul.w	r3, r2, r3
 8007832:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007834:	4b0b      	ldr	r3, [pc, #44]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800783a:	0f1b      	lsrs	r3, r3, #28
 800783c:	f003 0307 	and.w	r3, r3, #7
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	fbb2 f3f3 	udiv	r3, r2, r3
 8007846:	617b      	str	r3, [r7, #20]
          break;
 8007848:	e002      	b.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800784a:	2300      	movs	r3, #0
 800784c:	617b      	str	r3, [r7, #20]
          break;
 800784e:	bf00      	nop
        }
      }
      break;
 8007850:	e000      	b.n	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8007852:	bf00      	nop
    }
  }
  return frequency;
 8007854:	697b      	ldr	r3, [r7, #20]
}
 8007856:	4618      	mov	r0, r3
 8007858:	371c      	adds	r7, #28
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	40023800 	.word	0x40023800
 8007868:	00bb8000 	.word	0x00bb8000
 800786c:	007a1200 	.word	0x007a1200
 8007870:	00f42400 	.word	0x00f42400

08007874 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e07b      	b.n	800797e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800788a:	2b00      	cmp	r3, #0
 800788c:	d108      	bne.n	80078a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007896:	d009      	beq.n	80078ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	61da      	str	r2, [r3, #28]
 800789e:	e005      	b.n	80078ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d106      	bne.n	80078cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7fa ff30 	bl	800272c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80078f4:	431a      	orrs	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078fe:	431a      	orrs	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	431a      	orrs	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	431a      	orrs	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800791c:	431a      	orrs	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007926:	431a      	orrs	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007930:	ea42 0103 	orr.w	r1, r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007938:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	0c1b      	lsrs	r3, r3, #16
 800794a:	f003 0104 	and.w	r1, r3, #4
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007952:	f003 0210 	and.w	r2, r3, #16
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	69da      	ldr	r2, [r3, #28]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800796c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b088      	sub	sp, #32
 800798a:	af00      	add	r7, sp, #0
 800798c:	60f8      	str	r0, [r7, #12]
 800798e:	60b9      	str	r1, [r7, #8]
 8007990:	603b      	str	r3, [r7, #0]
 8007992:	4613      	mov	r3, r2
 8007994:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007996:	f7fb f8db 	bl	8002b50 <HAL_GetTick>
 800799a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800799c:	88fb      	ldrh	r3, [r7, #6]
 800799e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d001      	beq.n	80079b0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80079ac:	2302      	movs	r3, #2
 80079ae:	e12a      	b.n	8007c06 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <HAL_SPI_Transmit+0x36>
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d101      	bne.n	80079c0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e122      	b.n	8007c06 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d101      	bne.n	80079ce <HAL_SPI_Transmit+0x48>
 80079ca:	2302      	movs	r3, #2
 80079cc:	e11b      	b.n	8007c06 <HAL_SPI_Transmit+0x280>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2203      	movs	r2, #3
 80079da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	88fa      	ldrh	r2, [r7, #6]
 80079ee:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	88fa      	ldrh	r2, [r7, #6]
 80079f4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a1c:	d10f      	bne.n	8007a3e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a48:	2b40      	cmp	r3, #64	@ 0x40
 8007a4a:	d007      	beq.n	8007a5c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a64:	d152      	bne.n	8007b0c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d002      	beq.n	8007a74 <HAL_SPI_Transmit+0xee>
 8007a6e:	8b7b      	ldrh	r3, [r7, #26]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d145      	bne.n	8007b00 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a78:	881a      	ldrh	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a84:	1c9a      	adds	r2, r3, #2
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	3b01      	subs	r3, #1
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a98:	e032      	b.n	8007b00 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f003 0302 	and.w	r3, r3, #2
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d112      	bne.n	8007ace <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aac:	881a      	ldrh	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab8:	1c9a      	adds	r2, r3, #2
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007acc:	e018      	b.n	8007b00 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ace:	f7fb f83f 	bl	8002b50 <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d803      	bhi.n	8007ae6 <HAL_SPI_Transmit+0x160>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae4:	d102      	bne.n	8007aec <HAL_SPI_Transmit+0x166>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d109      	bne.n	8007b00 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e082      	b.n	8007c06 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1c7      	bne.n	8007a9a <HAL_SPI_Transmit+0x114>
 8007b0a:	e053      	b.n	8007bb4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <HAL_SPI_Transmit+0x194>
 8007b14:	8b7b      	ldrh	r3, [r7, #26]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d147      	bne.n	8007baa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	330c      	adds	r3, #12
 8007b24:	7812      	ldrb	r2, [r2, #0]
 8007b26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b2c:	1c5a      	adds	r2, r3, #1
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007b40:	e033      	b.n	8007baa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d113      	bne.n	8007b78 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	330c      	adds	r3, #12
 8007b5a:	7812      	ldrb	r2, [r2, #0]
 8007b5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b62:	1c5a      	adds	r2, r3, #1
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007b76:	e018      	b.n	8007baa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b78:	f7fa ffea 	bl	8002b50 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d803      	bhi.n	8007b90 <HAL_SPI_Transmit+0x20a>
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8e:	d102      	bne.n	8007b96 <HAL_SPI_Transmit+0x210>
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d109      	bne.n	8007baa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e02d      	b.n	8007c06 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1c6      	bne.n	8007b42 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bb4:	69fa      	ldr	r2, [r7, #28]
 8007bb6:	6839      	ldr	r1, [r7, #0]
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f000 f8b1 	bl	8007d20 <SPI_EndRxTxTransaction>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10a      	bne.n	8007be8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	617b      	str	r3, [r7, #20]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	617b      	str	r3, [r7, #20]
 8007be6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e000      	b.n	8007c06 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007c04:	2300      	movs	r3, #0
  }
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3720      	adds	r7, #32
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
	...

08007c10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b088      	sub	sp, #32
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	603b      	str	r3, [r7, #0]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c20:	f7fa ff96 	bl	8002b50 <HAL_GetTick>
 8007c24:	4602      	mov	r2, r0
 8007c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c28:	1a9b      	subs	r3, r3, r2
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c30:	f7fa ff8e 	bl	8002b50 <HAL_GetTick>
 8007c34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c36:	4b39      	ldr	r3, [pc, #228]	@ (8007d1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	015b      	lsls	r3, r3, #5
 8007c3c:	0d1b      	lsrs	r3, r3, #20
 8007c3e:	69fa      	ldr	r2, [r7, #28]
 8007c40:	fb02 f303 	mul.w	r3, r2, r3
 8007c44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c46:	e055      	b.n	8007cf4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4e:	d051      	beq.n	8007cf4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c50:	f7fa ff7e 	bl	8002b50 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	69fa      	ldr	r2, [r7, #28]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d902      	bls.n	8007c66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d13d      	bne.n	8007ce2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c7e:	d111      	bne.n	8007ca4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c88:	d004      	beq.n	8007c94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c92:	d107      	bne.n	8007ca4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ca2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cac:	d10f      	bne.n	8007cce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ccc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e018      	b.n	8007d14 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d102      	bne.n	8007cee <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	61fb      	str	r3, [r7, #28]
 8007cec:	e002      	b.n	8007cf4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	689a      	ldr	r2, [r3, #8]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	bf0c      	ite	eq
 8007d04:	2301      	moveq	r3, #1
 8007d06:	2300      	movne	r3, #0
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	79fb      	ldrb	r3, [r7, #7]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d19a      	bne.n	8007c48 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3720      	adds	r7, #32
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20000004 	.word	0x20000004

08007d20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b088      	sub	sp, #32
 8007d24:	af02      	add	r7, sp, #8
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2201      	movs	r2, #1
 8007d34:	2102      	movs	r1, #2
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f7ff ff6a 	bl	8007c10 <SPI_WaitFlagStateUntilTimeout>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d007      	beq.n	8007d52 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d46:	f043 0220 	orr.w	r2, r3, #32
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e032      	b.n	8007db8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d52:	4b1b      	ldr	r3, [pc, #108]	@ (8007dc0 <SPI_EndRxTxTransaction+0xa0>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a1b      	ldr	r2, [pc, #108]	@ (8007dc4 <SPI_EndRxTxTransaction+0xa4>)
 8007d58:	fba2 2303 	umull	r2, r3, r2, r3
 8007d5c:	0d5b      	lsrs	r3, r3, #21
 8007d5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007d62:	fb02 f303 	mul.w	r3, r2, r3
 8007d66:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d70:	d112      	bne.n	8007d98 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	2180      	movs	r1, #128	@ 0x80
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f7ff ff47 	bl	8007c10 <SPI_WaitFlagStateUntilTimeout>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d016      	beq.n	8007db6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d8c:	f043 0220 	orr.w	r2, r3, #32
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e00f      	b.n	8007db8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00a      	beq.n	8007db4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dae:	2b80      	cmp	r3, #128	@ 0x80
 8007db0:	d0f2      	beq.n	8007d98 <SPI_EndRxTxTransaction+0x78>
 8007db2:	e000      	b.n	8007db6 <SPI_EndRxTxTransaction+0x96>
        break;
 8007db4:	bf00      	nop
  }

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	20000004 	.word	0x20000004
 8007dc4:	165e9f81 	.word	0x165e9f81

08007dc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dc8:	b084      	sub	sp, #16
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	f107 001c 	add.w	r0, r7, #28
 8007dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dda:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d123      	bne.n	8007e2a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007df6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d105      	bne.n	8007e1e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f9dc 	bl	80081dc <USB_CoreReset>
 8007e24:	4603      	mov	r3, r0
 8007e26:	73fb      	strb	r3, [r7, #15]
 8007e28:	e01b      	b.n	8007e62 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f9d0 	bl	80081dc <USB_CoreReset>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d106      	bne.n	8007e56 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e4c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e54:	e005      	b.n	8007e62 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e62:	7fbb      	ldrb	r3, [r7, #30]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d10b      	bne.n	8007e80 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f043 0206 	orr.w	r2, r3, #6
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f043 0220 	orr.w	r2, r3, #32
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e8c:	b004      	add	sp, #16
 8007e8e:	4770      	bx	lr

08007e90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f043 0201 	orr.w	r2, r3, #1
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	f023 0201 	bic.w	r2, r3, #1
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ef0:	78fb      	ldrb	r3, [r7, #3]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d115      	bne.n	8007f22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f02:	200a      	movs	r0, #10
 8007f04:	f7fa fe30 	bl	8002b68 <HAL_Delay>
      ms += 10U;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	330a      	adds	r3, #10
 8007f0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f956 	bl	80081c0 <USB_GetMode>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d01e      	beq.n	8007f58 <USB_SetCurrentMode+0x84>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f1e:	d9f0      	bls.n	8007f02 <USB_SetCurrentMode+0x2e>
 8007f20:	e01a      	b.n	8007f58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f22:	78fb      	ldrb	r3, [r7, #3]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d115      	bne.n	8007f54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f34:	200a      	movs	r0, #10
 8007f36:	f7fa fe17 	bl	8002b68 <HAL_Delay>
      ms += 10U;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	330a      	adds	r3, #10
 8007f3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f93d 	bl	80081c0 <USB_GetMode>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d005      	beq.n	8007f58 <USB_SetCurrentMode+0x84>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f50:	d9f0      	bls.n	8007f34 <USB_SetCurrentMode+0x60>
 8007f52:	e001      	b.n	8007f58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e005      	b.n	8007f64 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2bc8      	cmp	r3, #200	@ 0xc8
 8007f5c:	d101      	bne.n	8007f62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e000      	b.n	8007f64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f86:	d901      	bls.n	8007f8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e01b      	b.n	8007fc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	daf2      	bge.n	8007f7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f94:	2300      	movs	r3, #0
 8007f96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	019b      	lsls	r3, r3, #6
 8007f9c:	f043 0220 	orr.w	r2, r3, #32
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fb0:	d901      	bls.n	8007fb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e006      	b.n	8007fc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	f003 0320 	and.w	r3, r3, #32
 8007fbe:	2b20      	cmp	r3, #32
 8007fc0:	d0f0      	beq.n	8007fa4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fe8:	d901      	bls.n	8007fee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e018      	b.n	8008020 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	daf2      	bge.n	8007fdc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2210      	movs	r2, #16
 8007ffe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	3301      	adds	r3, #1
 8008004:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800800c:	d901      	bls.n	8008012 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e006      	b.n	8008020 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	f003 0310 	and.w	r3, r3, #16
 800801a:	2b10      	cmp	r3, #16
 800801c:	d0f0      	beq.n	8008000 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800802c:	b480      	push	{r7}
 800802e:	b089      	sub	sp, #36	@ 0x24
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	4611      	mov	r1, r2
 8008038:	461a      	mov	r2, r3
 800803a:	460b      	mov	r3, r1
 800803c:	71fb      	strb	r3, [r7, #7]
 800803e:	4613      	mov	r3, r2
 8008040:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800804a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800804e:	2b00      	cmp	r3, #0
 8008050:	d123      	bne.n	800809a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008052:	88bb      	ldrh	r3, [r7, #4]
 8008054:	3303      	adds	r3, #3
 8008056:	089b      	lsrs	r3, r3, #2
 8008058:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800805a:	2300      	movs	r3, #0
 800805c:	61bb      	str	r3, [r7, #24]
 800805e:	e018      	b.n	8008092 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008060:	79fb      	ldrb	r3, [r7, #7]
 8008062:	031a      	lsls	r2, r3, #12
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	4413      	add	r3, r2
 8008068:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800806c:	461a      	mov	r2, r3
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	3301      	adds	r3, #1
 8008078:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	3301      	adds	r3, #1
 800807e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	3301      	adds	r3, #1
 8008084:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	3301      	adds	r3, #1
 800808a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	3301      	adds	r3, #1
 8008090:	61bb      	str	r3, [r7, #24]
 8008092:	69ba      	ldr	r2, [r7, #24]
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	429a      	cmp	r2, r3
 8008098:	d3e2      	bcc.n	8008060 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3724      	adds	r7, #36	@ 0x24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b08b      	sub	sp, #44	@ 0x2c
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	4613      	mov	r3, r2
 80080b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80080be:	88fb      	ldrh	r3, [r7, #6]
 80080c0:	089b      	lsrs	r3, r3, #2
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80080c6:	88fb      	ldrh	r3, [r7, #6]
 80080c8:	f003 0303 	and.w	r3, r3, #3
 80080cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80080ce:	2300      	movs	r3, #0
 80080d0:	623b      	str	r3, [r7, #32]
 80080d2:	e014      	b.n	80080fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080de:	601a      	str	r2, [r3, #0]
    pDest++;
 80080e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e2:	3301      	adds	r3, #1
 80080e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80080e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e8:	3301      	adds	r3, #1
 80080ea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80080ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ee:	3301      	adds	r3, #1
 80080f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80080f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f4:	3301      	adds	r3, #1
 80080f6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80080f8:	6a3b      	ldr	r3, [r7, #32]
 80080fa:	3301      	adds	r3, #1
 80080fc:	623b      	str	r3, [r7, #32]
 80080fe:	6a3a      	ldr	r2, [r7, #32]
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	429a      	cmp	r2, r3
 8008104:	d3e6      	bcc.n	80080d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008106:	8bfb      	ldrh	r3, [r7, #30]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d01e      	beq.n	800814a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800810c:	2300      	movs	r3, #0
 800810e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008116:	461a      	mov	r2, r3
 8008118:	f107 0310 	add.w	r3, r7, #16
 800811c:	6812      	ldr	r2, [r2, #0]
 800811e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	b2db      	uxtb	r3, r3
 8008126:	00db      	lsls	r3, r3, #3
 8008128:	fa22 f303 	lsr.w	r3, r2, r3
 800812c:	b2da      	uxtb	r2, r3
 800812e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008130:	701a      	strb	r2, [r3, #0]
      i++;
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	3301      	adds	r3, #1
 8008136:	623b      	str	r3, [r7, #32]
      pDest++;
 8008138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813a:	3301      	adds	r3, #1
 800813c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800813e:	8bfb      	ldrh	r3, [r7, #30]
 8008140:	3b01      	subs	r3, #1
 8008142:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008144:	8bfb      	ldrh	r3, [r7, #30]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1ea      	bne.n	8008120 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800814a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800814c:	4618      	mov	r0, r3
 800814e:	372c      	adds	r7, #44	@ 0x2c
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	4013      	ands	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008170:	68fb      	ldr	r3, [r7, #12]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800817e:	b480      	push	{r7}
 8008180:	b085      	sub	sp, #20
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	460b      	mov	r3, r1
 8008188:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	015a      	lsls	r2, r3, #5
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4413      	add	r3, r2
 8008196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800819e:	78fb      	ldrb	r3, [r7, #3]
 80081a0:	015a      	lsls	r2, r3, #5
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	4013      	ands	r3, r2
 80081b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80081b2:	68bb      	ldr	r3, [r7, #8]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	f003 0301 	and.w	r3, r3, #1
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081e4:	2300      	movs	r3, #0
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	3301      	adds	r3, #1
 80081ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081f4:	d901      	bls.n	80081fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e022      	b.n	8008240 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	daf2      	bge.n	80081e8 <USB_CoreReset+0xc>

  count = 10U;
 8008202:	230a      	movs	r3, #10
 8008204:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8008206:	e002      	b.n	800820e <USB_CoreReset+0x32>
  {
    count--;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	3b01      	subs	r3, #1
 800820c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1f9      	bne.n	8008208 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	f043 0201 	orr.w	r2, r3, #1
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	3301      	adds	r3, #1
 8008224:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800822c:	d901      	bls.n	8008232 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800822e:	2303      	movs	r3, #3
 8008230:	e006      	b.n	8008240 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b01      	cmp	r3, #1
 800823c:	d0f0      	beq.n	8008220 <USB_CoreReset+0x44>

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800824c:	b084      	sub	sp, #16
 800824e:	b580      	push	{r7, lr}
 8008250:	b086      	sub	sp, #24
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800825a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800826c:	461a      	mov	r2, r3
 800826e:	2300      	movs	r3, #0
 8008270:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008276:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008282:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800828e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d119      	bne.n	80082d6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80082a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d10a      	bne.n	80082c0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80082b8:	f043 0304 	orr.w	r3, r3, #4
 80082bc:	6013      	str	r3, [r2, #0]
 80082be:	e014      	b.n	80082ea <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80082ce:	f023 0304 	bic.w	r3, r3, #4
 80082d2:	6013      	str	r3, [r2, #0]
 80082d4:	e009      	b.n	80082ea <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80082e4:	f023 0304 	bic.w	r3, r3, #4
 80082e8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80082ea:	2110      	movs	r1, #16
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7ff fe3d 	bl	8007f6c <USB_FlushTxFifo>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7ff fe67 	bl	8007fd0 <USB_FlushRxFifo>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800830c:	2300      	movs	r3, #0
 800830e:	613b      	str	r3, [r7, #16]
 8008310:	e015      	b.n	800833e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	015a      	lsls	r2, r3, #5
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	4413      	add	r3, r2
 800831a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800831e:	461a      	mov	r2, r3
 8008320:	f04f 33ff 	mov.w	r3, #4294967295
 8008324:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	4413      	add	r3, r2
 800832e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008332:	461a      	mov	r2, r3
 8008334:	2300      	movs	r3, #0
 8008336:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	3301      	adds	r3, #1
 800833c:	613b      	str	r3, [r7, #16]
 800833e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008342:	461a      	mov	r2, r3
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	4293      	cmp	r3, r2
 8008348:	d3e3      	bcc.n	8008312 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f04f 32ff 	mov.w	r2, #4294967295
 8008356:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a18      	ldr	r2, [pc, #96]	@ (80083bc <USB_HostInit+0x170>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d10b      	bne.n	8008378 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008366:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a15      	ldr	r2, [pc, #84]	@ (80083c0 <USB_HostInit+0x174>)
 800836c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a14      	ldr	r2, [pc, #80]	@ (80083c4 <USB_HostInit+0x178>)
 8008372:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008376:	e009      	b.n	800838c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2280      	movs	r2, #128	@ 0x80
 800837c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a11      	ldr	r2, [pc, #68]	@ (80083c8 <USB_HostInit+0x17c>)
 8008382:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a11      	ldr	r2, [pc, #68]	@ (80083cc <USB_HostInit+0x180>)
 8008388:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800838c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008390:	2b00      	cmp	r3, #0
 8008392:	d105      	bne.n	80083a0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	f043 0210 	orr.w	r2, r3, #16
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	699a      	ldr	r2, [r3, #24]
 80083a4:	4b0a      	ldr	r3, [pc, #40]	@ (80083d0 <USB_HostInit+0x184>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083b8:	b004      	add	sp, #16
 80083ba:	4770      	bx	lr
 80083bc:	40040000 	.word	0x40040000
 80083c0:	01000200 	.word	0x01000200
 80083c4:	00e00300 	.word	0x00e00300
 80083c8:	00600080 	.word	0x00600080
 80083cc:	004000e0 	.word	0x004000e0
 80083d0:	a3200008 	.word	0xa3200008

080083d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80083f2:	f023 0303 	bic.w	r3, r3, #3
 80083f6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	78fb      	ldrb	r3, [r7, #3]
 8008402:	f003 0303 	and.w	r3, r3, #3
 8008406:	68f9      	ldr	r1, [r7, #12]
 8008408:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800840c:	4313      	orrs	r3, r2
 800840e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008410:	78fb      	ldrb	r3, [r7, #3]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d107      	bne.n	8008426 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800841c:	461a      	mov	r2, r3
 800841e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008422:	6053      	str	r3, [r2, #4]
 8008424:	e00c      	b.n	8008440 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008426:	78fb      	ldrb	r3, [r7, #3]
 8008428:	2b02      	cmp	r3, #2
 800842a:	d107      	bne.n	800843c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008432:	461a      	mov	r2, r3
 8008434:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008438:	6053      	str	r3, [r2, #4]
 800843a:	e001      	b.n	8008440 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e000      	b.n	8008442 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b084      	sub	sp, #16
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800845a:	2300      	movs	r3, #0
 800845c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800846e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800847c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800847e:	2064      	movs	r0, #100	@ 0x64
 8008480:	f7fa fb72 	bl	8002b68 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800848c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008490:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008492:	200a      	movs	r0, #10
 8008494:	f7fa fb68 	bl	8002b68 <HAL_Delay>

  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b085      	sub	sp, #20
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	460b      	mov	r3, r1
 80084ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80084c6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d109      	bne.n	80084e6 <USB_DriveVbus+0x44>
 80084d2:	78fb      	ldrb	r3, [r7, #3]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d106      	bne.n	80084e6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80084e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80084e4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80084ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084f0:	d109      	bne.n	8008506 <USB_DriveVbus+0x64>
 80084f2:	78fb      	ldrb	r3, [r7, #3]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d106      	bne.n	8008506 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008500:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008504:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008520:	2300      	movs	r3, #0
 8008522:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	0c5b      	lsrs	r3, r3, #17
 8008532:	f003 0303 	and.w	r3, r3, #3
}
 8008536:	4618      	mov	r0, r3
 8008538:	3714      	adds	r7, #20
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008542:	b480      	push	{r7}
 8008544:	b085      	sub	sp, #20
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	b29b      	uxth	r3, r3
}
 8008558:	4618      	mov	r0, r3
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	4608      	mov	r0, r1
 800856e:	4611      	mov	r1, r2
 8008570:	461a      	mov	r2, r3
 8008572:	4603      	mov	r3, r0
 8008574:	70fb      	strb	r3, [r7, #3]
 8008576:	460b      	mov	r3, r1
 8008578:	70bb      	strb	r3, [r7, #2]
 800857a:	4613      	mov	r3, r2
 800857c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008586:	78fb      	ldrb	r3, [r7, #3]
 8008588:	015a      	lsls	r2, r3, #5
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	4413      	add	r3, r2
 800858e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008592:	461a      	mov	r2, r3
 8008594:	f04f 33ff 	mov.w	r3, #4294967295
 8008598:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800859a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800859e:	2b03      	cmp	r3, #3
 80085a0:	d87c      	bhi.n	800869c <USB_HC_Init+0x138>
 80085a2:	a201      	add	r2, pc, #4	@ (adr r2, 80085a8 <USB_HC_Init+0x44>)
 80085a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a8:	080085b9 	.word	0x080085b9
 80085ac:	0800865f 	.word	0x0800865f
 80085b0:	080085b9 	.word	0x080085b9
 80085b4:	08008621 	.word	0x08008621
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80085b8:	78fb      	ldrb	r3, [r7, #3]
 80085ba:	015a      	lsls	r2, r3, #5
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	4413      	add	r3, r2
 80085c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085c4:	461a      	mov	r2, r3
 80085c6:	f240 439d 	movw	r3, #1181	@ 0x49d
 80085ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80085cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	da10      	bge.n	80085f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80085d4:	78fb      	ldrb	r3, [r7, #3]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	78fa      	ldrb	r2, [r7, #3]
 80085e4:	0151      	lsls	r1, r2, #5
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	440a      	add	r2, r1
 80085ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085f2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80085f4:	e055      	b.n	80086a2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a6f      	ldr	r2, [pc, #444]	@ (80087b8 <USB_HC_Init+0x254>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d151      	bne.n	80086a2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80085fe:	78fb      	ldrb	r3, [r7, #3]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	4413      	add	r3, r2
 8008606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	78fa      	ldrb	r2, [r7, #3]
 800860e:	0151      	lsls	r1, r2, #5
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	440a      	add	r2, r1
 8008614:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008618:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800861c:	60d3      	str	r3, [r2, #12]
      break;
 800861e:	e040      	b.n	80086a2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008620:	78fb      	ldrb	r3, [r7, #3]
 8008622:	015a      	lsls	r2, r3, #5
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	4413      	add	r3, r2
 8008628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800862c:	461a      	mov	r2, r3
 800862e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008632:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008634:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008638:	2b00      	cmp	r3, #0
 800863a:	da34      	bge.n	80086a6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800863c:	78fb      	ldrb	r3, [r7, #3]
 800863e:	015a      	lsls	r2, r3, #5
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	4413      	add	r3, r2
 8008644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	78fa      	ldrb	r2, [r7, #3]
 800864c:	0151      	lsls	r1, r2, #5
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	440a      	add	r2, r1
 8008652:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008656:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800865a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800865c:	e023      	b.n	80086a6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800865e:	78fb      	ldrb	r3, [r7, #3]
 8008660:	015a      	lsls	r2, r3, #5
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	4413      	add	r3, r2
 8008666:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800866a:	461a      	mov	r2, r3
 800866c:	f240 2325 	movw	r3, #549	@ 0x225
 8008670:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008672:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008676:	2b00      	cmp	r3, #0
 8008678:	da17      	bge.n	80086aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800867a:	78fb      	ldrb	r3, [r7, #3]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	4413      	add	r3, r2
 8008682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	78fa      	ldrb	r2, [r7, #3]
 800868a:	0151      	lsls	r1, r2, #5
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	440a      	add	r2, r1
 8008690:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008694:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008698:	60d3      	str	r3, [r2, #12]
      }
      break;
 800869a:	e006      	b.n	80086aa <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	77fb      	strb	r3, [r7, #31]
      break;
 80086a0:	e004      	b.n	80086ac <USB_HC_Init+0x148>
      break;
 80086a2:	bf00      	nop
 80086a4:	e002      	b.n	80086ac <USB_HC_Init+0x148>
      break;
 80086a6:	bf00      	nop
 80086a8:	e000      	b.n	80086ac <USB_HC_Init+0x148>
      break;
 80086aa:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80086ac:	78fb      	ldrb	r3, [r7, #3]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086b8:	461a      	mov	r2, r3
 80086ba:	2300      	movs	r3, #0
 80086bc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80086be:	78fb      	ldrb	r3, [r7, #3]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	78fa      	ldrb	r2, [r7, #3]
 80086ce:	0151      	lsls	r1, r2, #5
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	440a      	add	r2, r1
 80086d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086d8:	f043 0302 	orr.w	r3, r3, #2
 80086dc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086e4:	699a      	ldr	r2, [r3, #24]
 80086e6:	78fb      	ldrb	r3, [r7, #3]
 80086e8:	f003 030f 	and.w	r3, r3, #15
 80086ec:	2101      	movs	r1, #1
 80086ee:	fa01 f303 	lsl.w	r3, r1, r3
 80086f2:	6939      	ldr	r1, [r7, #16]
 80086f4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80086f8:	4313      	orrs	r3, r2
 80086fa:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008708:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800870c:	2b00      	cmp	r3, #0
 800870e:	da03      	bge.n	8008718 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008710:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008714:	61bb      	str	r3, [r7, #24]
 8008716:	e001      	b.n	800871c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008718:	2300      	movs	r3, #0
 800871a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7ff fef9 	bl	8008514 <USB_GetHostSpeed>
 8008722:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008724:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008728:	2b02      	cmp	r3, #2
 800872a:	d106      	bne.n	800873a <USB_HC_Init+0x1d6>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b02      	cmp	r3, #2
 8008730:	d003      	beq.n	800873a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008732:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008736:	617b      	str	r3, [r7, #20]
 8008738:	e001      	b.n	800873e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800873a:	2300      	movs	r3, #0
 800873c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800873e:	787b      	ldrb	r3, [r7, #1]
 8008740:	059b      	lsls	r3, r3, #22
 8008742:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008746:	78bb      	ldrb	r3, [r7, #2]
 8008748:	02db      	lsls	r3, r3, #11
 800874a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800874e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008750:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008754:	049b      	lsls	r3, r3, #18
 8008756:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800875a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800875c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800875e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008762:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	431a      	orrs	r2, r3
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800876c:	78fa      	ldrb	r2, [r7, #3]
 800876e:	0151      	lsls	r1, r2, #5
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	440a      	add	r2, r1
 8008774:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008778:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800877c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800877e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008782:	2b03      	cmp	r3, #3
 8008784:	d003      	beq.n	800878e <USB_HC_Init+0x22a>
 8008786:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800878a:	2b01      	cmp	r3, #1
 800878c:	d10f      	bne.n	80087ae <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800878e:	78fb      	ldrb	r3, [r7, #3]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	4413      	add	r3, r2
 8008796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	78fa      	ldrb	r2, [r7, #3]
 800879e:	0151      	lsls	r1, r2, #5
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	440a      	add	r2, r1
 80087a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80087ac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80087ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3720      	adds	r7, #32
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	40040000 	.word	0x40040000

080087bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b08c      	sub	sp, #48	@ 0x30
 80087c0:	af02      	add	r7, sp, #8
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	4613      	mov	r3, r2
 80087c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	785b      	ldrb	r3, [r3, #1]
 80087d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80087d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80087d8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	4a5d      	ldr	r2, [pc, #372]	@ (8008954 <USB_HC_StartXfer+0x198>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d12f      	bne.n	8008842 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d11c      	bne.n	8008822 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	7c9b      	ldrb	r3, [r3, #18]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d003      	beq.n	80087f8 <USB_HC_StartXfer+0x3c>
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	7c9b      	ldrb	r3, [r3, #18]
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d124      	bne.n	8008842 <USB_HC_StartXfer+0x86>
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	799b      	ldrb	r3, [r3, #6]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d120      	bne.n	8008842 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	6a3b      	ldr	r3, [r7, #32]
 8008806:	4413      	add	r3, r2
 8008808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	0151      	lsls	r1, r2, #5
 8008812:	6a3a      	ldr	r2, [r7, #32]
 8008814:	440a      	add	r2, r1
 8008816:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800881a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800881e:	60d3      	str	r3, [r2, #12]
 8008820:	e00f      	b.n	8008842 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	791b      	ldrb	r3, [r3, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10b      	bne.n	8008842 <USB_HC_StartXfer+0x86>
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	795b      	ldrb	r3, [r3, #5]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d107      	bne.n	8008842 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	785b      	ldrb	r3, [r3, #1]
 8008836:	4619      	mov	r1, r3
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f000 fb6b 	bl	8008f14 <USB_DoPing>
        return HAL_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	e232      	b.n	8008ca8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	799b      	ldrb	r3, [r3, #6]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d158      	bne.n	80088fc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800884a:	2301      	movs	r3, #1
 800884c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	78db      	ldrb	r3, [r3, #3]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d007      	beq.n	8008866 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008856:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	8a92      	ldrh	r2, [r2, #20]
 800885c:	fb03 f202 	mul.w	r2, r3, r2
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	61da      	str	r2, [r3, #28]
 8008864:	e07c      	b.n	8008960 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	7c9b      	ldrb	r3, [r3, #18]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d130      	bne.n	80088d0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	2bbc      	cmp	r3, #188	@ 0xbc
 8008874:	d918      	bls.n	80088a8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	8a9b      	ldrh	r3, [r3, #20]
 800887a:	461a      	mov	r2, r3
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	69da      	ldr	r2, [r3, #28]
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d003      	beq.n	8008898 <USB_HC_StartXfer+0xdc>
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	2b02      	cmp	r3, #2
 8008896:	d103      	bne.n	80088a0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2202      	movs	r2, #2
 800889c:	60da      	str	r2, [r3, #12]
 800889e:	e05f      	b.n	8008960 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	2201      	movs	r2, #1
 80088a4:	60da      	str	r2, [r3, #12]
 80088a6:	e05b      	b.n	8008960 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	6a1a      	ldr	r2, [r3, #32]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d007      	beq.n	80088c8 <USB_HC_StartXfer+0x10c>
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d003      	beq.n	80088c8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	2204      	movs	r2, #4
 80088c4:	60da      	str	r2, [r3, #12]
 80088c6:	e04b      	b.n	8008960 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	2203      	movs	r2, #3
 80088cc:	60da      	str	r2, [r3, #12]
 80088ce:	e047      	b.n	8008960 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80088d0:	79fb      	ldrb	r3, [r7, #7]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d10d      	bne.n	80088f2 <USB_HC_StartXfer+0x136>
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	8a92      	ldrh	r2, [r2, #20]
 80088de:	4293      	cmp	r3, r2
 80088e0:	d907      	bls.n	80088f2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80088e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	8a92      	ldrh	r2, [r2, #20]
 80088e8:	fb03 f202 	mul.w	r2, r3, r2
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	61da      	str	r2, [r3, #28]
 80088f0:	e036      	b.n	8008960 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	6a1a      	ldr	r2, [r3, #32]
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	61da      	str	r2, [r3, #28]
 80088fa:	e031      	b.n	8008960 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d018      	beq.n	8008936 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	6a1b      	ldr	r3, [r3, #32]
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	8a92      	ldrh	r2, [r2, #20]
 800890c:	4413      	add	r3, r2
 800890e:	3b01      	subs	r3, #1
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	8a92      	ldrh	r2, [r2, #20]
 8008914:	fbb3 f3f2 	udiv	r3, r3, r2
 8008918:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800891a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800891c:	8b7b      	ldrh	r3, [r7, #26]
 800891e:	429a      	cmp	r2, r3
 8008920:	d90b      	bls.n	800893a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008922:	8b7b      	ldrh	r3, [r7, #26]
 8008924:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008926:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	8a92      	ldrh	r2, [r2, #20]
 800892c:	fb03 f202 	mul.w	r2, r3, r2
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	61da      	str	r2, [r3, #28]
 8008934:	e001      	b.n	800893a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008936:	2301      	movs	r3, #1
 8008938:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	78db      	ldrb	r3, [r3, #3]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00a      	beq.n	8008958 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008942:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	8a92      	ldrh	r2, [r2, #20]
 8008948:	fb03 f202 	mul.w	r2, r3, r2
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	61da      	str	r2, [r3, #28]
 8008950:	e006      	b.n	8008960 <USB_HC_StartXfer+0x1a4>
 8008952:	bf00      	nop
 8008954:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	6a1a      	ldr	r2, [r3, #32]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	69db      	ldr	r3, [r3, #28]
 8008964:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008968:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800896a:	04d9      	lsls	r1, r3, #19
 800896c:	4ba3      	ldr	r3, [pc, #652]	@ (8008bfc <USB_HC_StartXfer+0x440>)
 800896e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008970:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	7d9b      	ldrb	r3, [r3, #22]
 8008976:	075b      	lsls	r3, r3, #29
 8008978:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800897c:	69f9      	ldr	r1, [r7, #28]
 800897e:	0148      	lsls	r0, r1, #5
 8008980:	6a39      	ldr	r1, [r7, #32]
 8008982:	4401      	add	r1, r0
 8008984:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008988:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800898a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800898c:	79fb      	ldrb	r3, [r7, #7]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d009      	beq.n	80089a6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	6999      	ldr	r1, [r3, #24]
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	4413      	add	r3, r2
 800899e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089a2:	460a      	mov	r2, r1
 80089a4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80089a6:	6a3b      	ldr	r3, [r7, #32]
 80089a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f003 0301 	and.w	r3, r3, #1
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	bf0c      	ite	eq
 80089b6:	2301      	moveq	r3, #1
 80089b8:	2300      	movne	r3, #0
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	015a      	lsls	r2, r3, #5
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	69fa      	ldr	r2, [r7, #28]
 80089ce:	0151      	lsls	r1, r2, #5
 80089d0:	6a3a      	ldr	r2, [r7, #32]
 80089d2:	440a      	add	r2, r1
 80089d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80089dc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	7e7b      	ldrb	r3, [r7, #25]
 80089ee:	075b      	lsls	r3, r3, #29
 80089f0:	69f9      	ldr	r1, [r7, #28]
 80089f2:	0148      	lsls	r0, r1, #5
 80089f4:	6a39      	ldr	r1, [r7, #32]
 80089f6:	4401      	add	r1, r0
 80089f8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80089fc:	4313      	orrs	r3, r2
 80089fe:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	799b      	ldrb	r3, [r3, #6]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	f040 80c3 	bne.w	8008b90 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	7c5b      	ldrb	r3, [r3, #17]
 8008a0e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008a14:	4313      	orrs	r3, r2
 8008a16:	69fa      	ldr	r2, [r7, #28]
 8008a18:	0151      	lsls	r1, r2, #5
 8008a1a:	6a3a      	ldr	r2, [r7, #32]
 8008a1c:	440a      	add	r2, r1
 8008a1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008a22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008a26:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	015a      	lsls	r2, r3, #5
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	4413      	add	r3, r2
 8008a30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	69fa      	ldr	r2, [r7, #28]
 8008a38:	0151      	lsls	r1, r2, #5
 8008a3a:	6a3a      	ldr	r2, [r7, #32]
 8008a3c:	440a      	add	r2, r1
 8008a3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a42:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008a46:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	79db      	ldrb	r3, [r3, #7]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d123      	bne.n	8008a98 <USB_HC_StartXfer+0x2dc>
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	78db      	ldrb	r3, [r3, #3]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d11f      	bne.n	8008a98 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	015a      	lsls	r2, r3, #5
 8008a5c:	6a3b      	ldr	r3, [r7, #32]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	69fa      	ldr	r2, [r7, #28]
 8008a68:	0151      	lsls	r1, r2, #5
 8008a6a:	6a3a      	ldr	r2, [r7, #32]
 8008a6c:	440a      	add	r2, r1
 8008a6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a76:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	015a      	lsls	r2, r3, #5
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	69fa      	ldr	r2, [r7, #28]
 8008a88:	0151      	lsls	r1, r2, #5
 8008a8a:	6a3a      	ldr	r2, [r7, #32]
 8008a8c:	440a      	add	r2, r1
 8008a8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a96:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	7c9b      	ldrb	r3, [r3, #18]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d003      	beq.n	8008aa8 <USB_HC_StartXfer+0x2ec>
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	7c9b      	ldrb	r3, [r3, #18]
 8008aa4:	2b03      	cmp	r3, #3
 8008aa6:	d117      	bne.n	8008ad8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d113      	bne.n	8008ad8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	78db      	ldrb	r3, [r3, #3]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d10f      	bne.n	8008ad8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	6a3b      	ldr	r3, [r7, #32]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	69fa      	ldr	r2, [r7, #28]
 8008ac8:	0151      	lsls	r1, r2, #5
 8008aca:	6a3a      	ldr	r2, [r7, #32]
 8008acc:	440a      	add	r2, r1
 8008ace:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ad6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	7c9b      	ldrb	r3, [r3, #18]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d162      	bne.n	8008ba6 <USB_HC_StartXfer+0x3ea>
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	78db      	ldrb	r3, [r3, #3]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d15e      	bne.n	8008ba6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	3b01      	subs	r3, #1
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d858      	bhi.n	8008ba4 <USB_HC_StartXfer+0x3e8>
 8008af2:	a201      	add	r2, pc, #4	@ (adr r2, 8008af8 <USB_HC_StartXfer+0x33c>)
 8008af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af8:	08008b09 	.word	0x08008b09
 8008afc:	08008b2b 	.word	0x08008b2b
 8008b00:	08008b4d 	.word	0x08008b4d
 8008b04:	08008b6f 	.word	0x08008b6f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	015a      	lsls	r2, r3, #5
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	4413      	add	r3, r2
 8008b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	69fa      	ldr	r2, [r7, #28]
 8008b18:	0151      	lsls	r1, r2, #5
 8008b1a:	6a3a      	ldr	r2, [r7, #32]
 8008b1c:	440a      	add	r2, r1
 8008b1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b26:	6053      	str	r3, [r2, #4]
          break;
 8008b28:	e03d      	b.n	8008ba6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	015a      	lsls	r2, r3, #5
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	4413      	add	r3, r2
 8008b32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	69fa      	ldr	r2, [r7, #28]
 8008b3a:	0151      	lsls	r1, r2, #5
 8008b3c:	6a3a      	ldr	r2, [r7, #32]
 8008b3e:	440a      	add	r2, r1
 8008b40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b44:	f043 030e 	orr.w	r3, r3, #14
 8008b48:	6053      	str	r3, [r2, #4]
          break;
 8008b4a:	e02c      	b.n	8008ba6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	015a      	lsls	r2, r3, #5
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	69fa      	ldr	r2, [r7, #28]
 8008b5c:	0151      	lsls	r1, r2, #5
 8008b5e:	6a3a      	ldr	r2, [r7, #32]
 8008b60:	440a      	add	r2, r1
 8008b62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b6a:	6053      	str	r3, [r2, #4]
          break;
 8008b6c:	e01b      	b.n	8008ba6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	69fa      	ldr	r2, [r7, #28]
 8008b7e:	0151      	lsls	r1, r2, #5
 8008b80:	6a3a      	ldr	r2, [r7, #32]
 8008b82:	440a      	add	r2, r1
 8008b84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b8c:	6053      	str	r3, [r2, #4]
          break;
 8008b8e:	e00a      	b.n	8008ba6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	015a      	lsls	r2, r3, #5
 8008b94:	6a3b      	ldr	r3, [r7, #32]
 8008b96:	4413      	add	r3, r2
 8008b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	6053      	str	r3, [r2, #4]
 8008ba2:	e000      	b.n	8008ba6 <USB_HC_StartXfer+0x3ea>
          break;
 8008ba4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	015a      	lsls	r2, r3, #5
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	4413      	add	r3, r2
 8008bae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008bbc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	78db      	ldrb	r3, [r3, #3]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d004      	beq.n	8008bd0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bcc:	613b      	str	r3, [r7, #16]
 8008bce:	e003      	b.n	8008bd8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008bd6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bde:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bec:	461a      	mov	r2, r3
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008bf2:	79fb      	ldrb	r3, [r7, #7]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d003      	beq.n	8008c00 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	e055      	b.n	8008ca8 <USB_HC_StartXfer+0x4ec>
 8008bfc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	78db      	ldrb	r3, [r3, #3]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d14e      	bne.n	8008ca6 <USB_HC_StartXfer+0x4ea>
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	6a1b      	ldr	r3, [r3, #32]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d04a      	beq.n	8008ca6 <USB_HC_StartXfer+0x4ea>
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	79db      	ldrb	r3, [r3, #7]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d146      	bne.n	8008ca6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	7c9b      	ldrb	r3, [r3, #18]
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	d831      	bhi.n	8008c84 <USB_HC_StartXfer+0x4c8>
 8008c20:	a201      	add	r2, pc, #4	@ (adr r2, 8008c28 <USB_HC_StartXfer+0x46c>)
 8008c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c26:	bf00      	nop
 8008c28:	08008c39 	.word	0x08008c39
 8008c2c:	08008c5d 	.word	0x08008c5d
 8008c30:	08008c39 	.word	0x08008c39
 8008c34:	08008c5d 	.word	0x08008c5d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	6a1b      	ldr	r3, [r3, #32]
 8008c3c:	3303      	adds	r3, #3
 8008c3e:	089b      	lsrs	r3, r3, #2
 8008c40:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008c42:	8afa      	ldrh	r2, [r7, #22]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d91c      	bls.n	8008c88 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	f043 0220 	orr.w	r2, r3, #32
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	619a      	str	r2, [r3, #24]
        }
        break;
 8008c5a:	e015      	b.n	8008c88 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	3303      	adds	r3, #3
 8008c62:	089b      	lsrs	r3, r3, #2
 8008c64:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008c66:	8afa      	ldrh	r2, [r7, #22]
 8008c68:	6a3b      	ldr	r3, [r7, #32]
 8008c6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d90a      	bls.n	8008c8c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	619a      	str	r2, [r3, #24]
        }
        break;
 8008c82:	e003      	b.n	8008c8c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008c84:	bf00      	nop
 8008c86:	e002      	b.n	8008c8e <USB_HC_StartXfer+0x4d2>
        break;
 8008c88:	bf00      	nop
 8008c8a:	e000      	b.n	8008c8e <USB_HC_StartXfer+0x4d2>
        break;
 8008c8c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	6999      	ldr	r1, [r3, #24]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	785a      	ldrb	r2, [r3, #1]
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	9000      	str	r0, [sp, #0]
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f7ff f9c3 	bl	800802c <USB_WritePacket>
  }

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3728      	adds	r7, #40	@ 0x28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	b29b      	uxth	r3, r3
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b089      	sub	sp, #36	@ 0x24
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008ce2:	78fb      	ldrb	r3, [r7, #3]
 8008ce4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	0c9b      	lsrs	r3, r3, #18
 8008cfa:	f003 0303 	and.w	r3, r3, #3
 8008cfe:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	0fdb      	lsrs	r3, r3, #31
 8008d10:	f003 0301 	and.w	r3, r3, #1
 8008d14:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	015a      	lsls	r2, r3, #5
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	0fdb      	lsrs	r3, r3, #31
 8008d26:	f003 0301 	and.w	r3, r3, #1
 8008d2a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	f003 0320 	and.w	r3, r3, #32
 8008d34:	2b20      	cmp	r3, #32
 8008d36:	d10d      	bne.n	8008d54 <USB_HC_Halt+0x82>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d10a      	bne.n	8008d54 <USB_HC_Halt+0x82>
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d005      	beq.n	8008d50 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d002      	beq.n	8008d50 <USB_HC_Halt+0x7e>
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d101      	bne.n	8008d54 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	e0d8      	b.n	8008f06 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d002      	beq.n	8008d60 <USB_HC_Halt+0x8e>
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d173      	bne.n	8008e48 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	69ba      	ldr	r2, [r7, #24]
 8008d70:	0151      	lsls	r1, r2, #5
 8008d72:	69fa      	ldr	r2, [r7, #28]
 8008d74:	440a      	add	r2, r1
 8008d76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d7e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	f003 0320 	and.w	r3, r3, #32
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d14a      	bne.n	8008e22 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d133      	bne.n	8008e00 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	015a      	lsls	r2, r3, #5
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	4413      	add	r3, r2
 8008da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	69ba      	ldr	r2, [r7, #24]
 8008da8:	0151      	lsls	r1, r2, #5
 8008daa:	69fa      	ldr	r2, [r7, #28]
 8008dac:	440a      	add	r2, r1
 8008dae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008db2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008db6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	015a      	lsls	r2, r3, #5
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	0151      	lsls	r1, r2, #5
 8008dca:	69fa      	ldr	r2, [r7, #28]
 8008dcc:	440a      	add	r2, r1
 8008dce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008dd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008dd6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008de4:	d82e      	bhi.n	8008e44 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	015a      	lsls	r2, r3, #5
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	4413      	add	r3, r2
 8008dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008df8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008dfc:	d0ec      	beq.n	8008dd8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008dfe:	e081      	b.n	8008f04 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	015a      	lsls	r2, r3, #5
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	69ba      	ldr	r2, [r7, #24]
 8008e10:	0151      	lsls	r1, r2, #5
 8008e12:	69fa      	ldr	r2, [r7, #28]
 8008e14:	440a      	add	r2, r1
 8008e16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e1e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e20:	e070      	b.n	8008f04 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	69ba      	ldr	r2, [r7, #24]
 8008e32:	0151      	lsls	r1, r2, #5
 8008e34:	69fa      	ldr	r2, [r7, #28]
 8008e36:	440a      	add	r2, r1
 8008e38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e40:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e42:	e05f      	b.n	8008f04 <USB_HC_Halt+0x232>
            break;
 8008e44:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e46:	e05d      	b.n	8008f04 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	015a      	lsls	r2, r3, #5
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	4413      	add	r3, r2
 8008e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	69ba      	ldr	r2, [r7, #24]
 8008e58:	0151      	lsls	r1, r2, #5
 8008e5a:	69fa      	ldr	r2, [r7, #28]
 8008e5c:	440a      	add	r2, r1
 8008e5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e66:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d133      	bne.n	8008ee0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	69ba      	ldr	r2, [r7, #24]
 8008e88:	0151      	lsls	r1, r2, #5
 8008e8a:	69fa      	ldr	r2, [r7, #28]
 8008e8c:	440a      	add	r2, r1
 8008e8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e96:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	015a      	lsls	r2, r3, #5
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	69ba      	ldr	r2, [r7, #24]
 8008ea8:	0151      	lsls	r1, r2, #5
 8008eaa:	69fa      	ldr	r2, [r7, #28]
 8008eac:	440a      	add	r2, r1
 8008eae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008eb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008eb6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ec4:	d81d      	bhi.n	8008f02 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008edc:	d0ec      	beq.n	8008eb8 <USB_HC_Halt+0x1e6>
 8008ede:	e011      	b.n	8008f04 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	015a      	lsls	r2, r3, #5
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	69ba      	ldr	r2, [r7, #24]
 8008ef0:	0151      	lsls	r1, r2, #5
 8008ef2:	69fa      	ldr	r2, [r7, #28]
 8008ef4:	440a      	add	r2, r1
 8008ef6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008efa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008efe:	6013      	str	r3, [r2, #0]
 8008f00:	e000      	b.n	8008f04 <USB_HC_Halt+0x232>
          break;
 8008f02:	bf00      	nop
    }
  }

  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3724      	adds	r7, #36	@ 0x24
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
	...

08008f14 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b087      	sub	sp, #28
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008f24:	78fb      	ldrb	r3, [r7, #3]
 8008f26:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	04da      	lsls	r2, r3, #19
 8008f30:	4b15      	ldr	r3, [pc, #84]	@ (8008f88 <USB_DoPing+0x74>)
 8008f32:	4013      	ands	r3, r2
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	0151      	lsls	r1, r2, #5
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	440a      	add	r2, r1
 8008f3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f44:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f5c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f64:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	015a      	lsls	r2, r3, #5
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f72:	461a      	mov	r2, r3
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	371c      	adds	r7, #28
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	1ff80000 	.word	0x1ff80000

08008f8c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b088      	sub	sp, #32
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7fe ff86 	bl	8007eb2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008fa6:	2110      	movs	r1, #16
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7fe ffdf 	bl	8007f6c <USB_FlushTxFifo>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f7ff f809 	bl	8007fd0 <USB_FlushRxFifo>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008fc8:	2300      	movs	r3, #0
 8008fca:	61bb      	str	r3, [r7, #24]
 8008fcc:	e01f      	b.n	800900e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	015a      	lsls	r2, r3, #5
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008fe4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ff4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009002:	461a      	mov	r2, r3
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	3301      	adds	r3, #1
 800900c:	61bb      	str	r3, [r7, #24]
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	2b0f      	cmp	r3, #15
 8009012:	d9dc      	bls.n	8008fce <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009014:	2300      	movs	r3, #0
 8009016:	61bb      	str	r3, [r7, #24]
 8009018:	e034      	b.n	8009084 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	015a      	lsls	r2, r3, #5
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	4413      	add	r3, r2
 8009022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009030:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009038:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009040:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	015a      	lsls	r2, r3, #5
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	4413      	add	r3, r2
 800904a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800904e:	461a      	mov	r2, r3
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	3301      	adds	r3, #1
 8009058:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009060:	d80c      	bhi.n	800907c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	015a      	lsls	r2, r3, #5
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	4413      	add	r3, r2
 800906a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009074:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009078:	d0ec      	beq.n	8009054 <USB_StopHost+0xc8>
 800907a:	e000      	b.n	800907e <USB_StopHost+0xf2>
        break;
 800907c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	3301      	adds	r3, #1
 8009082:	61bb      	str	r3, [r7, #24]
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	2b0f      	cmp	r3, #15
 8009088:	d9c7      	bls.n	800901a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009090:	461a      	mov	r2, r3
 8009092:	f04f 33ff 	mov.w	r3, #4294967295
 8009096:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f04f 32ff 	mov.w	r2, #4294967295
 800909e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7fe fef5 	bl	8007e90 <USB_EnableGlobalInt>

  return ret;
 80090a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3720      	adds	r7, #32
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80090b0:	b590      	push	{r4, r7, lr}
 80090b2:	b089      	sub	sp, #36	@ 0x24
 80090b4:	af04      	add	r7, sp, #16
 80090b6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80090b8:	2301      	movs	r3, #1
 80090ba:	2202      	movs	r2, #2
 80090bc:	2102      	movs	r1, #2
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fc83 	bl	80099ca <USBH_FindInterface>
 80090c4:	4603      	mov	r3, r0
 80090c6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
 80090ca:	2bff      	cmp	r3, #255	@ 0xff
 80090cc:	d002      	beq.n	80090d4 <USBH_CDC_InterfaceInit+0x24>
 80090ce:	7bfb      	ldrb	r3, [r7, #15]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d901      	bls.n	80090d8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80090d4:	2302      	movs	r3, #2
 80090d6:	e13d      	b.n	8009354 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	4619      	mov	r1, r3
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 fc58 	bl	8009992 <USBH_SelectInterface>
 80090e2:	4603      	mov	r3, r0
 80090e4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80090e6:	7bbb      	ldrb	r3, [r7, #14]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d001      	beq.n	80090f0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80090ec:	2302      	movs	r3, #2
 80090ee:	e131      	b.n	8009354 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80090f6:	2050      	movs	r0, #80	@ 0x50
 80090f8:	f002 fb58 	bl	800b7ac <malloc>
 80090fc:	4603      	mov	r3, r0
 80090fe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009106:	69db      	ldr	r3, [r3, #28]
 8009108:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d101      	bne.n	8009114 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009110:	2302      	movs	r3, #2
 8009112:	e11f      	b.n	8009354 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009114:	2250      	movs	r2, #80	@ 0x50
 8009116:	2100      	movs	r1, #0
 8009118:	68b8      	ldr	r0, [r7, #8]
 800911a:	f003 f982 	bl	800c422 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800911e:	7bfb      	ldrb	r3, [r7, #15]
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	211a      	movs	r1, #26
 8009124:	fb01 f303 	mul.w	r3, r1, r3
 8009128:	4413      	add	r3, r2
 800912a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	b25b      	sxtb	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	da15      	bge.n	8009162 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009136:	7bfb      	ldrb	r3, [r7, #15]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	211a      	movs	r1, #26
 800913c:	fb01 f303 	mul.w	r3, r1, r3
 8009140:	4413      	add	r3, r2
 8009142:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009146:	781a      	ldrb	r2, [r3, #0]
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800914c:	7bfb      	ldrb	r3, [r7, #15]
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	211a      	movs	r1, #26
 8009152:	fb01 f303 	mul.w	r3, r1, r3
 8009156:	4413      	add	r3, r2
 8009158:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800915c:	881a      	ldrh	r2, [r3, #0]
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	785b      	ldrb	r3, [r3, #1]
 8009166:	4619      	mov	r1, r3
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f001 ffc4 	bl	800b0f6 <USBH_AllocPipe>
 800916e:	4603      	mov	r3, r0
 8009170:	461a      	mov	r2, r3
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	7819      	ldrb	r1, [r3, #0]
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	7858      	ldrb	r0, [r3, #1]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	8952      	ldrh	r2, [r2, #10]
 800918e:	9202      	str	r2, [sp, #8]
 8009190:	2203      	movs	r2, #3
 8009192:	9201      	str	r2, [sp, #4]
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	4623      	mov	r3, r4
 8009198:	4602      	mov	r2, r0
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f001 ff7c 	bl	800b098 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	2200      	movs	r2, #0
 80091a6:	4619      	mov	r1, r3
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f002 fa79 	bl	800b6a0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80091ae:	2300      	movs	r3, #0
 80091b0:	2200      	movs	r2, #0
 80091b2:	210a      	movs	r1, #10
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fc08 	bl	80099ca <USBH_FindInterface>
 80091ba:	4603      	mov	r3, r0
 80091bc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	2bff      	cmp	r3, #255	@ 0xff
 80091c2:	d002      	beq.n	80091ca <USBH_CDC_InterfaceInit+0x11a>
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d901      	bls.n	80091ce <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80091ca:	2302      	movs	r3, #2
 80091cc:	e0c2      	b.n	8009354 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	211a      	movs	r1, #26
 80091d4:	fb01 f303 	mul.w	r3, r1, r3
 80091d8:	4413      	add	r3, r2
 80091da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	b25b      	sxtb	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	da16      	bge.n	8009214 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	211a      	movs	r1, #26
 80091ec:	fb01 f303 	mul.w	r3, r1, r3
 80091f0:	4413      	add	r3, r2
 80091f2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80091f6:	781a      	ldrb	r2, [r3, #0]
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	211a      	movs	r1, #26
 8009202:	fb01 f303 	mul.w	r3, r1, r3
 8009206:	4413      	add	r3, r2
 8009208:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800920c:	881a      	ldrh	r2, [r3, #0]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	835a      	strh	r2, [r3, #26]
 8009212:	e015      	b.n	8009240 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009214:	7bfb      	ldrb	r3, [r7, #15]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	211a      	movs	r1, #26
 800921a:	fb01 f303 	mul.w	r3, r1, r3
 800921e:	4413      	add	r3, r2
 8009220:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009224:	781a      	ldrb	r2, [r3, #0]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800922a:	7bfb      	ldrb	r3, [r7, #15]
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	211a      	movs	r1, #26
 8009230:	fb01 f303 	mul.w	r3, r1, r3
 8009234:	4413      	add	r3, r2
 8009236:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800923a:	881a      	ldrh	r2, [r3, #0]
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009240:	7bfb      	ldrb	r3, [r7, #15]
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	211a      	movs	r1, #26
 8009246:	fb01 f303 	mul.w	r3, r1, r3
 800924a:	4413      	add	r3, r2
 800924c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	b25b      	sxtb	r3, r3
 8009254:	2b00      	cmp	r3, #0
 8009256:	da16      	bge.n	8009286 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009258:	7bfb      	ldrb	r3, [r7, #15]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	211a      	movs	r1, #26
 800925e:	fb01 f303 	mul.w	r3, r1, r3
 8009262:	4413      	add	r3, r2
 8009264:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009268:	781a      	ldrb	r2, [r3, #0]
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800926e:	7bfb      	ldrb	r3, [r7, #15]
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	211a      	movs	r1, #26
 8009274:	fb01 f303 	mul.w	r3, r1, r3
 8009278:	4413      	add	r3, r2
 800927a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800927e:	881a      	ldrh	r2, [r3, #0]
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	835a      	strh	r2, [r3, #26]
 8009284:	e015      	b.n	80092b2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009286:	7bfb      	ldrb	r3, [r7, #15]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	211a      	movs	r1, #26
 800928c:	fb01 f303 	mul.w	r3, r1, r3
 8009290:	4413      	add	r3, r2
 8009292:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009296:	781a      	ldrb	r2, [r3, #0]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	211a      	movs	r1, #26
 80092a2:	fb01 f303 	mul.w	r3, r1, r3
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80092ac:	881a      	ldrh	r2, [r3, #0]
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	7b9b      	ldrb	r3, [r3, #14]
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f001 ff1c 	bl	800b0f6 <USBH_AllocPipe>
 80092be:	4603      	mov	r3, r0
 80092c0:	461a      	mov	r2, r3
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	7bdb      	ldrb	r3, [r3, #15]
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f001 ff12 	bl	800b0f6 <USBH_AllocPipe>
 80092d2:	4603      	mov	r3, r0
 80092d4:	461a      	mov	r2, r3
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	7b59      	ldrb	r1, [r3, #13]
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	7b98      	ldrb	r0, [r3, #14]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	8b12      	ldrh	r2, [r2, #24]
 80092f2:	9202      	str	r2, [sp, #8]
 80092f4:	2202      	movs	r2, #2
 80092f6:	9201      	str	r2, [sp, #4]
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	4623      	mov	r3, r4
 80092fc:	4602      	mov	r2, r0
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f001 feca 	bl	800b098 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	7b19      	ldrb	r1, [r3, #12]
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	7bd8      	ldrb	r0, [r3, #15]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	8b52      	ldrh	r2, [r2, #26]
 800931c:	9202      	str	r2, [sp, #8]
 800931e:	2202      	movs	r2, #2
 8009320:	9201      	str	r2, [sp, #4]
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	4623      	mov	r3, r4
 8009326:	4602      	mov	r2, r0
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f001 feb5 	bl	800b098 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	7b5b      	ldrb	r3, [r3, #13]
 800933a:	2200      	movs	r2, #0
 800933c:	4619      	mov	r1, r3
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f002 f9ae 	bl	800b6a0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	7b1b      	ldrb	r3, [r3, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	4619      	mov	r1, r3
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f002 f9a7 	bl	800b6a0 <USBH_LL_SetToggle>

  return USBH_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3714      	adds	r7, #20
 8009358:	46bd      	mov	sp, r7
 800935a:	bd90      	pop	{r4, r7, pc}

0800935c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800936a:	69db      	ldr	r3, [r3, #28]
 800936c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00e      	beq.n	8009394 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	4619      	mov	r1, r3
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f001 feaa 	bl	800b0d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	4619      	mov	r1, r3
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f001 fed5 	bl	800b138 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	7b1b      	ldrb	r3, [r3, #12]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00e      	beq.n	80093ba <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	7b1b      	ldrb	r3, [r3, #12]
 80093a0:	4619      	mov	r1, r3
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f001 fe97 	bl	800b0d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	7b1b      	ldrb	r3, [r3, #12]
 80093ac:	4619      	mov	r1, r3
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f001 fec2 	bl	800b138 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2200      	movs	r2, #0
 80093b8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	7b5b      	ldrb	r3, [r3, #13]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00e      	beq.n	80093e0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	7b5b      	ldrb	r3, [r3, #13]
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f001 fe84 	bl	800b0d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	7b5b      	ldrb	r3, [r3, #13]
 80093d2:	4619      	mov	r1, r3
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f001 feaf 	bl	800b138 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093e6:	69db      	ldr	r3, [r3, #28]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00b      	beq.n	8009404 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093f2:	69db      	ldr	r3, [r3, #28]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f002 f9e1 	bl	800b7bc <free>
    phost->pActiveClass->pData = 0U;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009400:	2200      	movs	r2, #0
 8009402:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b084      	sub	sp, #16
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	3340      	adds	r3, #64	@ 0x40
 8009424:	4619      	mov	r1, r3
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 f8b1 	bl	800958e <GetLineCoding>
 800942c:	4603      	mov	r3, r0
 800942e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009430:	7afb      	ldrb	r3, [r7, #11]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d105      	bne.n	8009442 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800943c:	2102      	movs	r1, #2
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009442:	7afb      	ldrb	r3, [r7, #11]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009454:	2301      	movs	r3, #1
 8009456:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009462:	69db      	ldr	r3, [r3, #28]
 8009464:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800946c:	2b04      	cmp	r3, #4
 800946e:	d877      	bhi.n	8009560 <USBH_CDC_Process+0x114>
 8009470:	a201      	add	r2, pc, #4	@ (adr r2, 8009478 <USBH_CDC_Process+0x2c>)
 8009472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009476:	bf00      	nop
 8009478:	0800948d 	.word	0x0800948d
 800947c:	08009493 	.word	0x08009493
 8009480:	080094c3 	.word	0x080094c3
 8009484:	08009537 	.word	0x08009537
 8009488:	08009545 	.word	0x08009545
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	73fb      	strb	r3, [r7, #15]
      break;
 8009490:	e06d      	b.n	800956e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009496:	4619      	mov	r1, r3
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f897 	bl	80095cc <SetLineCoding>
 800949e:	4603      	mov	r3, r0
 80094a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80094a2:	7bbb      	ldrb	r3, [r7, #14]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d104      	bne.n	80094b2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	2202      	movs	r2, #2
 80094ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80094b0:	e058      	b.n	8009564 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80094b2:	7bbb      	ldrb	r3, [r7, #14]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d055      	beq.n	8009564 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	2204      	movs	r2, #4
 80094bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80094c0:	e050      	b.n	8009564 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	3340      	adds	r3, #64	@ 0x40
 80094c6:	4619      	mov	r1, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f860 	bl	800958e <GetLineCoding>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80094d2:	7bbb      	ldrb	r3, [r7, #14]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d126      	bne.n	8009526 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094ea:	791b      	ldrb	r3, [r3, #4]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d13b      	bne.n	8009568 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094fa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d133      	bne.n	8009568 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800950a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800950c:	429a      	cmp	r2, r3
 800950e:	d12b      	bne.n	8009568 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009518:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800951a:	429a      	cmp	r2, r3
 800951c:	d124      	bne.n	8009568 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f958 	bl	80097d4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009524:	e020      	b.n	8009568 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009526:	7bbb      	ldrb	r3, [r7, #14]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d01d      	beq.n	8009568 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	2204      	movs	r2, #4
 8009530:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009534:	e018      	b.n	8009568 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f867 	bl	800960a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f8da 	bl	80096f6 <CDC_ProcessReception>
      break;
 8009542:	e014      	b.n	800956e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009544:	2100      	movs	r1, #0
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f001 f81e 	bl	800a588 <USBH_ClrFeature>
 800954c:	4603      	mov	r3, r0
 800954e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009550:	7bbb      	ldrb	r3, [r7, #14]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d10a      	bne.n	800956c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800955e:	e005      	b.n	800956c <USBH_CDC_Process+0x120>

    default:
      break;
 8009560:	bf00      	nop
 8009562:	e004      	b.n	800956e <USBH_CDC_Process+0x122>
      break;
 8009564:	bf00      	nop
 8009566:	e002      	b.n	800956e <USBH_CDC_Process+0x122>
      break;
 8009568:	bf00      	nop
 800956a:	e000      	b.n	800956e <USBH_CDC_Process+0x122>
      break;
 800956c:	bf00      	nop

  }

  return status;
 800956e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b082      	sub	sp, #8
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	22a1      	movs	r2, #161	@ 0xa1
 800959c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2221      	movs	r2, #33	@ 0x21
 80095a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2207      	movs	r2, #7
 80095b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2207      	movs	r2, #7
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f001 fb17 	bl	800abf0 <USBH_CtlReq>
 80095c2:	4603      	mov	r3, r0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2221      	movs	r2, #33	@ 0x21
 80095da:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2220      	movs	r2, #32
 80095e0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2207      	movs	r2, #7
 80095f2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	2207      	movs	r2, #7
 80095f8:	4619      	mov	r1, r3
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f001 faf8 	bl	800abf0 <USBH_CtlReq>
 8009600:	4603      	mov	r3, r0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b086      	sub	sp, #24
 800960e:	af02      	add	r7, sp, #8
 8009610:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009618:	69db      	ldr	r3, [r3, #28]
 800961a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800961c:	2300      	movs	r3, #0
 800961e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009626:	2b01      	cmp	r3, #1
 8009628:	d002      	beq.n	8009630 <CDC_ProcessTransmission+0x26>
 800962a:	2b02      	cmp	r3, #2
 800962c:	d023      	beq.n	8009676 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800962e:	e05e      	b.n	80096ee <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	8b12      	ldrh	r2, [r2, #24]
 8009638:	4293      	cmp	r3, r2
 800963a:	d90b      	bls.n	8009654 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	69d9      	ldr	r1, [r3, #28]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	8b1a      	ldrh	r2, [r3, #24]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	7b5b      	ldrb	r3, [r3, #13]
 8009648:	2001      	movs	r0, #1
 800964a:	9000      	str	r0, [sp, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f001 fce0 	bl	800b012 <USBH_BulkSendData>
 8009652:	e00b      	b.n	800966c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800965c:	b29a      	uxth	r2, r3
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	7b5b      	ldrb	r3, [r3, #13]
 8009662:	2001      	movs	r0, #1
 8009664:	9000      	str	r0, [sp, #0]
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f001 fcd3 	bl	800b012 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2202      	movs	r2, #2
 8009670:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009674:	e03b      	b.n	80096ee <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	7b5b      	ldrb	r3, [r3, #13]
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f001 ffe5 	bl	800b64c <USBH_LL_GetURBState>
 8009682:	4603      	mov	r3, r0
 8009684:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009686:	7afb      	ldrb	r3, [r7, #11]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d128      	bne.n	80096de <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	8b12      	ldrh	r2, [r2, #24]
 8009694:	4293      	cmp	r3, r2
 8009696:	d90e      	bls.n	80096b6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	8b12      	ldrh	r2, [r2, #24]
 80096a0:	1a9a      	subs	r2, r3, r2
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	69db      	ldr	r3, [r3, #28]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	8b12      	ldrh	r2, [r2, #24]
 80096ae:	441a      	add	r2, r3
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	61da      	str	r2, [r3, #28]
 80096b4:	e002      	b.n	80096bc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d004      	beq.n	80096ce <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80096cc:	e00e      	b.n	80096ec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f868 	bl	80097ac <USBH_CDC_TransmitCallback>
      break;
 80096dc:	e006      	b.n	80096ec <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80096de:	7afb      	ldrb	r3, [r7, #11]
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d103      	bne.n	80096ec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80096ec:	bf00      	nop
  }
}
 80096ee:	bf00      	nop
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b086      	sub	sp, #24
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009704:	69db      	ldr	r3, [r3, #28]
 8009706:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009708:	2300      	movs	r3, #0
 800970a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009712:	2b03      	cmp	r3, #3
 8009714:	d002      	beq.n	800971c <CDC_ProcessReception+0x26>
 8009716:	2b04      	cmp	r3, #4
 8009718:	d00e      	beq.n	8009738 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800971a:	e043      	b.n	80097a4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	6a19      	ldr	r1, [r3, #32]
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	8b5a      	ldrh	r2, [r3, #26]
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	7b1b      	ldrb	r3, [r3, #12]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f001 fc97 	bl	800b05c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	2204      	movs	r2, #4
 8009732:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009736:	e035      	b.n	80097a4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	7b1b      	ldrb	r3, [r3, #12]
 800973c:	4619      	mov	r1, r3
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f001 ff84 	bl	800b64c <USBH_LL_GetURBState>
 8009744:	4603      	mov	r3, r0
 8009746:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009748:	7cfb      	ldrb	r3, [r7, #19]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d129      	bne.n	80097a2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	7b1b      	ldrb	r3, [r3, #12]
 8009752:	4619      	mov	r1, r3
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f001 fef9 	bl	800b54c <USBH_LL_GetLastXferSize>
 800975a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	429a      	cmp	r2, r3
 8009764:	d016      	beq.n	8009794 <CDC_ProcessReception+0x9e>
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	8b5b      	ldrh	r3, [r3, #26]
 800976a:	461a      	mov	r2, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	4293      	cmp	r3, r2
 8009770:	d110      	bne.n	8009794 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	1ad2      	subs	r2, r2, r3
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	6a1a      	ldr	r2, [r3, #32]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	441a      	add	r2, r3
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2203      	movs	r2, #3
 800978e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009792:	e006      	b.n	80097a2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f80f 	bl	80097c0 <USBH_CDC_ReceiveCallback>
      break;
 80097a2:	bf00      	nop
  }
}
 80097a4:	bf00      	nop
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80097b4:	bf00      	nop
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80097c8:	bf00      	nop
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	4613      	mov	r3, r2
 80097f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d101      	bne.n	8009800 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80097fc:	2302      	movs	r3, #2
 80097fe:	e029      	b.n	8009854 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	79fa      	ldrb	r2, [r7, #7]
 8009804:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2200      	movs	r2, #0
 8009814:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f000 f81f 	bl	800985c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d003      	beq.n	800984c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f001 fdc9 	bl	800b3e4 <USBH_LL_Init>

  return USBH_OK;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009864:	2300      	movs	r3, #0
 8009866:	60fb      	str	r3, [r7, #12]
 8009868:	e009      	b.n	800987e <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	33e0      	adds	r3, #224	@ 0xe0
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4413      	add	r3, r2
 8009874:	2200      	movs	r2, #0
 8009876:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	3301      	adds	r3, #1
 800987c:	60fb      	str	r3, [r7, #12]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2b0f      	cmp	r3, #15
 8009882:	d9f2      	bls.n	800986a <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009884:	2300      	movs	r3, #0
 8009886:	60fb      	str	r3, [r7, #12]
 8009888:	e009      	b.n	800989e <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	4413      	add	r3, r2
 8009890:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009894:	2200      	movs	r2, #0
 8009896:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	3301      	adds	r3, #1
 800989c:	60fb      	str	r3, [r7, #12]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098a4:	d3f1      	bcc.n	800988a <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2240      	movs	r2, #64	@ 0x40
 80098ca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	331c      	adds	r3, #28
 80098f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80098fa:	2100      	movs	r1, #0
 80098fc:	4618      	mov	r0, r3
 80098fe:	f002 fd90 	bl	800c422 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800990c:	2100      	movs	r1, #0
 800990e:	4618      	mov	r0, r3
 8009910:	f002 fd87 	bl	800c422 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800991a:	2212      	movs	r2, #18
 800991c:	2100      	movs	r1, #0
 800991e:	4618      	mov	r0, r3
 8009920:	f002 fd7f 	bl	800c422 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800992a:	223e      	movs	r2, #62	@ 0x3e
 800992c:	2100      	movs	r1, #0
 800992e:	4618      	mov	r0, r3
 8009930:	f002 fd77 	bl	800c422 <memset>

  return USBH_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800993e:	b480      	push	{r7}
 8009940:	b085      	sub	sp, #20
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009948:	2300      	movs	r3, #0
 800994a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d016      	beq.n	8009980 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10e      	bne.n	800997a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009962:	1c59      	adds	r1, r3, #1
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	33de      	adds	r3, #222	@ 0xde
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	73fb      	strb	r3, [r7, #15]
 8009978:	e004      	b.n	8009984 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800997a:	2302      	movs	r3, #2
 800997c:	73fb      	strb	r3, [r7, #15]
 800997e:	e001      	b.n	8009984 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009980:	2302      	movs	r3, #2
 8009982:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009984:	7bfb      	ldrb	r3, [r7, #15]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr

08009992 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009992:	b480      	push	{r7}
 8009994:	b085      	sub	sp, #20
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
 800999a:	460b      	mov	r3, r1
 800999c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800999e:	2300      	movs	r3, #0
 80099a0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80099a8:	78fa      	ldrb	r2, [r7, #3]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d204      	bcs.n	80099b8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	78fa      	ldrb	r2, [r7, #3]
 80099b2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80099b6:	e001      	b.n	80099bc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80099b8:	2302      	movs	r3, #2
 80099ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80099ca:	b480      	push	{r7}
 80099cc:	b087      	sub	sp, #28
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	4608      	mov	r0, r1
 80099d4:	4611      	mov	r1, r2
 80099d6:	461a      	mov	r2, r3
 80099d8:	4603      	mov	r3, r0
 80099da:	70fb      	strb	r3, [r7, #3]
 80099dc:	460b      	mov	r3, r1
 80099de:	70bb      	strb	r3, [r7, #2]
 80099e0:	4613      	mov	r3, r2
 80099e2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80099e4:	2300      	movs	r3, #0
 80099e6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80099e8:	2300      	movs	r3, #0
 80099ea:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80099f2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80099f4:	e025      	b.n	8009a42 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
 80099f8:	221a      	movs	r2, #26
 80099fa:	fb02 f303 	mul.w	r3, r2, r3
 80099fe:	3308      	adds	r3, #8
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	4413      	add	r3, r2
 8009a04:	3302      	adds	r3, #2
 8009a06:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	795b      	ldrb	r3, [r3, #5]
 8009a0c:	78fa      	ldrb	r2, [r7, #3]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d002      	beq.n	8009a18 <USBH_FindInterface+0x4e>
 8009a12:	78fb      	ldrb	r3, [r7, #3]
 8009a14:	2bff      	cmp	r3, #255	@ 0xff
 8009a16:	d111      	bne.n	8009a3c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009a1c:	78ba      	ldrb	r2, [r7, #2]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d002      	beq.n	8009a28 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009a22:	78bb      	ldrb	r3, [r7, #2]
 8009a24:	2bff      	cmp	r3, #255	@ 0xff
 8009a26:	d109      	bne.n	8009a3c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009a2c:	787a      	ldrb	r2, [r7, #1]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d002      	beq.n	8009a38 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009a32:	787b      	ldrb	r3, [r7, #1]
 8009a34:	2bff      	cmp	r3, #255	@ 0xff
 8009a36:	d101      	bne.n	8009a3c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009a38:	7dfb      	ldrb	r3, [r7, #23]
 8009a3a:	e006      	b.n	8009a4a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009a3c:	7dfb      	ldrb	r3, [r7, #23]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009a42:	7dfb      	ldrb	r3, [r7, #23]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d9d6      	bls.n	80099f6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009a48:	23ff      	movs	r3, #255	@ 0xff
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	371c      	adds	r7, #28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f001 fcfc 	bl	800b45c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009a64:	2101      	movs	r1, #1
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f001 fe03 	bl	800b672 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b088      	sub	sp, #32
 8009a7c:	af04      	add	r7, sp, #16
 8009a7e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009a80:	2302      	movs	r3, #2
 8009a82:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009a84:	2300      	movs	r3, #0
 8009a86:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d102      	bne.n	8009a9a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2203      	movs	r2, #3
 8009a98:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b0b      	cmp	r3, #11
 8009aa2:	f200 81bc 	bhi.w	8009e1e <USBH_Process+0x3a6>
 8009aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8009aac <USBH_Process+0x34>)
 8009aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aac:	08009add 	.word	0x08009add
 8009ab0:	08009b0f 	.word	0x08009b0f
 8009ab4:	08009b79 	.word	0x08009b79
 8009ab8:	08009db9 	.word	0x08009db9
 8009abc:	08009e1f 	.word	0x08009e1f
 8009ac0:	08009c19 	.word	0x08009c19
 8009ac4:	08009d5f 	.word	0x08009d5f
 8009ac8:	08009c4f 	.word	0x08009c4f
 8009acc:	08009c6f 	.word	0x08009c6f
 8009ad0:	08009c8d 	.word	0x08009c8d
 8009ad4:	08009cd1 	.word	0x08009cd1
 8009ad8:	08009da1 	.word	0x08009da1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 819c 	beq.w	8009e22 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2201      	movs	r2, #1
 8009aee:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009af0:	20c8      	movs	r0, #200	@ 0xc8
 8009af2:	f001 fe08 	bl	800b706 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f001 fd0d 	bl	800b516 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009b0c:	e189      	b.n	8009e22 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d107      	bne.n	8009b2a <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2202      	movs	r2, #2
 8009b26:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009b28:	e18a      	b.n	8009e40 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009b30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b34:	d914      	bls.n	8009b60 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	b2da      	uxtb	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009b4c:	2b03      	cmp	r3, #3
 8009b4e:	d903      	bls.n	8009b58 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	220d      	movs	r2, #13
 8009b54:	701a      	strb	r2, [r3, #0]
      break;
 8009b56:	e173      	b.n	8009e40 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	701a      	strb	r2, [r3, #0]
      break;
 8009b5e:	e16f      	b.n	8009e40 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009b66:	f103 020a 	add.w	r2, r3, #10
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009b70:	200a      	movs	r0, #10
 8009b72:	f001 fdc8 	bl	800b706 <USBH_Delay>
      break;
 8009b76:	e163      	b.n	8009e40 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d005      	beq.n	8009b8e <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b88:	2104      	movs	r1, #4
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009b8e:	2064      	movs	r0, #100	@ 0x64
 8009b90:	f001 fdb9 	bl	800b706 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f001 fc97 	bl	800b4c8 <USBH_LL_GetSpeed>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2205      	movs	r2, #5
 8009ba8:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009baa:	2100      	movs	r1, #0
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f001 faa2 	bl	800b0f6 <USBH_AllocPipe>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009bba:	2180      	movs	r1, #128	@ 0x80
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f001 fa9a 	bl	800b0f6 <USBH_AllocPipe>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	7919      	ldrb	r1, [r3, #4]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009bde:	9202      	str	r2, [sp, #8]
 8009be0:	2200      	movs	r2, #0
 8009be2:	9201      	str	r2, [sp, #4]
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	4603      	mov	r3, r0
 8009be8:	2280      	movs	r2, #128	@ 0x80
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f001 fa54 	bl	800b098 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	7959      	ldrb	r1, [r3, #5]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009c04:	9202      	str	r2, [sp, #8]
 8009c06:	2200      	movs	r2, #0
 8009c08:	9201      	str	r2, [sp, #4]
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2200      	movs	r2, #0
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f001 fa41 	bl	800b098 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009c16:	e113      	b.n	8009e40 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f917 	bl	8009e4c <USBH_HandleEnum>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009c22:	7bbb      	ldrb	r3, [r7, #14]
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f040 80fd 	bne.w	8009e26 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d103      	bne.n	8009c46 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2208      	movs	r2, #8
 8009c42:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009c44:	e0ef      	b.n	8009e26 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2207      	movs	r2, #7
 8009c4a:	701a      	strb	r2, [r3, #0]
      break;
 8009c4c:	e0eb      	b.n	8009e26 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f000 80e8 	beq.w	8009e2a <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c60:	2101      	movs	r1, #1
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2208      	movs	r2, #8
 8009c6a:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8009c6c:	e0dd      	b.n	8009e2a <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009c74:	4619      	mov	r1, r3
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fc3f 	bl	800a4fa <USBH_SetCfg>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f040 80d5 	bne.w	8009e2e <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2209      	movs	r2, #9
 8009c88:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009c8a:	e0d0      	b.n	8009e2e <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009c92:	f003 0320 	and.w	r3, r3, #32
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d016      	beq.n	8009cc8 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009c9a:	2101      	movs	r1, #1
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fc4f 	bl	800a540 <USBH_SetFeature>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009ca6:	7bbb      	ldrb	r3, [r7, #14]
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d103      	bne.n	8009cb6 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	220a      	movs	r2, #10
 8009cb2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009cb4:	e0bd      	b.n	8009e32 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8009cb6:	7bbb      	ldrb	r3, [r7, #14]
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b03      	cmp	r3, #3
 8009cbc:	f040 80b9 	bne.w	8009e32 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	220a      	movs	r2, #10
 8009cc4:	701a      	strb	r2, [r3, #0]
      break;
 8009cc6:	e0b4      	b.n	8009e32 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	220a      	movs	r2, #10
 8009ccc:	701a      	strb	r2, [r3, #0]
      break;
 8009cce:	e0b0      	b.n	8009e32 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f000 80ad 	beq.w	8009e36 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	73fb      	strb	r3, [r7, #15]
 8009ce8:	e016      	b.n	8009d18 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009cea:	7bfa      	ldrb	r2, [r7, #15]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	32de      	adds	r2, #222	@ 0xde
 8009cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cf4:	791a      	ldrb	r2, [r3, #4]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d108      	bne.n	8009d12 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009d00:	7bfa      	ldrb	r2, [r7, #15]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	32de      	adds	r2, #222	@ 0xde
 8009d06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009d10:	e005      	b.n	8009d1e <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009d12:	7bfb      	ldrb	r3, [r7, #15]
 8009d14:	3301      	adds	r3, #1
 8009d16:	73fb      	strb	r3, [r7, #15]
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d0e5      	beq.n	8009cea <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d016      	beq.n	8009d56 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	4798      	blx	r3
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d109      	bne.n	8009d4e <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2206      	movs	r2, #6
 8009d3e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d46:	2103      	movs	r1, #3
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009d4c:	e073      	b.n	8009e36 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	220d      	movs	r2, #13
 8009d52:	701a      	strb	r2, [r3, #0]
      break;
 8009d54:	e06f      	b.n	8009e36 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	220d      	movs	r2, #13
 8009d5a:	701a      	strb	r2, [r3, #0]
      break;
 8009d5c:	e06b      	b.n	8009e36 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d017      	beq.n	8009d98 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	4798      	blx	r3
 8009d74:	4603      	mov	r3, r0
 8009d76:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009d78:	7bbb      	ldrb	r3, [r7, #14]
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d103      	bne.n	8009d88 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	220b      	movs	r2, #11
 8009d84:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009d86:	e058      	b.n	8009e3a <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8009d88:	7bbb      	ldrb	r3, [r7, #14]
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d154      	bne.n	8009e3a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	220d      	movs	r2, #13
 8009d94:	701a      	strb	r2, [r3, #0]
      break;
 8009d96:	e050      	b.n	8009e3a <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	220d      	movs	r2, #13
 8009d9c:	701a      	strb	r2, [r3, #0]
      break;
 8009d9e:	e04c      	b.n	8009e3a <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d049      	beq.n	8009e3e <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009db0:	695b      	ldr	r3, [r3, #20]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	4798      	blx	r3
      }
      break;
 8009db6:	e042      	b.n	8009e3e <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7ff fd4b 	bl	800985c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d009      	beq.n	8009de4 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d005      	beq.n	8009dfa <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009df4:	2105      	movs	r1, #5
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d107      	bne.n	8009e16 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7ff fe21 	bl	8009a56 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009e14:	e014      	b.n	8009e40 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f001 fb20 	bl	800b45c <USBH_LL_Start>
      break;
 8009e1c:	e010      	b.n	8009e40 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8009e1e:	bf00      	nop
 8009e20:	e00e      	b.n	8009e40 <USBH_Process+0x3c8>
      break;
 8009e22:	bf00      	nop
 8009e24:	e00c      	b.n	8009e40 <USBH_Process+0x3c8>
      break;
 8009e26:	bf00      	nop
 8009e28:	e00a      	b.n	8009e40 <USBH_Process+0x3c8>
    break;
 8009e2a:	bf00      	nop
 8009e2c:	e008      	b.n	8009e40 <USBH_Process+0x3c8>
      break;
 8009e2e:	bf00      	nop
 8009e30:	e006      	b.n	8009e40 <USBH_Process+0x3c8>
      break;
 8009e32:	bf00      	nop
 8009e34:	e004      	b.n	8009e40 <USBH_Process+0x3c8>
      break;
 8009e36:	bf00      	nop
 8009e38:	e002      	b.n	8009e40 <USBH_Process+0x3c8>
      break;
 8009e3a:	bf00      	nop
 8009e3c:	e000      	b.n	8009e40 <USBH_Process+0x3c8>
      break;
 8009e3e:	bf00      	nop
  }
  return USBH_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop

08009e4c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b088      	sub	sp, #32
 8009e50:	af04      	add	r7, sp, #16
 8009e52:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009e54:	2301      	movs	r3, #1
 8009e56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	785b      	ldrb	r3, [r3, #1]
 8009e60:	2b07      	cmp	r3, #7
 8009e62:	f200 81bd 	bhi.w	800a1e0 <USBH_HandleEnum+0x394>
 8009e66:	a201      	add	r2, pc, #4	@ (adr r2, 8009e6c <USBH_HandleEnum+0x20>)
 8009e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6c:	08009e8d 	.word	0x08009e8d
 8009e70:	08009f47 	.word	0x08009f47
 8009e74:	08009fb1 	.word	0x08009fb1
 8009e78:	0800a03b 	.word	0x0800a03b
 8009e7c:	0800a0a5 	.word	0x0800a0a5
 8009e80:	0800a115 	.word	0x0800a115
 8009e84:	0800a15b 	.word	0x0800a15b
 8009e88:	0800a1a1 	.word	0x0800a1a1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009e8c:	2108      	movs	r1, #8
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fa50 	bl	800a334 <USBH_Get_DevDesc>
 8009e94:	4603      	mov	r3, r0
 8009e96:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e98:	7bbb      	ldrb	r3, [r7, #14]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d12e      	bne.n	8009efc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	7919      	ldrb	r1, [r3, #4]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009ec2:	9202      	str	r2, [sp, #8]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	9201      	str	r2, [sp, #4]
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2280      	movs	r2, #128	@ 0x80
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f001 f8e2 	bl	800b098 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	7959      	ldrb	r1, [r3, #5]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009ee8:	9202      	str	r2, [sp, #8]
 8009eea:	2200      	movs	r2, #0
 8009eec:	9201      	str	r2, [sp, #4]
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f001 f8cf 	bl	800b098 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009efa:	e173      	b.n	800a1e4 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009efc:	7bbb      	ldrb	r3, [r7, #14]
 8009efe:	2b03      	cmp	r3, #3
 8009f00:	f040 8170 	bne.w	800a1e4 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f1a:	2b03      	cmp	r3, #3
 8009f1c:	d903      	bls.n	8009f26 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	220d      	movs	r2, #13
 8009f22:	701a      	strb	r2, [r3, #0]
      break;
 8009f24:	e15e      	b.n	800a1e4 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	795b      	ldrb	r3, [r3, #5]
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f001 f903 	bl	800b138 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	791b      	ldrb	r3, [r3, #4]
 8009f36:	4619      	mov	r1, r3
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f001 f8fd 	bl	800b138 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	701a      	strb	r2, [r3, #0]
      break;
 8009f44:	e14e      	b.n	800a1e4 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009f46:	2112      	movs	r1, #18
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f9f3 	bl	800a334 <USBH_Get_DevDesc>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f52:	7bbb      	ldrb	r3, [r7, #14]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d103      	bne.n	8009f60 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2202      	movs	r2, #2
 8009f5c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009f5e:	e143      	b.n	800a1e8 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f60:	7bbb      	ldrb	r3, [r7, #14]
 8009f62:	2b03      	cmp	r3, #3
 8009f64:	f040 8140 	bne.w	800a1e8 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f6e:	3301      	adds	r3, #1
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f7e:	2b03      	cmp	r3, #3
 8009f80:	d903      	bls.n	8009f8a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	220d      	movs	r2, #13
 8009f86:	701a      	strb	r2, [r3, #0]
      break;
 8009f88:	e12e      	b.n	800a1e8 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	795b      	ldrb	r3, [r3, #5]
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f001 f8d1 	bl	800b138 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	791b      	ldrb	r3, [r3, #4]
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f001 f8cb 	bl	800b138 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	701a      	strb	r2, [r3, #0]
      break;
 8009fae:	e11b      	b.n	800a1e8 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fa7d 	bl	800a4b2 <USBH_SetAddress>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009fbc:	7bbb      	ldrb	r3, [r7, #14]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d130      	bne.n	800a024 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009fc2:	2002      	movs	r0, #2
 8009fc4:	f001 fb9f 	bl	800b706 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2203      	movs	r2, #3
 8009fd4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	7919      	ldrb	r1, [r3, #4]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009fea:	9202      	str	r2, [sp, #8]
 8009fec:	2200      	movs	r2, #0
 8009fee:	9201      	str	r2, [sp, #4]
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2280      	movs	r2, #128	@ 0x80
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f001 f84e 	bl	800b098 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	7959      	ldrb	r1, [r3, #5]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a010:	9202      	str	r2, [sp, #8]
 800a012:	2200      	movs	r2, #0
 800a014:	9201      	str	r2, [sp, #4]
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	4603      	mov	r3, r0
 800a01a:	2200      	movs	r2, #0
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f001 f83b 	bl	800b098 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a022:	e0e3      	b.n	800a1ec <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a024:	7bbb      	ldrb	r3, [r7, #14]
 800a026:	2b03      	cmp	r3, #3
 800a028:	f040 80e0 	bne.w	800a1ec <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	220d      	movs	r2, #13
 800a030:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	705a      	strb	r2, [r3, #1]
      break;
 800a038:	e0d8      	b.n	800a1ec <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a03a:	2109      	movs	r1, #9
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 f9a5 	bl	800a38c <USBH_Get_CfgDesc>
 800a042:	4603      	mov	r3, r0
 800a044:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a046:	7bbb      	ldrb	r3, [r7, #14]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d103      	bne.n	800a054 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2204      	movs	r2, #4
 800a050:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a052:	e0cd      	b.n	800a1f0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a054:	7bbb      	ldrb	r3, [r7, #14]
 800a056:	2b03      	cmp	r3, #3
 800a058:	f040 80ca 	bne.w	800a1f0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a062:	3301      	adds	r3, #1
 800a064:	b2da      	uxtb	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a072:	2b03      	cmp	r3, #3
 800a074:	d903      	bls.n	800a07e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	220d      	movs	r2, #13
 800a07a:	701a      	strb	r2, [r3, #0]
      break;
 800a07c:	e0b8      	b.n	800a1f0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	795b      	ldrb	r3, [r3, #5]
 800a082:	4619      	mov	r1, r3
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f001 f857 	bl	800b138 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	791b      	ldrb	r3, [r3, #4]
 800a08e:	4619      	mov	r1, r3
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f001 f851 	bl	800b138 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	701a      	strb	r2, [r3, #0]
      break;
 800a0a2:	e0a5      	b.n	800a1f0 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 f96d 	bl	800a38c <USBH_Get_CfgDesc>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a0b6:	7bbb      	ldrb	r3, [r7, #14]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d103      	bne.n	800a0c4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2205      	movs	r2, #5
 800a0c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a0c2:	e097      	b.n	800a1f4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0c4:	7bbb      	ldrb	r3, [r7, #14]
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	f040 8094 	bne.w	800a1f4 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	b2da      	uxtb	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a0e2:	2b03      	cmp	r3, #3
 800a0e4:	d903      	bls.n	800a0ee <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	220d      	movs	r2, #13
 800a0ea:	701a      	strb	r2, [r3, #0]
      break;
 800a0ec:	e082      	b.n	800a1f4 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	795b      	ldrb	r3, [r3, #5]
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f001 f81f 	bl	800b138 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	791b      	ldrb	r3, [r3, #4]
 800a0fe:	4619      	mov	r1, r3
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f001 f819 	bl	800b138 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	701a      	strb	r2, [r3, #0]
      break;
 800a112:	e06f      	b.n	800a1f4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d019      	beq.n	800a152 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a12a:	23ff      	movs	r3, #255	@ 0xff
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 f957 	bl	800a3e0 <USBH_Get_StringDesc>
 800a132:	4603      	mov	r3, r0
 800a134:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a136:	7bbb      	ldrb	r3, [r7, #14]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d103      	bne.n	800a144 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2206      	movs	r2, #6
 800a140:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a142:	e059      	b.n	800a1f8 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a144:	7bbb      	ldrb	r3, [r7, #14]
 800a146:	2b03      	cmp	r3, #3
 800a148:	d156      	bne.n	800a1f8 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2206      	movs	r2, #6
 800a14e:	705a      	strb	r2, [r3, #1]
      break;
 800a150:	e052      	b.n	800a1f8 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2206      	movs	r2, #6
 800a156:	705a      	strb	r2, [r3, #1]
      break;
 800a158:	e04e      	b.n	800a1f8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a160:	2b00      	cmp	r3, #0
 800a162:	d019      	beq.n	800a198 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a170:	23ff      	movs	r3, #255	@ 0xff
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f934 	bl	800a3e0 <USBH_Get_StringDesc>
 800a178:	4603      	mov	r3, r0
 800a17a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a17c:	7bbb      	ldrb	r3, [r7, #14]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d103      	bne.n	800a18a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2207      	movs	r2, #7
 800a186:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a188:	e038      	b.n	800a1fc <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a18a:	7bbb      	ldrb	r3, [r7, #14]
 800a18c:	2b03      	cmp	r3, #3
 800a18e:	d135      	bne.n	800a1fc <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2207      	movs	r2, #7
 800a194:	705a      	strb	r2, [r3, #1]
      break;
 800a196:	e031      	b.n	800a1fc <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2207      	movs	r2, #7
 800a19c:	705a      	strb	r2, [r3, #1]
      break;
 800a19e:	e02d      	b.n	800a1fc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d017      	beq.n	800a1da <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a1b6:	23ff      	movs	r3, #255	@ 0xff
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f911 	bl	800a3e0 <USBH_Get_StringDesc>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a1c2:	7bbb      	ldrb	r3, [r7, #14]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d102      	bne.n	800a1ce <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a1cc:	e018      	b.n	800a200 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1ce:	7bbb      	ldrb	r3, [r7, #14]
 800a1d0:	2b03      	cmp	r3, #3
 800a1d2:	d115      	bne.n	800a200 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a1d8:	e012      	b.n	800a200 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	73fb      	strb	r3, [r7, #15]
      break;
 800a1de:	e00f      	b.n	800a200 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a1e0:	bf00      	nop
 800a1e2:	e00e      	b.n	800a202 <USBH_HandleEnum+0x3b6>
      break;
 800a1e4:	bf00      	nop
 800a1e6:	e00c      	b.n	800a202 <USBH_HandleEnum+0x3b6>
      break;
 800a1e8:	bf00      	nop
 800a1ea:	e00a      	b.n	800a202 <USBH_HandleEnum+0x3b6>
      break;
 800a1ec:	bf00      	nop
 800a1ee:	e008      	b.n	800a202 <USBH_HandleEnum+0x3b6>
      break;
 800a1f0:	bf00      	nop
 800a1f2:	e006      	b.n	800a202 <USBH_HandleEnum+0x3b6>
      break;
 800a1f4:	bf00      	nop
 800a1f6:	e004      	b.n	800a202 <USBH_HandleEnum+0x3b6>
      break;
 800a1f8:	bf00      	nop
 800a1fa:	e002      	b.n	800a202 <USBH_HandleEnum+0x3b6>
      break;
 800a1fc:	bf00      	nop
 800a1fe:	e000      	b.n	800a202 <USBH_HandleEnum+0x3b6>
      break;
 800a200:	bf00      	nop
  }
  return Status;
 800a202:	7bfb      	ldrb	r3, [r7, #15]
}
 800a204:	4618      	mov	r0, r3
 800a206:	3710      	adds	r7, #16
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	683a      	ldr	r2, [r7, #0]
 800a21a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a21e:	bf00      	nop
 800a220:	370c      	adds	r7, #12
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b082      	sub	sp, #8
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a238:	1c5a      	adds	r2, r3, #1
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f804 	bl	800a24e <USBH_HandleSof>
}
 800a246:	bf00      	nop
 800a248:	3708      	adds	r7, #8
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b082      	sub	sp, #8
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	2b0b      	cmp	r3, #11
 800a25e:	d10a      	bne.n	800a276 <USBH_HandleSof+0x28>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a266:	2b00      	cmp	r3, #0
 800a268:	d005      	beq.n	800a276 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	4798      	blx	r3
  }
}
 800a276:	bf00      	nop
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a27e:	b480      	push	{r7}
 800a280:	b083      	sub	sp, #12
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800a28e:	bf00      	nop
}
 800a290:	370c      	adds	r7, #12
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr

0800a29a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a29a:	b480      	push	{r7}
 800a29c:	b083      	sub	sp, #12
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800a2b2:	bf00      	nop
}
 800a2b4:	370c      	adds	r7, #12
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b083      	sub	sp, #12
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f001 f8c0 	bl	800b492 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	791b      	ldrb	r3, [r3, #4]
 800a316:	4619      	mov	r1, r3
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 ff0d 	bl	800b138 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	795b      	ldrb	r3, [r3, #5]
 800a322:	4619      	mov	r1, r3
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 ff07 	bl	800b138 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af02      	add	r7, sp, #8
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	460b      	mov	r3, r1
 800a33e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a340:	887b      	ldrh	r3, [r7, #2]
 800a342:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a346:	d901      	bls.n	800a34c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a348:	2303      	movs	r3, #3
 800a34a:	e01b      	b.n	800a384 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a352:	887b      	ldrh	r3, [r7, #2]
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	4613      	mov	r3, r2
 800a358:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a35c:	2100      	movs	r1, #0
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f872 	bl	800a448 <USBH_GetDescriptor>
 800a364:	4603      	mov	r3, r0
 800a366:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a368:	7bfb      	ldrb	r3, [r7, #15]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d109      	bne.n	800a382 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a374:	887a      	ldrh	r2, [r7, #2]
 800a376:	4619      	mov	r1, r3
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f929 	bl	800a5d0 <USBH_ParseDevDesc>
 800a37e:	4603      	mov	r3, r0
 800a380:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a382:	7bfb      	ldrb	r3, [r7, #15]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af02      	add	r7, sp, #8
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	460b      	mov	r3, r1
 800a396:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	331c      	adds	r3, #28
 800a39c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a39e:	887b      	ldrh	r3, [r7, #2]
 800a3a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3a4:	d901      	bls.n	800a3aa <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	e016      	b.n	800a3d8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a3aa:	887b      	ldrh	r3, [r7, #2]
 800a3ac:	9300      	str	r3, [sp, #0]
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 f846 	bl	800a448 <USBH_GetDescriptor>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d107      	bne.n	800a3d6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a3c6:	887b      	ldrh	r3, [r7, #2]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	68b9      	ldr	r1, [r7, #8]
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 f9af 	bl	800a730 <USBH_ParseCfgDesc>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b088      	sub	sp, #32
 800a3e4:	af02      	add	r7, sp, #8
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	607a      	str	r2, [r7, #4]
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	72fb      	strb	r3, [r7, #11]
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a3f4:	893b      	ldrh	r3, [r7, #8]
 800a3f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3fa:	d802      	bhi.n	800a402 <USBH_Get_StringDesc+0x22>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d101      	bne.n	800a406 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a402:	2303      	movs	r3, #3
 800a404:	e01c      	b.n	800a440 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a406:	7afb      	ldrb	r3, [r7, #11]
 800a408:	b29b      	uxth	r3, r3
 800a40a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a40e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a416:	893b      	ldrh	r3, [r7, #8]
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	460b      	mov	r3, r1
 800a41c:	2100      	movs	r1, #0
 800a41e:	68f8      	ldr	r0, [r7, #12]
 800a420:	f000 f812 	bl	800a448 <USBH_GetDescriptor>
 800a424:	4603      	mov	r3, r0
 800a426:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a428:	7dfb      	ldrb	r3, [r7, #23]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d107      	bne.n	800a43e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a434:	893a      	ldrh	r2, [r7, #8]
 800a436:	6879      	ldr	r1, [r7, #4]
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 fb8c 	bl	800ab56 <USBH_ParseStringDesc>
  }

  return status;
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3718      	adds	r7, #24
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	607b      	str	r3, [r7, #4]
 800a452:	460b      	mov	r3, r1
 800a454:	72fb      	strb	r3, [r7, #11]
 800a456:	4613      	mov	r3, r2
 800a458:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	789b      	ldrb	r3, [r3, #2]
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d11c      	bne.n	800a49c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a462:	7afb      	ldrb	r3, [r7, #11]
 800a464:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a468:	b2da      	uxtb	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2206      	movs	r2, #6
 800a472:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	893a      	ldrh	r2, [r7, #8]
 800a478:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a47a:	893b      	ldrh	r3, [r7, #8]
 800a47c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a480:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a484:	d104      	bne.n	800a490 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f240 4209 	movw	r2, #1033	@ 0x409
 800a48c:	829a      	strh	r2, [r3, #20]
 800a48e:	e002      	b.n	800a496 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2200      	movs	r2, #0
 800a494:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	8b3a      	ldrh	r2, [r7, #24]
 800a49a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a49c:	8b3b      	ldrh	r3, [r7, #24]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	6879      	ldr	r1, [r7, #4]
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f000 fba4 	bl	800abf0 <USBH_CtlReq>
 800a4a8:	4603      	mov	r3, r0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b082      	sub	sp, #8
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	789b      	ldrb	r3, [r3, #2]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d10f      	bne.n	800a4e6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2205      	movs	r2, #5
 800a4d0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a4d2:	78fb      	ldrb	r3, [r7, #3]
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 fb80 	bl	800abf0 <USBH_CtlReq>
 800a4f0:	4603      	mov	r3, r0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b082      	sub	sp, #8
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	460b      	mov	r3, r1
 800a504:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	789b      	ldrb	r3, [r3, #2]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d10e      	bne.n	800a52c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2209      	movs	r2, #9
 800a518:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	887a      	ldrh	r2, [r7, #2]
 800a51e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a52c:	2200      	movs	r2, #0
 800a52e:	2100      	movs	r1, #0
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fb5d 	bl	800abf0 <USBH_CtlReq>
 800a536:	4603      	mov	r3, r0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	460b      	mov	r3, r1
 800a54a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	789b      	ldrb	r3, [r3, #2]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d10f      	bne.n	800a574 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2203      	movs	r2, #3
 800a55e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a560:	78fb      	ldrb	r3, [r7, #3]
 800a562:	b29a      	uxth	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a574:	2200      	movs	r2, #0
 800a576:	2100      	movs	r1, #0
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 fb39 	bl	800abf0 <USBH_CtlReq>
 800a57e:	4603      	mov	r3, r0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	460b      	mov	r3, r1
 800a592:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	789b      	ldrb	r3, [r3, #2]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d10f      	bne.n	800a5bc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2202      	movs	r2, #2
 800a5a0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a5ae:	78fb      	ldrb	r3, [r7, #3]
 800a5b0:	b29a      	uxth	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a5bc:	2200      	movs	r2, #0
 800a5be:	2100      	movs	r1, #0
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 fb15 	bl	800abf0 <USBH_CtlReq>
 800a5c6:	4603      	mov	r3, r0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3708      	adds	r7, #8
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b087      	sub	sp, #28
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	4613      	mov	r3, r2
 800a5dc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a5e4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	e094      	b.n	800a71e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	781a      	ldrb	r2, [r3, #0]
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	785a      	ldrb	r2, [r3, #1]
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	3302      	adds	r3, #2
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	461a      	mov	r2, r3
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	3303      	adds	r3, #3
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	021b      	lsls	r3, r3, #8
 800a614:	b29b      	uxth	r3, r3
 800a616:	4313      	orrs	r3, r2
 800a618:	b29a      	uxth	r2, r3
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	791a      	ldrb	r2, [r3, #4]
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	795a      	ldrb	r2, [r3, #5]
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	799a      	ldrb	r2, [r3, #6]
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	79da      	ldrb	r2, [r3, #7]
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a644:	2b00      	cmp	r3, #0
 800a646:	d004      	beq.n	800a652 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d11b      	bne.n	800a68a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	79db      	ldrb	r3, [r3, #7]
 800a656:	2b20      	cmp	r3, #32
 800a658:	dc0f      	bgt.n	800a67a <USBH_ParseDevDesc+0xaa>
 800a65a:	2b08      	cmp	r3, #8
 800a65c:	db0f      	blt.n	800a67e <USBH_ParseDevDesc+0xae>
 800a65e:	3b08      	subs	r3, #8
 800a660:	4a32      	ldr	r2, [pc, #200]	@ (800a72c <USBH_ParseDevDesc+0x15c>)
 800a662:	fa22 f303 	lsr.w	r3, r2, r3
 800a666:	f003 0301 	and.w	r3, r3, #1
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	bf14      	ite	ne
 800a66e:	2301      	movne	r3, #1
 800a670:	2300      	moveq	r3, #0
 800a672:	b2db      	uxtb	r3, r3
 800a674:	2b00      	cmp	r3, #0
 800a676:	d106      	bne.n	800a686 <USBH_ParseDevDesc+0xb6>
 800a678:	e001      	b.n	800a67e <USBH_ParseDevDesc+0xae>
 800a67a:	2b40      	cmp	r3, #64	@ 0x40
 800a67c:	d003      	beq.n	800a686 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	2208      	movs	r2, #8
 800a682:	71da      	strb	r2, [r3, #7]
        break;
 800a684:	e000      	b.n	800a688 <USBH_ParseDevDesc+0xb8>
        break;
 800a686:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a688:	e00e      	b.n	800a6a8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a690:	2b02      	cmp	r3, #2
 800a692:	d107      	bne.n	800a6a4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	79db      	ldrb	r3, [r3, #7]
 800a698:	2b08      	cmp	r3, #8
 800a69a:	d005      	beq.n	800a6a8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	2208      	movs	r2, #8
 800a6a0:	71da      	strb	r2, [r3, #7]
 800a6a2:	e001      	b.n	800a6a8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a6a8:	88fb      	ldrh	r3, [r7, #6]
 800a6aa:	2b08      	cmp	r3, #8
 800a6ac:	d936      	bls.n	800a71c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	3308      	adds	r3, #8
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	3309      	adds	r3, #9
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	021b      	lsls	r3, r3, #8
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	330a      	adds	r3, #10
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	330b      	adds	r3, #11
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	021b      	lsls	r3, r3, #8
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	330c      	adds	r3, #12
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	330d      	adds	r3, #13
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	021b      	lsls	r3, r3, #8
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	7b9a      	ldrb	r2, [r3, #14]
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	7bda      	ldrb	r2, [r3, #15]
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	7c1a      	ldrb	r2, [r3, #16]
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	7c5a      	ldrb	r2, [r3, #17]
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a71c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	371c      	adds	r7, #28
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	01000101 	.word	0x01000101

0800a730 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b08c      	sub	sp, #48	@ 0x30
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	4613      	mov	r3, r2
 800a73c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a744:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a746:	2300      	movs	r3, #0
 800a748:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a74c:	2300      	movs	r3, #0
 800a74e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a752:	2300      	movs	r3, #0
 800a754:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d101      	bne.n	800a762 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a75e:	2302      	movs	r3, #2
 800a760:	e0de      	b.n	800a920 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	2b09      	cmp	r3, #9
 800a76c:	d002      	beq.n	800a774 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a770:	2209      	movs	r2, #9
 800a772:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	781a      	ldrb	r2, [r3, #0]
 800a778:	6a3b      	ldr	r3, [r7, #32]
 800a77a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	785a      	ldrb	r2, [r3, #1]
 800a780:	6a3b      	ldr	r3, [r7, #32]
 800a782:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	3302      	adds	r3, #2
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	461a      	mov	r2, r3
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	3303      	adds	r3, #3
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	021b      	lsls	r3, r3, #8
 800a794:	b29b      	uxth	r3, r3
 800a796:	4313      	orrs	r3, r2
 800a798:	b29b      	uxth	r3, r3
 800a79a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a79e:	bf28      	it	cs
 800a7a0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	6a3b      	ldr	r3, [r7, #32]
 800a7a8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	791a      	ldrb	r2, [r3, #4]
 800a7ae:	6a3b      	ldr	r3, [r7, #32]
 800a7b0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	795a      	ldrb	r2, [r3, #5]
 800a7b6:	6a3b      	ldr	r3, [r7, #32]
 800a7b8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	799a      	ldrb	r2, [r3, #6]
 800a7be:	6a3b      	ldr	r3, [r7, #32]
 800a7c0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	79da      	ldrb	r2, [r3, #7]
 800a7c6:	6a3b      	ldr	r3, [r7, #32]
 800a7c8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	7a1a      	ldrb	r2, [r3, #8]
 800a7ce:	6a3b      	ldr	r3, [r7, #32]
 800a7d0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a7d2:	88fb      	ldrh	r3, [r7, #6]
 800a7d4:	2b09      	cmp	r3, #9
 800a7d6:	f240 80a1 	bls.w	800a91c <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800a7da:	2309      	movs	r3, #9
 800a7dc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a7e2:	e085      	b.n	800a8f0 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a7e4:	f107 0316 	add.w	r3, r7, #22
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7ec:	f000 f9e6 	bl	800abbc <USBH_GetNextDesc>
 800a7f0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f4:	785b      	ldrb	r3, [r3, #1]
 800a7f6:	2b04      	cmp	r3, #4
 800a7f8:	d17a      	bne.n	800a8f0 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a7fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	2b09      	cmp	r3, #9
 800a800:	d002      	beq.n	800a808 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a804:	2209      	movs	r2, #9
 800a806:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a808:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a80c:	221a      	movs	r2, #26
 800a80e:	fb02 f303 	mul.w	r3, r2, r3
 800a812:	3308      	adds	r3, #8
 800a814:	6a3a      	ldr	r2, [r7, #32]
 800a816:	4413      	add	r3, r2
 800a818:	3302      	adds	r3, #2
 800a81a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a81c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a81e:	69f8      	ldr	r0, [r7, #28]
 800a820:	f000 f882 	bl	800a928 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a824:	2300      	movs	r3, #0
 800a826:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a82a:	2300      	movs	r3, #0
 800a82c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a82e:	e043      	b.n	800a8b8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a830:	f107 0316 	add.w	r3, r7, #22
 800a834:	4619      	mov	r1, r3
 800a836:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a838:	f000 f9c0 	bl	800abbc <USBH_GetNextDesc>
 800a83c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a840:	785b      	ldrb	r3, [r3, #1]
 800a842:	2b05      	cmp	r3, #5
 800a844:	d138      	bne.n	800a8b8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	795b      	ldrb	r3, [r3, #5]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d113      	bne.n	800a876 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a84e:	69fb      	ldr	r3, [r7, #28]
 800a850:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a852:	2b02      	cmp	r3, #2
 800a854:	d003      	beq.n	800a85e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	799b      	ldrb	r3, [r3, #6]
 800a85a:	2b03      	cmp	r3, #3
 800a85c:	d10b      	bne.n	800a876 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	79db      	ldrb	r3, [r3, #7]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10b      	bne.n	800a87e <USBH_ParseCfgDesc+0x14e>
 800a866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	2b09      	cmp	r3, #9
 800a86c:	d007      	beq.n	800a87e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a870:	2209      	movs	r2, #9
 800a872:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a874:	e003      	b.n	800a87e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a878:	2207      	movs	r2, #7
 800a87a:	701a      	strb	r2, [r3, #0]
 800a87c:	e000      	b.n	800a880 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a87e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a880:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a884:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a888:	3201      	adds	r2, #1
 800a88a:	00d2      	lsls	r2, r2, #3
 800a88c:	211a      	movs	r1, #26
 800a88e:	fb01 f303 	mul.w	r3, r1, r3
 800a892:	4413      	add	r3, r2
 800a894:	3308      	adds	r3, #8
 800a896:	6a3a      	ldr	r2, [r7, #32]
 800a898:	4413      	add	r3, r2
 800a89a:	3304      	adds	r3, #4
 800a89c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a89e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8a0:	69b9      	ldr	r1, [r7, #24]
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f000 f86f 	bl	800a986 <USBH_ParseEPDesc>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a8ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a8b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d80a      	bhi.n	800a8d6 <USBH_ParseCfgDesc+0x1a6>
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	791b      	ldrb	r3, [r3, #4]
 800a8c4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d204      	bcs.n	800a8d6 <USBH_ParseCfgDesc+0x1a6>
 800a8cc:	6a3b      	ldr	r3, [r7, #32]
 800a8ce:	885a      	ldrh	r2, [r3, #2]
 800a8d0:	8afb      	ldrh	r3, [r7, #22]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d8ac      	bhi.n	800a830 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	791b      	ldrb	r3, [r3, #4]
 800a8da:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d201      	bcs.n	800a8e6 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e01c      	b.n	800a920 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800a8e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a8f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d805      	bhi.n	800a904 <USBH_ParseCfgDesc+0x1d4>
 800a8f8:	6a3b      	ldr	r3, [r7, #32]
 800a8fa:	885a      	ldrh	r2, [r3, #2]
 800a8fc:	8afb      	ldrh	r3, [r7, #22]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	f63f af70 	bhi.w	800a7e4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a904:	6a3b      	ldr	r3, [r7, #32]
 800a906:	791b      	ldrb	r3, [r3, #4]
 800a908:	2b02      	cmp	r3, #2
 800a90a:	bf28      	it	cs
 800a90c:	2302      	movcs	r3, #2
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a914:	429a      	cmp	r2, r3
 800a916:	d201      	bcs.n	800a91c <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800a918:	2303      	movs	r3, #3
 800a91a:	e001      	b.n	800a920 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800a91c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a920:	4618      	mov	r0, r3
 800a922:	3730      	adds	r7, #48	@ 0x30
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	781a      	ldrb	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	785a      	ldrb	r2, [r3, #1]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	789a      	ldrb	r2, [r3, #2]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	78da      	ldrb	r2, [r3, #3]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	791a      	ldrb	r2, [r3, #4]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	795a      	ldrb	r2, [r3, #5]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	799a      	ldrb	r2, [r3, #6]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	79da      	ldrb	r2, [r3, #7]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	7a1a      	ldrb	r2, [r3, #8]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	721a      	strb	r2, [r3, #8]
}
 800a97a:	bf00      	nop
 800a97c:	370c      	adds	r7, #12
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a986:	b480      	push	{r7}
 800a988:	b087      	sub	sp, #28
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	60f8      	str	r0, [r7, #12]
 800a98e:	60b9      	str	r1, [r7, #8]
 800a990:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	781a      	ldrb	r2, [r3, #0]
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	785a      	ldrb	r2, [r3, #1]
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	789a      	ldrb	r2, [r3, #2]
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	78da      	ldrb	r2, [r3, #3]
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	3305      	adds	r3, #5
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	021b      	lsls	r3, r3, #8
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	799a      	ldrb	r2, [r3, #6]
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	889b      	ldrh	r3, [r3, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d009      	beq.n	800a9f4 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a9e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9e8:	d804      	bhi.n	800a9f4 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a9ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9f2:	d901      	bls.n	800a9f8 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a9f4:	2303      	movs	r3, #3
 800a9f6:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d136      	bne.n	800aa70 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	78db      	ldrb	r3, [r3, #3]
 800aa06:	f003 0303 	and.w	r3, r3, #3
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d108      	bne.n	800aa20 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	889b      	ldrh	r3, [r3, #4]
 800aa12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa16:	f240 8097 	bls.w	800ab48 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	75fb      	strb	r3, [r7, #23]
 800aa1e:	e093      	b.n	800ab48 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	78db      	ldrb	r3, [r3, #3]
 800aa24:	f003 0303 	and.w	r3, r3, #3
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d107      	bne.n	800aa3c <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	889b      	ldrh	r3, [r3, #4]
 800aa30:	2b40      	cmp	r3, #64	@ 0x40
 800aa32:	f240 8089 	bls.w	800ab48 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa36:	2303      	movs	r3, #3
 800aa38:	75fb      	strb	r3, [r7, #23]
 800aa3a:	e085      	b.n	800ab48 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	78db      	ldrb	r3, [r3, #3]
 800aa40:	f003 0303 	and.w	r3, r3, #3
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d005      	beq.n	800aa54 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	78db      	ldrb	r3, [r3, #3]
 800aa4c:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800aa50:	2b03      	cmp	r3, #3
 800aa52:	d10a      	bne.n	800aa6a <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	799b      	ldrb	r3, [r3, #6]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d003      	beq.n	800aa64 <USBH_ParseEPDesc+0xde>
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	799b      	ldrb	r3, [r3, #6]
 800aa60:	2b10      	cmp	r3, #16
 800aa62:	d970      	bls.n	800ab46 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800aa64:	2303      	movs	r3, #3
 800aa66:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aa68:	e06d      	b.n	800ab46 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aa6a:	2303      	movs	r3, #3
 800aa6c:	75fb      	strb	r3, [r7, #23]
 800aa6e:	e06b      	b.n	800ab48 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d13c      	bne.n	800aaf4 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	78db      	ldrb	r3, [r3, #3]
 800aa7e:	f003 0303 	and.w	r3, r3, #3
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	d005      	beq.n	800aa92 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	78db      	ldrb	r3, [r3, #3]
 800aa8a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d106      	bne.n	800aaa0 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	889b      	ldrh	r3, [r3, #4]
 800aa96:	2b40      	cmp	r3, #64	@ 0x40
 800aa98:	d956      	bls.n	800ab48 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aa9e:	e053      	b.n	800ab48 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	78db      	ldrb	r3, [r3, #3]
 800aaa4:	f003 0303 	and.w	r3, r3, #3
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d10e      	bne.n	800aaca <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	799b      	ldrb	r3, [r3, #6]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d007      	beq.n	800aac4 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800aab8:	2b10      	cmp	r3, #16
 800aaba:	d803      	bhi.n	800aac4 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800aac0:	2b40      	cmp	r3, #64	@ 0x40
 800aac2:	d941      	bls.n	800ab48 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aac4:	2303      	movs	r3, #3
 800aac6:	75fb      	strb	r3, [r7, #23]
 800aac8:	e03e      	b.n	800ab48 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	78db      	ldrb	r3, [r3, #3]
 800aace:	f003 0303 	and.w	r3, r3, #3
 800aad2:	2b03      	cmp	r3, #3
 800aad4:	d10b      	bne.n	800aaee <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	799b      	ldrb	r3, [r3, #6]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d004      	beq.n	800aae8 <USBH_ParseEPDesc+0x162>
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	889b      	ldrh	r3, [r3, #4]
 800aae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aae6:	d32f      	bcc.n	800ab48 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aae8:	2303      	movs	r3, #3
 800aaea:	75fb      	strb	r3, [r7, #23]
 800aaec:	e02c      	b.n	800ab48 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aaee:	2303      	movs	r3, #3
 800aaf0:	75fb      	strb	r3, [r7, #23]
 800aaf2:	e029      	b.n	800ab48 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d120      	bne.n	800ab40 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	78db      	ldrb	r3, [r3, #3]
 800ab02:	f003 0303 	and.w	r3, r3, #3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d106      	bne.n	800ab18 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	889b      	ldrh	r3, [r3, #4]
 800ab0e:	2b08      	cmp	r3, #8
 800ab10:	d01a      	beq.n	800ab48 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ab12:	2303      	movs	r3, #3
 800ab14:	75fb      	strb	r3, [r7, #23]
 800ab16:	e017      	b.n	800ab48 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	78db      	ldrb	r3, [r3, #3]
 800ab1c:	f003 0303 	and.w	r3, r3, #3
 800ab20:	2b03      	cmp	r3, #3
 800ab22:	d10a      	bne.n	800ab3a <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	799b      	ldrb	r3, [r3, #6]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d003      	beq.n	800ab34 <USBH_ParseEPDesc+0x1ae>
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	889b      	ldrh	r3, [r3, #4]
 800ab30:	2b08      	cmp	r3, #8
 800ab32:	d909      	bls.n	800ab48 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ab34:	2303      	movs	r3, #3
 800ab36:	75fb      	strb	r3, [r7, #23]
 800ab38:	e006      	b.n	800ab48 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	75fb      	strb	r3, [r7, #23]
 800ab3e:	e003      	b.n	800ab48 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ab40:	2303      	movs	r3, #3
 800ab42:	75fb      	strb	r3, [r7, #23]
 800ab44:	e000      	b.n	800ab48 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ab46:	bf00      	nop
  }

  return status;
 800ab48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	371c      	adds	r7, #28
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ab56:	b480      	push	{r7}
 800ab58:	b087      	sub	sp, #28
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	60f8      	str	r0, [r7, #12]
 800ab5e:	60b9      	str	r1, [r7, #8]
 800ab60:	4613      	mov	r3, r2
 800ab62:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	3301      	adds	r3, #1
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	2b03      	cmp	r3, #3
 800ab6c:	d120      	bne.n	800abb0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	1e9a      	subs	r2, r3, #2
 800ab74:	88fb      	ldrh	r3, [r7, #6]
 800ab76:	4293      	cmp	r3, r2
 800ab78:	bf28      	it	cs
 800ab7a:	4613      	movcs	r3, r2
 800ab7c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	3302      	adds	r3, #2
 800ab82:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ab84:	2300      	movs	r3, #0
 800ab86:	82fb      	strh	r3, [r7, #22]
 800ab88:	e00b      	b.n	800aba2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ab8a:	8afb      	ldrh	r3, [r7, #22]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	4413      	add	r3, r2
 800ab90:	781a      	ldrb	r2, [r3, #0]
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ab9c:	8afb      	ldrh	r3, [r7, #22]
 800ab9e:	3302      	adds	r3, #2
 800aba0:	82fb      	strh	r3, [r7, #22]
 800aba2:	8afa      	ldrh	r2, [r7, #22]
 800aba4:	8abb      	ldrh	r3, [r7, #20]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d3ef      	bcc.n	800ab8a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	2200      	movs	r2, #0
 800abae:	701a      	strb	r2, [r3, #0]
  }
}
 800abb0:	bf00      	nop
 800abb2:	371c      	adds	r7, #28
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	881b      	ldrh	r3, [r3, #0]
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	7812      	ldrb	r2, [r2, #0]
 800abce:	4413      	add	r3, r2
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	4413      	add	r3, r2
 800abe0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800abe2:	68fb      	ldr	r3, [r7, #12]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	4613      	mov	r3, r2
 800abfc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800abfe:	2301      	movs	r3, #1
 800ac00:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	789b      	ldrb	r3, [r3, #2]
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d002      	beq.n	800ac10 <USBH_CtlReq+0x20>
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d00f      	beq.n	800ac2e <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800ac0e:	e027      	b.n	800ac60 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	88fa      	ldrh	r2, [r7, #6]
 800ac1a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2202      	movs	r2, #2
 800ac26:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	75fb      	strb	r3, [r7, #23]
      break;
 800ac2c:	e018      	b.n	800ac60 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f000 f81c 	bl	800ac6c <USBH_HandleControl>
 800ac34:	4603      	mov	r3, r0
 800ac36:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ac38:	7dfb      	ldrb	r3, [r7, #23]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d002      	beq.n	800ac44 <USBH_CtlReq+0x54>
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
 800ac40:	2b03      	cmp	r3, #3
 800ac42:	d106      	bne.n	800ac52 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2201      	movs	r2, #1
 800ac48:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	761a      	strb	r2, [r3, #24]
      break;
 800ac50:	e005      	b.n	800ac5e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ac52:	7dfb      	ldrb	r3, [r7, #23]
 800ac54:	2b02      	cmp	r3, #2
 800ac56:	d102      	bne.n	800ac5e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	709a      	strb	r2, [r3, #2]
      break;
 800ac5e:	bf00      	nop
  }
  return status;
 800ac60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3718      	adds	r7, #24
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
	...

0800ac6c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af02      	add	r7, sp, #8
 800ac72:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ac74:	2301      	movs	r3, #1
 800ac76:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	7e1b      	ldrb	r3, [r3, #24]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	2b0a      	cmp	r3, #10
 800ac84:	f200 8157 	bhi.w	800af36 <USBH_HandleControl+0x2ca>
 800ac88:	a201      	add	r2, pc, #4	@ (adr r2, 800ac90 <USBH_HandleControl+0x24>)
 800ac8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8e:	bf00      	nop
 800ac90:	0800acbd 	.word	0x0800acbd
 800ac94:	0800acd7 	.word	0x0800acd7
 800ac98:	0800ad41 	.word	0x0800ad41
 800ac9c:	0800ad67 	.word	0x0800ad67
 800aca0:	0800ada1 	.word	0x0800ada1
 800aca4:	0800adcb 	.word	0x0800adcb
 800aca8:	0800ae1d 	.word	0x0800ae1d
 800acac:	0800ae3f 	.word	0x0800ae3f
 800acb0:	0800ae7b 	.word	0x0800ae7b
 800acb4:	0800aea1 	.word	0x0800aea1
 800acb8:	0800aedf 	.word	0x0800aedf
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f103 0110 	add.w	r1, r3, #16
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	795b      	ldrb	r3, [r3, #5]
 800acc6:	461a      	mov	r2, r3
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 f945 	bl	800af58 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2202      	movs	r2, #2
 800acd2:	761a      	strb	r2, [r3, #24]
      break;
 800acd4:	e13a      	b.n	800af4c <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	795b      	ldrb	r3, [r3, #5]
 800acda:	4619      	mov	r1, r3
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 fcb5 	bl	800b64c <USBH_LL_GetURBState>
 800ace2:	4603      	mov	r3, r0
 800ace4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ace6:	7bbb      	ldrb	r3, [r7, #14]
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d11e      	bne.n	800ad2a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	7c1b      	ldrb	r3, [r3, #16]
 800acf0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800acf4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	8adb      	ldrh	r3, [r3, #22]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00a      	beq.n	800ad14 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800acfe:	7b7b      	ldrb	r3, [r7, #13]
 800ad00:	2b80      	cmp	r3, #128	@ 0x80
 800ad02:	d103      	bne.n	800ad0c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2203      	movs	r2, #3
 800ad08:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ad0a:	e116      	b.n	800af3a <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2205      	movs	r2, #5
 800ad10:	761a      	strb	r2, [r3, #24]
      break;
 800ad12:	e112      	b.n	800af3a <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800ad14:	7b7b      	ldrb	r3, [r7, #13]
 800ad16:	2b80      	cmp	r3, #128	@ 0x80
 800ad18:	d103      	bne.n	800ad22 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2209      	movs	r2, #9
 800ad1e:	761a      	strb	r2, [r3, #24]
      break;
 800ad20:	e10b      	b.n	800af3a <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2207      	movs	r2, #7
 800ad26:	761a      	strb	r2, [r3, #24]
      break;
 800ad28:	e107      	b.n	800af3a <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ad2a:	7bbb      	ldrb	r3, [r7, #14]
 800ad2c:	2b04      	cmp	r3, #4
 800ad2e:	d003      	beq.n	800ad38 <USBH_HandleControl+0xcc>
 800ad30:	7bbb      	ldrb	r3, [r7, #14]
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	f040 8101 	bne.w	800af3a <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	220b      	movs	r2, #11
 800ad3c:	761a      	strb	r2, [r3, #24]
      break;
 800ad3e:	e0fc      	b.n	800af3a <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ad46:	b29a      	uxth	r2, r3
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6899      	ldr	r1, [r3, #8]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	899a      	ldrh	r2, [r3, #12]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	791b      	ldrb	r3, [r3, #4]
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 f93c 	bl	800afd6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2204      	movs	r2, #4
 800ad62:	761a      	strb	r2, [r3, #24]
      break;
 800ad64:	e0f2      	b.n	800af4c <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	791b      	ldrb	r3, [r3, #4]
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 fc6d 	bl	800b64c <USBH_LL_GetURBState>
 800ad72:	4603      	mov	r3, r0
 800ad74:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ad76:	7bbb      	ldrb	r3, [r7, #14]
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d103      	bne.n	800ad84 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2209      	movs	r2, #9
 800ad80:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ad82:	e0dc      	b.n	800af3e <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800ad84:	7bbb      	ldrb	r3, [r7, #14]
 800ad86:	2b05      	cmp	r3, #5
 800ad88:	d102      	bne.n	800ad90 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800ad8a:	2303      	movs	r3, #3
 800ad8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ad8e:	e0d6      	b.n	800af3e <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800ad90:	7bbb      	ldrb	r3, [r7, #14]
 800ad92:	2b04      	cmp	r3, #4
 800ad94:	f040 80d3 	bne.w	800af3e <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	220b      	movs	r2, #11
 800ad9c:	761a      	strb	r2, [r3, #24]
      break;
 800ad9e:	e0ce      	b.n	800af3e <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6899      	ldr	r1, [r3, #8]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	899a      	ldrh	r2, [r3, #12]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	795b      	ldrb	r3, [r3, #5]
 800adac:	2001      	movs	r0, #1
 800adae:	9000      	str	r0, [sp, #0]
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f8eb 	bl	800af8c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2206      	movs	r2, #6
 800adc6:	761a      	strb	r2, [r3, #24]
      break;
 800adc8:	e0c0      	b.n	800af4c <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	795b      	ldrb	r3, [r3, #5]
 800adce:	4619      	mov	r1, r3
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 fc3b 	bl	800b64c <USBH_LL_GetURBState>
 800add6:	4603      	mov	r3, r0
 800add8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800adda:	7bbb      	ldrb	r3, [r7, #14]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d103      	bne.n	800ade8 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2207      	movs	r2, #7
 800ade4:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ade6:	e0ac      	b.n	800af42 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800ade8:	7bbb      	ldrb	r3, [r7, #14]
 800adea:	2b05      	cmp	r3, #5
 800adec:	d105      	bne.n	800adfa <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	220c      	movs	r2, #12
 800adf2:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800adf4:	2303      	movs	r3, #3
 800adf6:	73fb      	strb	r3, [r7, #15]
      break;
 800adf8:	e0a3      	b.n	800af42 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800adfa:	7bbb      	ldrb	r3, [r7, #14]
 800adfc:	2b02      	cmp	r3, #2
 800adfe:	d103      	bne.n	800ae08 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2205      	movs	r2, #5
 800ae04:	761a      	strb	r2, [r3, #24]
      break;
 800ae06:	e09c      	b.n	800af42 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800ae08:	7bbb      	ldrb	r3, [r7, #14]
 800ae0a:	2b04      	cmp	r3, #4
 800ae0c:	f040 8099 	bne.w	800af42 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	220b      	movs	r2, #11
 800ae14:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ae16:	2302      	movs	r3, #2
 800ae18:	73fb      	strb	r3, [r7, #15]
      break;
 800ae1a:	e092      	b.n	800af42 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	791b      	ldrb	r3, [r3, #4]
 800ae20:	2200      	movs	r2, #0
 800ae22:	2100      	movs	r1, #0
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 f8d6 	bl	800afd6 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ae30:	b29a      	uxth	r2, r3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2208      	movs	r2, #8
 800ae3a:	761a      	strb	r2, [r3, #24]

      break;
 800ae3c:	e086      	b.n	800af4c <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	791b      	ldrb	r3, [r3, #4]
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 fc01 	bl	800b64c <USBH_LL_GetURBState>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ae4e:	7bbb      	ldrb	r3, [r7, #14]
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d105      	bne.n	800ae60 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	220d      	movs	r2, #13
 800ae58:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ae5e:	e072      	b.n	800af46 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800ae60:	7bbb      	ldrb	r3, [r7, #14]
 800ae62:	2b04      	cmp	r3, #4
 800ae64:	d103      	bne.n	800ae6e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	220b      	movs	r2, #11
 800ae6a:	761a      	strb	r2, [r3, #24]
      break;
 800ae6c:	e06b      	b.n	800af46 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800ae6e:	7bbb      	ldrb	r3, [r7, #14]
 800ae70:	2b05      	cmp	r3, #5
 800ae72:	d168      	bne.n	800af46 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800ae74:	2303      	movs	r3, #3
 800ae76:	73fb      	strb	r3, [r7, #15]
      break;
 800ae78:	e065      	b.n	800af46 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	795b      	ldrb	r3, [r3, #5]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	9200      	str	r2, [sp, #0]
 800ae82:	2200      	movs	r2, #0
 800ae84:	2100      	movs	r1, #0
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f880 	bl	800af8c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ae92:	b29a      	uxth	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	220a      	movs	r2, #10
 800ae9c:	761a      	strb	r2, [r3, #24]
      break;
 800ae9e:	e055      	b.n	800af4c <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	795b      	ldrb	r3, [r3, #5]
 800aea4:	4619      	mov	r1, r3
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 fbd0 	bl	800b64c <USBH_LL_GetURBState>
 800aeac:	4603      	mov	r3, r0
 800aeae:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800aeb0:	7bbb      	ldrb	r3, [r7, #14]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d105      	bne.n	800aec2 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	220d      	movs	r2, #13
 800aebe:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800aec0:	e043      	b.n	800af4a <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aec2:	7bbb      	ldrb	r3, [r7, #14]
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d103      	bne.n	800aed0 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2209      	movs	r2, #9
 800aecc:	761a      	strb	r2, [r3, #24]
      break;
 800aece:	e03c      	b.n	800af4a <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800aed0:	7bbb      	ldrb	r3, [r7, #14]
 800aed2:	2b04      	cmp	r3, #4
 800aed4:	d139      	bne.n	800af4a <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	220b      	movs	r2, #11
 800aeda:	761a      	strb	r2, [r3, #24]
      break;
 800aedc:	e035      	b.n	800af4a <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	7e5b      	ldrb	r3, [r3, #25]
 800aee2:	3301      	adds	r3, #1
 800aee4:	b2da      	uxtb	r2, r3
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	765a      	strb	r2, [r3, #25]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	7e5b      	ldrb	r3, [r3, #25]
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	d806      	bhi.n	800af00 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2201      	movs	r2, #1
 800aef6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2201      	movs	r2, #1
 800aefc:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800aefe:	e025      	b.n	800af4c <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800af06:	2106      	movs	r1, #6
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	795b      	ldrb	r3, [r3, #5]
 800af16:	4619      	mov	r1, r3
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f90d 	bl	800b138 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	791b      	ldrb	r3, [r3, #4]
 800af22:	4619      	mov	r1, r3
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 f907 	bl	800b138 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800af30:	2302      	movs	r3, #2
 800af32:	73fb      	strb	r3, [r7, #15]
      break;
 800af34:	e00a      	b.n	800af4c <USBH_HandleControl+0x2e0>

    default:
      break;
 800af36:	bf00      	nop
 800af38:	e008      	b.n	800af4c <USBH_HandleControl+0x2e0>
      break;
 800af3a:	bf00      	nop
 800af3c:	e006      	b.n	800af4c <USBH_HandleControl+0x2e0>
      break;
 800af3e:	bf00      	nop
 800af40:	e004      	b.n	800af4c <USBH_HandleControl+0x2e0>
      break;
 800af42:	bf00      	nop
 800af44:	e002      	b.n	800af4c <USBH_HandleControl+0x2e0>
      break;
 800af46:	bf00      	nop
 800af48:	e000      	b.n	800af4c <USBH_HandleControl+0x2e0>
      break;
 800af4a:	bf00      	nop
  }

  return status;
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop

0800af58 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b088      	sub	sp, #32
 800af5c:	af04      	add	r7, sp, #16
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	4613      	mov	r3, r2
 800af64:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800af66:	79f9      	ldrb	r1, [r7, #7]
 800af68:	2300      	movs	r3, #0
 800af6a:	9303      	str	r3, [sp, #12]
 800af6c:	2308      	movs	r3, #8
 800af6e:	9302      	str	r3, [sp, #8]
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	9301      	str	r3, [sp, #4]
 800af74:	2300      	movs	r3, #0
 800af76:	9300      	str	r3, [sp, #0]
 800af78:	2300      	movs	r3, #0
 800af7a:	2200      	movs	r2, #0
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	f000 fb34 	bl	800b5ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800af82:	2300      	movs	r3, #0
}
 800af84:	4618      	mov	r0, r3
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b088      	sub	sp, #32
 800af90:	af04      	add	r7, sp, #16
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	4611      	mov	r1, r2
 800af98:	461a      	mov	r2, r3
 800af9a:	460b      	mov	r3, r1
 800af9c:	80fb      	strh	r3, [r7, #6]
 800af9e:	4613      	mov	r3, r2
 800afa0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d001      	beq.n	800afb0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800afac:	2300      	movs	r3, #0
 800afae:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800afb0:	7979      	ldrb	r1, [r7, #5]
 800afb2:	7e3b      	ldrb	r3, [r7, #24]
 800afb4:	9303      	str	r3, [sp, #12]
 800afb6:	88fb      	ldrh	r3, [r7, #6]
 800afb8:	9302      	str	r3, [sp, #8]
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	9301      	str	r3, [sp, #4]
 800afbe:	2301      	movs	r3, #1
 800afc0:	9300      	str	r3, [sp, #0]
 800afc2:	2300      	movs	r3, #0
 800afc4:	2200      	movs	r2, #0
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f000 fb0f 	bl	800b5ea <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b088      	sub	sp, #32
 800afda:	af04      	add	r7, sp, #16
 800afdc:	60f8      	str	r0, [r7, #12]
 800afde:	60b9      	str	r1, [r7, #8]
 800afe0:	4611      	mov	r1, r2
 800afe2:	461a      	mov	r2, r3
 800afe4:	460b      	mov	r3, r1
 800afe6:	80fb      	strh	r3, [r7, #6]
 800afe8:	4613      	mov	r3, r2
 800afea:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800afec:	7979      	ldrb	r1, [r7, #5]
 800afee:	2300      	movs	r3, #0
 800aff0:	9303      	str	r3, [sp, #12]
 800aff2:	88fb      	ldrh	r3, [r7, #6]
 800aff4:	9302      	str	r3, [sp, #8]
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	9301      	str	r3, [sp, #4]
 800affa:	2301      	movs	r3, #1
 800affc:	9300      	str	r3, [sp, #0]
 800affe:	2300      	movs	r3, #0
 800b000:	2201      	movs	r2, #1
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f000 faf1 	bl	800b5ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b008:	2300      	movs	r3, #0

}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b088      	sub	sp, #32
 800b016:	af04      	add	r7, sp, #16
 800b018:	60f8      	str	r0, [r7, #12]
 800b01a:	60b9      	str	r1, [r7, #8]
 800b01c:	4611      	mov	r1, r2
 800b01e:	461a      	mov	r2, r3
 800b020:	460b      	mov	r3, r1
 800b022:	80fb      	strh	r3, [r7, #6]
 800b024:	4613      	mov	r3, r2
 800b026:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d001      	beq.n	800b036 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b032:	2300      	movs	r3, #0
 800b034:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b036:	7979      	ldrb	r1, [r7, #5]
 800b038:	7e3b      	ldrb	r3, [r7, #24]
 800b03a:	9303      	str	r3, [sp, #12]
 800b03c:	88fb      	ldrh	r3, [r7, #6]
 800b03e:	9302      	str	r3, [sp, #8]
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	9301      	str	r3, [sp, #4]
 800b044:	2301      	movs	r3, #1
 800b046:	9300      	str	r3, [sp, #0]
 800b048:	2302      	movs	r3, #2
 800b04a:	2200      	movs	r2, #0
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	f000 facc 	bl	800b5ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b088      	sub	sp, #32
 800b060:	af04      	add	r7, sp, #16
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	4611      	mov	r1, r2
 800b068:	461a      	mov	r2, r3
 800b06a:	460b      	mov	r3, r1
 800b06c:	80fb      	strh	r3, [r7, #6]
 800b06e:	4613      	mov	r3, r2
 800b070:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b072:	7979      	ldrb	r1, [r7, #5]
 800b074:	2300      	movs	r3, #0
 800b076:	9303      	str	r3, [sp, #12]
 800b078:	88fb      	ldrh	r3, [r7, #6]
 800b07a:	9302      	str	r3, [sp, #8]
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	9301      	str	r3, [sp, #4]
 800b080:	2301      	movs	r3, #1
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	2302      	movs	r3, #2
 800b086:	2201      	movs	r2, #1
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f000 faae 	bl	800b5ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b086      	sub	sp, #24
 800b09c:	af04      	add	r7, sp, #16
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	4608      	mov	r0, r1
 800b0a2:	4611      	mov	r1, r2
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	70fb      	strb	r3, [r7, #3]
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	70bb      	strb	r3, [r7, #2]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b0b2:	7878      	ldrb	r0, [r7, #1]
 800b0b4:	78ba      	ldrb	r2, [r7, #2]
 800b0b6:	78f9      	ldrb	r1, [r7, #3]
 800b0b8:	8b3b      	ldrh	r3, [r7, #24]
 800b0ba:	9302      	str	r3, [sp, #8]
 800b0bc:	7d3b      	ldrb	r3, [r7, #20]
 800b0be:	9301      	str	r3, [sp, #4]
 800b0c0:	7c3b      	ldrb	r3, [r7, #16]
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 fa53 	bl	800b572 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3708      	adds	r7, #8
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b082      	sub	sp, #8
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	460b      	mov	r3, r1
 800b0e0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b0e2:	78fb      	ldrb	r3, [r7, #3]
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fa72 	bl	800b5d0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b084      	sub	sp, #16
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	460b      	mov	r3, r1
 800b100:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 f836 	bl	800b174 <USBH_GetFreePipe>
 800b108:	4603      	mov	r3, r0
 800b10a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b10c:	89fb      	ldrh	r3, [r7, #14]
 800b10e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b112:	4293      	cmp	r3, r2
 800b114:	d00a      	beq.n	800b12c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b116:	78fa      	ldrb	r2, [r7, #3]
 800b118:	89fb      	ldrh	r3, [r7, #14]
 800b11a:	f003 030f 	and.w	r3, r3, #15
 800b11e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b122:	6879      	ldr	r1, [r7, #4]
 800b124:	33e0      	adds	r3, #224	@ 0xe0
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	440b      	add	r3, r1
 800b12a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b12c:	89fb      	ldrh	r3, [r7, #14]
 800b12e:	b2db      	uxtb	r3, r3
}
 800b130:	4618      	mov	r0, r3
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	460b      	mov	r3, r1
 800b142:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b144:	78fb      	ldrb	r3, [r7, #3]
 800b146:	2b0f      	cmp	r3, #15
 800b148:	d80d      	bhi.n	800b166 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b14a:	78fb      	ldrb	r3, [r7, #3]
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	33e0      	adds	r3, #224	@ 0xe0
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	4413      	add	r3, r2
 800b154:	685a      	ldr	r2, [r3, #4]
 800b156:	78fb      	ldrb	r3, [r7, #3]
 800b158:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b15c:	6879      	ldr	r1, [r7, #4]
 800b15e:	33e0      	adds	r3, #224	@ 0xe0
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	440b      	add	r3, r1
 800b164:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b166:	2300      	movs	r3, #0
}
 800b168:	4618      	mov	r0, r3
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b17c:	2300      	movs	r3, #0
 800b17e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b180:	2300      	movs	r3, #0
 800b182:	73fb      	strb	r3, [r7, #15]
 800b184:	e00f      	b.n	800b1a6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b186:	7bfb      	ldrb	r3, [r7, #15]
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	33e0      	adds	r3, #224	@ 0xe0
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	4413      	add	r3, r2
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b196:	2b00      	cmp	r3, #0
 800b198:	d102      	bne.n	800b1a0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b19a:	7bfb      	ldrb	r3, [r7, #15]
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	e007      	b.n	800b1b0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b1a0:	7bfb      	ldrb	r3, [r7, #15]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	73fb      	strb	r3, [r7, #15]
 800b1a6:	7bfb      	ldrb	r3, [r7, #15]
 800b1a8:	2b0f      	cmp	r3, #15
 800b1aa:	d9ec      	bls.n	800b186 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b1ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3714      	adds	r7, #20
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	490e      	ldr	r1, [pc, #56]	@ (800b1fc <MX_USB_HOST_Init+0x40>)
 800b1c4:	480e      	ldr	r0, [pc, #56]	@ (800b200 <MX_USB_HOST_Init+0x44>)
 800b1c6:	f7fe fb0f 	bl	80097e8 <USBH_Init>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d001      	beq.n	800b1d4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b1d0:	f7f7 f936 	bl	8002440 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b1d4:	490b      	ldr	r1, [pc, #44]	@ (800b204 <MX_USB_HOST_Init+0x48>)
 800b1d6:	480a      	ldr	r0, [pc, #40]	@ (800b200 <MX_USB_HOST_Init+0x44>)
 800b1d8:	f7fe fbb1 	bl	800993e <USBH_RegisterClass>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d001      	beq.n	800b1e6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b1e2:	f7f7 f92d 	bl	8002440 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b1e6:	4806      	ldr	r0, [pc, #24]	@ (800b200 <MX_USB_HOST_Init+0x44>)
 800b1e8:	f7fe fc35 	bl	8009a56 <USBH_Start>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d001      	beq.n	800b1f6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b1f2:	f7f7 f925 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b1f6:	bf00      	nop
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	0800b21d 	.word	0x0800b21d
 800b200:	20000324 	.word	0x20000324
 800b204:	20000010 	.word	0x20000010

0800b208 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b20c:	4802      	ldr	r0, [pc, #8]	@ (800b218 <MX_USB_HOST_Process+0x10>)
 800b20e:	f7fe fc33 	bl	8009a78 <USBH_Process>
}
 800b212:	bf00      	nop
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	20000324 	.word	0x20000324

0800b21c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	460b      	mov	r3, r1
 800b226:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b228:	78fb      	ldrb	r3, [r7, #3]
 800b22a:	3b01      	subs	r3, #1
 800b22c:	2b04      	cmp	r3, #4
 800b22e:	d819      	bhi.n	800b264 <USBH_UserProcess+0x48>
 800b230:	a201      	add	r2, pc, #4	@ (adr r2, 800b238 <USBH_UserProcess+0x1c>)
 800b232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b236:	bf00      	nop
 800b238:	0800b265 	.word	0x0800b265
 800b23c:	0800b255 	.word	0x0800b255
 800b240:	0800b265 	.word	0x0800b265
 800b244:	0800b25d 	.word	0x0800b25d
 800b248:	0800b24d 	.word	0x0800b24d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b24c:	4b09      	ldr	r3, [pc, #36]	@ (800b274 <USBH_UserProcess+0x58>)
 800b24e:	2203      	movs	r2, #3
 800b250:	701a      	strb	r2, [r3, #0]
  break;
 800b252:	e008      	b.n	800b266 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b254:	4b07      	ldr	r3, [pc, #28]	@ (800b274 <USBH_UserProcess+0x58>)
 800b256:	2202      	movs	r2, #2
 800b258:	701a      	strb	r2, [r3, #0]
  break;
 800b25a:	e004      	b.n	800b266 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b25c:	4b05      	ldr	r3, [pc, #20]	@ (800b274 <USBH_UserProcess+0x58>)
 800b25e:	2201      	movs	r2, #1
 800b260:	701a      	strb	r2, [r3, #0]
  break;
 800b262:	e000      	b.n	800b266 <USBH_UserProcess+0x4a>

  default:
  break;
 800b264:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b266:	bf00      	nop
 800b268:	370c      	adds	r7, #12
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	200006fc 	.word	0x200006fc

0800b278 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b08a      	sub	sp, #40	@ 0x28
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b280:	f107 0314 	add.w	r3, r7, #20
 800b284:	2200      	movs	r2, #0
 800b286:	601a      	str	r2, [r3, #0]
 800b288:	605a      	str	r2, [r3, #4]
 800b28a:	609a      	str	r2, [r3, #8]
 800b28c:	60da      	str	r2, [r3, #12]
 800b28e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b298:	d147      	bne.n	800b32a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b29a:	2300      	movs	r3, #0
 800b29c:	613b      	str	r3, [r7, #16]
 800b29e:	4b25      	ldr	r3, [pc, #148]	@ (800b334 <HAL_HCD_MspInit+0xbc>)
 800b2a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2a2:	4a24      	ldr	r2, [pc, #144]	@ (800b334 <HAL_HCD_MspInit+0xbc>)
 800b2a4:	f043 0301 	orr.w	r3, r3, #1
 800b2a8:	6313      	str	r3, [r2, #48]	@ 0x30
 800b2aa:	4b22      	ldr	r3, [pc, #136]	@ (800b334 <HAL_HCD_MspInit+0xbc>)
 800b2ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	613b      	str	r3, [r7, #16]
 800b2b4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b2b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b2c4:	f107 0314 	add.w	r3, r7, #20
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	481b      	ldr	r0, [pc, #108]	@ (800b338 <HAL_HCD_MspInit+0xc0>)
 800b2cc:	f7f7 fd82 	bl	8002dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b2d0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b2d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2d6:	2302      	movs	r3, #2
 800b2d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b2e2:	230a      	movs	r3, #10
 800b2e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2e6:	f107 0314 	add.w	r3, r7, #20
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	4812      	ldr	r0, [pc, #72]	@ (800b338 <HAL_HCD_MspInit+0xc0>)
 800b2ee:	f7f7 fd71 	bl	8002dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b2f2:	4b10      	ldr	r3, [pc, #64]	@ (800b334 <HAL_HCD_MspInit+0xbc>)
 800b2f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2f6:	4a0f      	ldr	r2, [pc, #60]	@ (800b334 <HAL_HCD_MspInit+0xbc>)
 800b2f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2fc:	6353      	str	r3, [r2, #52]	@ 0x34
 800b2fe:	2300      	movs	r3, #0
 800b300:	60fb      	str	r3, [r7, #12]
 800b302:	4b0c      	ldr	r3, [pc, #48]	@ (800b334 <HAL_HCD_MspInit+0xbc>)
 800b304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b306:	4a0b      	ldr	r2, [pc, #44]	@ (800b334 <HAL_HCD_MspInit+0xbc>)
 800b308:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b30c:	6453      	str	r3, [r2, #68]	@ 0x44
 800b30e:	4b09      	ldr	r3, [pc, #36]	@ (800b334 <HAL_HCD_MspInit+0xbc>)
 800b310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b312:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b316:	60fb      	str	r3, [r7, #12]
 800b318:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b31a:	2200      	movs	r2, #0
 800b31c:	2100      	movs	r1, #0
 800b31e:	2043      	movs	r0, #67	@ 0x43
 800b320:	f7f7 fd21 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b324:	2043      	movs	r0, #67	@ 0x43
 800b326:	f7f7 fd3a 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b32a:	bf00      	nop
 800b32c:	3728      	adds	r7, #40	@ 0x28
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	40023800 	.word	0x40023800
 800b338:	40020000 	.word	0x40020000

0800b33c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fe ff6d 	bl	800a22a <USBH_LL_IncTimer>
}
 800b350:	bf00      	nop
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b366:	4618      	mov	r0, r3
 800b368:	f7fe ffa9 	bl	800a2be <USBH_LL_Connect>
}
 800b36c:	bf00      	nop
 800b36e:	3708      	adds	r7, #8
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b382:	4618      	mov	r0, r3
 800b384:	f7fe ffb2 	bl	800a2ec <USBH_LL_Disconnect>
}
 800b388:	bf00      	nop
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	460b      	mov	r3, r1
 800b39a:	70fb      	strb	r3, [r7, #3]
 800b39c:	4613      	mov	r3, r2
 800b39e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b3a0:	bf00      	nop
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7fe ff5f 	bl	800a27e <USBH_LL_PortEnabled>
}
 800b3c0:	bf00      	nop
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7fe ff5f 	bl	800a29a <USBH_LL_PortDisabled>
}
 800b3dc:	bf00      	nop
 800b3de:	3708      	adds	r7, #8
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d12a      	bne.n	800b44c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b3f6:	4a18      	ldr	r2, [pc, #96]	@ (800b458 <USBH_LL_Init+0x74>)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4a15      	ldr	r2, [pc, #84]	@ (800b458 <USBH_LL_Init+0x74>)
 800b402:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b406:	4b14      	ldr	r3, [pc, #80]	@ (800b458 <USBH_LL_Init+0x74>)
 800b408:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b40c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b40e:	4b12      	ldr	r3, [pc, #72]	@ (800b458 <USBH_LL_Init+0x74>)
 800b410:	2208      	movs	r2, #8
 800b412:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b414:	4b10      	ldr	r3, [pc, #64]	@ (800b458 <USBH_LL_Init+0x74>)
 800b416:	2201      	movs	r2, #1
 800b418:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b41a:	4b0f      	ldr	r3, [pc, #60]	@ (800b458 <USBH_LL_Init+0x74>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b420:	4b0d      	ldr	r3, [pc, #52]	@ (800b458 <USBH_LL_Init+0x74>)
 800b422:	2202      	movs	r2, #2
 800b424:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b426:	4b0c      	ldr	r3, [pc, #48]	@ (800b458 <USBH_LL_Init+0x74>)
 800b428:	2200      	movs	r2, #0
 800b42a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b42c:	480a      	ldr	r0, [pc, #40]	@ (800b458 <USBH_LL_Init+0x74>)
 800b42e:	f7f7 fe86 	bl	800313e <HAL_HCD_Init>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d001      	beq.n	800b43c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b438:	f7f7 f802 	bl	8002440 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b43c:	4806      	ldr	r0, [pc, #24]	@ (800b458 <USBH_LL_Init+0x74>)
 800b43e:	f7f8 fac3 	bl	80039c8 <HAL_HCD_GetCurrentFrame>
 800b442:	4603      	mov	r3, r0
 800b444:	4619      	mov	r1, r3
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f7fe fee0 	bl	800a20c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	20000700 	.word	0x20000700

0800b45c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b464:	2300      	movs	r3, #0
 800b466:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b468:	2300      	movs	r3, #0
 800b46a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b472:	4618      	mov	r0, r3
 800b474:	f7f8 fa30 	bl	80038d8 <HAL_HCD_Start>
 800b478:	4603      	mov	r3, r0
 800b47a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b47c:	7bfb      	ldrb	r3, [r7, #15]
 800b47e:	4618      	mov	r0, r3
 800b480:	f000 f94c 	bl	800b71c <USBH_Get_USB_Status>
 800b484:	4603      	mov	r3, r0
 800b486:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b488:	7bbb      	ldrb	r3, [r7, #14]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b084      	sub	sp, #16
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b49a:	2300      	movs	r3, #0
 800b49c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7f8 fa38 	bl	800391e <HAL_HCD_Stop>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4b2:	7bfb      	ldrb	r3, [r7, #15]
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f000 f931 	bl	800b71c <USBH_Get_USB_Status>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4be:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7f8 fa82 	bl	80039e4 <HAL_HCD_GetCurrentSpeed>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	d00c      	beq.n	800b500 <USBH_LL_GetSpeed+0x38>
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	d80d      	bhi.n	800b506 <USBH_LL_GetSpeed+0x3e>
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d002      	beq.n	800b4f4 <USBH_LL_GetSpeed+0x2c>
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d003      	beq.n	800b4fa <USBH_LL_GetSpeed+0x32>
 800b4f2:	e008      	b.n	800b506 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b4f8:	e008      	b.n	800b50c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	73fb      	strb	r3, [r7, #15]
    break;
 800b4fe:	e005      	b.n	800b50c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b500:	2302      	movs	r3, #2
 800b502:	73fb      	strb	r3, [r7, #15]
    break;
 800b504:	e002      	b.n	800b50c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b506:	2301      	movs	r3, #1
 800b508:	73fb      	strb	r3, [r7, #15]
    break;
 800b50a:	bf00      	nop
  }
  return  speed;
 800b50c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b084      	sub	sp, #16
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b51e:	2300      	movs	r3, #0
 800b520:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b522:	2300      	movs	r3, #0
 800b524:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7f8 fa13 	bl	8003958 <HAL_HCD_ResetPort>
 800b532:	4603      	mov	r3, r0
 800b534:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b536:	7bfb      	ldrb	r3, [r7, #15]
 800b538:	4618      	mov	r0, r3
 800b53a:	f000 f8ef 	bl	800b71c <USBH_Get_USB_Status>
 800b53e:	4603      	mov	r3, r0
 800b540:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b542:	7bbb      	ldrb	r3, [r7, #14]
}
 800b544:	4618      	mov	r0, r3
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	460b      	mov	r3, r1
 800b556:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b55e:	78fa      	ldrb	r2, [r7, #3]
 800b560:	4611      	mov	r1, r2
 800b562:	4618      	mov	r0, r3
 800b564:	f7f8 fa1b 	bl	800399e <HAL_HCD_HC_GetXferCount>
 800b568:	4603      	mov	r3, r0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3708      	adds	r7, #8
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <USBH_LL_OpenPipe>:
                                    uint8_t epnum,
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 800b572:	b590      	push	{r4, r7, lr}
 800b574:	b089      	sub	sp, #36	@ 0x24
 800b576:	af04      	add	r7, sp, #16
 800b578:	6078      	str	r0, [r7, #4]
 800b57a:	4608      	mov	r0, r1
 800b57c:	4611      	mov	r1, r2
 800b57e:	461a      	mov	r2, r3
 800b580:	4603      	mov	r3, r0
 800b582:	70fb      	strb	r3, [r7, #3]
 800b584:	460b      	mov	r3, r1
 800b586:	70bb      	strb	r3, [r7, #2]
 800b588:	4613      	mov	r3, r2
 800b58a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b58c:	2300      	movs	r3, #0
 800b58e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b590:	2300      	movs	r3, #0
 800b592:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe, epnum,
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b59a:	787c      	ldrb	r4, [r7, #1]
 800b59c:	78ba      	ldrb	r2, [r7, #2]
 800b59e:	78f9      	ldrb	r1, [r7, #3]
 800b5a0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b5a2:	9302      	str	r3, [sp, #8]
 800b5a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b5a8:	9301      	str	r3, [sp, #4]
 800b5aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	4623      	mov	r3, r4
 800b5b2:	f7f7 fe2b 	bl	800320c <HAL_HCD_HC_Init>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5ba:	7bfb      	ldrb	r3, [r7, #15]
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f000 f8ad 	bl	800b71c <USBH_Get_USB_Status>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3714      	adds	r7, #20
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd90      	pop	{r4, r7, pc}

0800b5d0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	460b      	mov	r3, r1
 800b5da:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(pipe);

  return USBH_OK;
 800b5dc:	2300      	movs	r3, #0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	370c      	adds	r7, #12
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b5ea:	b590      	push	{r4, r7, lr}
 800b5ec:	b089      	sub	sp, #36	@ 0x24
 800b5ee:	af04      	add	r7, sp, #16
 800b5f0:	6078      	str	r0, [r7, #4]
 800b5f2:	4608      	mov	r0, r1
 800b5f4:	4611      	mov	r1, r2
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	70fb      	strb	r3, [r7, #3]
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	70bb      	strb	r3, [r7, #2]
 800b600:	4613      	mov	r3, r2
 800b602:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b604:	2300      	movs	r3, #0
 800b606:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b608:	2300      	movs	r3, #0
 800b60a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b612:	787c      	ldrb	r4, [r7, #1]
 800b614:	78ba      	ldrb	r2, [r7, #2]
 800b616:	78f9      	ldrb	r1, [r7, #3]
 800b618:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b61c:	9303      	str	r3, [sp, #12]
 800b61e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b620:	9302      	str	r3, [sp, #8]
 800b622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b624:	9301      	str	r3, [sp, #4]
 800b626:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	4623      	mov	r3, r4
 800b62e:	f7f7 fea5 	bl	800337c <HAL_HCD_HC_SubmitRequest>
 800b632:	4603      	mov	r3, r0
 800b634:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b636:	7bfb      	ldrb	r3, [r7, #15]
 800b638:	4618      	mov	r0, r3
 800b63a:	f000 f86f 	bl	800b71c <USBH_Get_USB_Status>
 800b63e:	4603      	mov	r3, r0
 800b640:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b642:	7bbb      	ldrb	r3, [r7, #14]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3714      	adds	r7, #20
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd90      	pop	{r4, r7, pc}

0800b64c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	460b      	mov	r3, r1
 800b656:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b65e:	78fa      	ldrb	r2, [r7, #3]
 800b660:	4611      	mov	r1, r2
 800b662:	4618      	mov	r0, r3
 800b664:	f7f8 f986 	bl	8003974 <HAL_HCD_HC_GetURBState>
 800b668:	4603      	mov	r3, r0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3708      	adds	r7, #8
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b082      	sub	sp, #8
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
 800b67a:	460b      	mov	r3, r1
 800b67c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b684:	2b01      	cmp	r3, #1
 800b686:	d103      	bne.n	800b690 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b688:	78fb      	ldrb	r3, [r7, #3]
 800b68a:	4618      	mov	r0, r3
 800b68c:	f000 f872 	bl	800b774 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b690:	20c8      	movs	r0, #200	@ 0xc8
 800b692:	f7f7 fa69 	bl	8002b68 <HAL_Delay>
  return USBH_OK;
 800b696:	2300      	movs	r3, #0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b085      	sub	sp, #20
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	70fb      	strb	r3, [r7, #3]
 800b6ac:	4613      	mov	r3, r2
 800b6ae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b6b6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b6b8:	78fa      	ldrb	r2, [r7, #3]
 800b6ba:	68f9      	ldr	r1, [r7, #12]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	011b      	lsls	r3, r3, #4
 800b6c0:	1a9b      	subs	r3, r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	440b      	add	r3, r1
 800b6c6:	3317      	adds	r3, #23
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00a      	beq.n	800b6e4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b6ce:	78fa      	ldrb	r2, [r7, #3]
 800b6d0:	68f9      	ldr	r1, [r7, #12]
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	011b      	lsls	r3, r3, #4
 800b6d6:	1a9b      	subs	r3, r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	440b      	add	r3, r1
 800b6dc:	333c      	adds	r3, #60	@ 0x3c
 800b6de:	78ba      	ldrb	r2, [r7, #2]
 800b6e0:	701a      	strb	r2, [r3, #0]
 800b6e2:	e009      	b.n	800b6f8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b6e4:	78fa      	ldrb	r2, [r7, #3]
 800b6e6:	68f9      	ldr	r1, [r7, #12]
 800b6e8:	4613      	mov	r3, r2
 800b6ea:	011b      	lsls	r3, r3, #4
 800b6ec:	1a9b      	subs	r3, r3, r2
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	440b      	add	r3, r1
 800b6f2:	333d      	adds	r3, #61	@ 0x3d
 800b6f4:	78ba      	ldrb	r2, [r7, #2]
 800b6f6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b6f8:	2300      	movs	r3, #0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3714      	adds	r7, #20
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr

0800b706 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b706:	b580      	push	{r7, lr}
 800b708:	b082      	sub	sp, #8
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f7f7 fa2a 	bl	8002b68 <HAL_Delay>
}
 800b714:	bf00      	nop
 800b716:	3708      	adds	r7, #8
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b085      	sub	sp, #20
 800b720:	af00      	add	r7, sp, #0
 800b722:	4603      	mov	r3, r0
 800b724:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b726:	2300      	movs	r3, #0
 800b728:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b72a:	79fb      	ldrb	r3, [r7, #7]
 800b72c:	2b03      	cmp	r3, #3
 800b72e:	d817      	bhi.n	800b760 <USBH_Get_USB_Status+0x44>
 800b730:	a201      	add	r2, pc, #4	@ (adr r2, 800b738 <USBH_Get_USB_Status+0x1c>)
 800b732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b736:	bf00      	nop
 800b738:	0800b749 	.word	0x0800b749
 800b73c:	0800b74f 	.word	0x0800b74f
 800b740:	0800b755 	.word	0x0800b755
 800b744:	0800b75b 	.word	0x0800b75b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b748:	2300      	movs	r3, #0
 800b74a:	73fb      	strb	r3, [r7, #15]
    break;
 800b74c:	e00b      	b.n	800b766 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b74e:	2302      	movs	r3, #2
 800b750:	73fb      	strb	r3, [r7, #15]
    break;
 800b752:	e008      	b.n	800b766 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b754:	2301      	movs	r3, #1
 800b756:	73fb      	strb	r3, [r7, #15]
    break;
 800b758:	e005      	b.n	800b766 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b75a:	2302      	movs	r3, #2
 800b75c:	73fb      	strb	r3, [r7, #15]
    break;
 800b75e:	e002      	b.n	800b766 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b760:	2302      	movs	r3, #2
 800b762:	73fb      	strb	r3, [r7, #15]
    break;
 800b764:	bf00      	nop
  }
  return usb_status;
 800b766:	7bfb      	ldrb	r3, [r7, #15]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3714      	adds	r7, #20
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	4603      	mov	r3, r0
 800b77c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b77e:	79fb      	ldrb	r3, [r7, #7]
 800b780:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b782:	79fb      	ldrb	r3, [r7, #7]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d102      	bne.n	800b78e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b788:	2300      	movs	r3, #0
 800b78a:	73fb      	strb	r3, [r7, #15]
 800b78c:	e001      	b.n	800b792 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b78e:	2301      	movs	r3, #1
 800b790:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b792:	7bfb      	ldrb	r3, [r7, #15]
 800b794:	461a      	mov	r2, r3
 800b796:	2101      	movs	r1, #1
 800b798:	4803      	ldr	r0, [pc, #12]	@ (800b7a8 <MX_DriverVbusFS+0x34>)
 800b79a:	f7f7 fcb7 	bl	800310c <HAL_GPIO_WritePin>
}
 800b79e:	bf00      	nop
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	40020800 	.word	0x40020800

0800b7ac <malloc>:
 800b7ac:	4b02      	ldr	r3, [pc, #8]	@ (800b7b8 <malloc+0xc>)
 800b7ae:	4601      	mov	r1, r0
 800b7b0:	6818      	ldr	r0, [r3, #0]
 800b7b2:	f000 b82d 	b.w	800b810 <_malloc_r>
 800b7b6:	bf00      	nop
 800b7b8:	2000003c 	.word	0x2000003c

0800b7bc <free>:
 800b7bc:	4b02      	ldr	r3, [pc, #8]	@ (800b7c8 <free+0xc>)
 800b7be:	4601      	mov	r1, r0
 800b7c0:	6818      	ldr	r0, [r3, #0]
 800b7c2:	f001 bd19 	b.w	800d1f8 <_free_r>
 800b7c6:	bf00      	nop
 800b7c8:	2000003c 	.word	0x2000003c

0800b7cc <sbrk_aligned>:
 800b7cc:	b570      	push	{r4, r5, r6, lr}
 800b7ce:	4e0f      	ldr	r6, [pc, #60]	@ (800b80c <sbrk_aligned+0x40>)
 800b7d0:	460c      	mov	r4, r1
 800b7d2:	6831      	ldr	r1, [r6, #0]
 800b7d4:	4605      	mov	r5, r0
 800b7d6:	b911      	cbnz	r1, 800b7de <sbrk_aligned+0x12>
 800b7d8:	f000 fe64 	bl	800c4a4 <_sbrk_r>
 800b7dc:	6030      	str	r0, [r6, #0]
 800b7de:	4621      	mov	r1, r4
 800b7e0:	4628      	mov	r0, r5
 800b7e2:	f000 fe5f 	bl	800c4a4 <_sbrk_r>
 800b7e6:	1c43      	adds	r3, r0, #1
 800b7e8:	d103      	bne.n	800b7f2 <sbrk_aligned+0x26>
 800b7ea:	f04f 34ff 	mov.w	r4, #4294967295
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	bd70      	pop	{r4, r5, r6, pc}
 800b7f2:	1cc4      	adds	r4, r0, #3
 800b7f4:	f024 0403 	bic.w	r4, r4, #3
 800b7f8:	42a0      	cmp	r0, r4
 800b7fa:	d0f8      	beq.n	800b7ee <sbrk_aligned+0x22>
 800b7fc:	1a21      	subs	r1, r4, r0
 800b7fe:	4628      	mov	r0, r5
 800b800:	f000 fe50 	bl	800c4a4 <_sbrk_r>
 800b804:	3001      	adds	r0, #1
 800b806:	d1f2      	bne.n	800b7ee <sbrk_aligned+0x22>
 800b808:	e7ef      	b.n	800b7ea <sbrk_aligned+0x1e>
 800b80a:	bf00      	nop
 800b80c:	20000ae0 	.word	0x20000ae0

0800b810 <_malloc_r>:
 800b810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b814:	1ccd      	adds	r5, r1, #3
 800b816:	f025 0503 	bic.w	r5, r5, #3
 800b81a:	3508      	adds	r5, #8
 800b81c:	2d0c      	cmp	r5, #12
 800b81e:	bf38      	it	cc
 800b820:	250c      	movcc	r5, #12
 800b822:	2d00      	cmp	r5, #0
 800b824:	4606      	mov	r6, r0
 800b826:	db01      	blt.n	800b82c <_malloc_r+0x1c>
 800b828:	42a9      	cmp	r1, r5
 800b82a:	d904      	bls.n	800b836 <_malloc_r+0x26>
 800b82c:	230c      	movs	r3, #12
 800b82e:	6033      	str	r3, [r6, #0]
 800b830:	2000      	movs	r0, #0
 800b832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b836:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b90c <_malloc_r+0xfc>
 800b83a:	f000 f869 	bl	800b910 <__malloc_lock>
 800b83e:	f8d8 3000 	ldr.w	r3, [r8]
 800b842:	461c      	mov	r4, r3
 800b844:	bb44      	cbnz	r4, 800b898 <_malloc_r+0x88>
 800b846:	4629      	mov	r1, r5
 800b848:	4630      	mov	r0, r6
 800b84a:	f7ff ffbf 	bl	800b7cc <sbrk_aligned>
 800b84e:	1c43      	adds	r3, r0, #1
 800b850:	4604      	mov	r4, r0
 800b852:	d158      	bne.n	800b906 <_malloc_r+0xf6>
 800b854:	f8d8 4000 	ldr.w	r4, [r8]
 800b858:	4627      	mov	r7, r4
 800b85a:	2f00      	cmp	r7, #0
 800b85c:	d143      	bne.n	800b8e6 <_malloc_r+0xd6>
 800b85e:	2c00      	cmp	r4, #0
 800b860:	d04b      	beq.n	800b8fa <_malloc_r+0xea>
 800b862:	6823      	ldr	r3, [r4, #0]
 800b864:	4639      	mov	r1, r7
 800b866:	4630      	mov	r0, r6
 800b868:	eb04 0903 	add.w	r9, r4, r3
 800b86c:	f000 fe1a 	bl	800c4a4 <_sbrk_r>
 800b870:	4581      	cmp	r9, r0
 800b872:	d142      	bne.n	800b8fa <_malloc_r+0xea>
 800b874:	6821      	ldr	r1, [r4, #0]
 800b876:	1a6d      	subs	r5, r5, r1
 800b878:	4629      	mov	r1, r5
 800b87a:	4630      	mov	r0, r6
 800b87c:	f7ff ffa6 	bl	800b7cc <sbrk_aligned>
 800b880:	3001      	adds	r0, #1
 800b882:	d03a      	beq.n	800b8fa <_malloc_r+0xea>
 800b884:	6823      	ldr	r3, [r4, #0]
 800b886:	442b      	add	r3, r5
 800b888:	6023      	str	r3, [r4, #0]
 800b88a:	f8d8 3000 	ldr.w	r3, [r8]
 800b88e:	685a      	ldr	r2, [r3, #4]
 800b890:	bb62      	cbnz	r2, 800b8ec <_malloc_r+0xdc>
 800b892:	f8c8 7000 	str.w	r7, [r8]
 800b896:	e00f      	b.n	800b8b8 <_malloc_r+0xa8>
 800b898:	6822      	ldr	r2, [r4, #0]
 800b89a:	1b52      	subs	r2, r2, r5
 800b89c:	d420      	bmi.n	800b8e0 <_malloc_r+0xd0>
 800b89e:	2a0b      	cmp	r2, #11
 800b8a0:	d917      	bls.n	800b8d2 <_malloc_r+0xc2>
 800b8a2:	1961      	adds	r1, r4, r5
 800b8a4:	42a3      	cmp	r3, r4
 800b8a6:	6025      	str	r5, [r4, #0]
 800b8a8:	bf18      	it	ne
 800b8aa:	6059      	strne	r1, [r3, #4]
 800b8ac:	6863      	ldr	r3, [r4, #4]
 800b8ae:	bf08      	it	eq
 800b8b0:	f8c8 1000 	streq.w	r1, [r8]
 800b8b4:	5162      	str	r2, [r4, r5]
 800b8b6:	604b      	str	r3, [r1, #4]
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	f000 f82f 	bl	800b91c <__malloc_unlock>
 800b8be:	f104 000b 	add.w	r0, r4, #11
 800b8c2:	1d23      	adds	r3, r4, #4
 800b8c4:	f020 0007 	bic.w	r0, r0, #7
 800b8c8:	1ac2      	subs	r2, r0, r3
 800b8ca:	bf1c      	itt	ne
 800b8cc:	1a1b      	subne	r3, r3, r0
 800b8ce:	50a3      	strne	r3, [r4, r2]
 800b8d0:	e7af      	b.n	800b832 <_malloc_r+0x22>
 800b8d2:	6862      	ldr	r2, [r4, #4]
 800b8d4:	42a3      	cmp	r3, r4
 800b8d6:	bf0c      	ite	eq
 800b8d8:	f8c8 2000 	streq.w	r2, [r8]
 800b8dc:	605a      	strne	r2, [r3, #4]
 800b8de:	e7eb      	b.n	800b8b8 <_malloc_r+0xa8>
 800b8e0:	4623      	mov	r3, r4
 800b8e2:	6864      	ldr	r4, [r4, #4]
 800b8e4:	e7ae      	b.n	800b844 <_malloc_r+0x34>
 800b8e6:	463c      	mov	r4, r7
 800b8e8:	687f      	ldr	r7, [r7, #4]
 800b8ea:	e7b6      	b.n	800b85a <_malloc_r+0x4a>
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	42a3      	cmp	r3, r4
 800b8f2:	d1fb      	bne.n	800b8ec <_malloc_r+0xdc>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	6053      	str	r3, [r2, #4]
 800b8f8:	e7de      	b.n	800b8b8 <_malloc_r+0xa8>
 800b8fa:	230c      	movs	r3, #12
 800b8fc:	6033      	str	r3, [r6, #0]
 800b8fe:	4630      	mov	r0, r6
 800b900:	f000 f80c 	bl	800b91c <__malloc_unlock>
 800b904:	e794      	b.n	800b830 <_malloc_r+0x20>
 800b906:	6005      	str	r5, [r0, #0]
 800b908:	e7d6      	b.n	800b8b8 <_malloc_r+0xa8>
 800b90a:	bf00      	nop
 800b90c:	20000ae4 	.word	0x20000ae4

0800b910 <__malloc_lock>:
 800b910:	4801      	ldr	r0, [pc, #4]	@ (800b918 <__malloc_lock+0x8>)
 800b912:	f000 be14 	b.w	800c53e <__retarget_lock_acquire_recursive>
 800b916:	bf00      	nop
 800b918:	20000c28 	.word	0x20000c28

0800b91c <__malloc_unlock>:
 800b91c:	4801      	ldr	r0, [pc, #4]	@ (800b924 <__malloc_unlock+0x8>)
 800b91e:	f000 be0f 	b.w	800c540 <__retarget_lock_release_recursive>
 800b922:	bf00      	nop
 800b924:	20000c28 	.word	0x20000c28

0800b928 <__cvt>:
 800b928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b92c:	ec57 6b10 	vmov	r6, r7, d0
 800b930:	2f00      	cmp	r7, #0
 800b932:	460c      	mov	r4, r1
 800b934:	4619      	mov	r1, r3
 800b936:	463b      	mov	r3, r7
 800b938:	bfbb      	ittet	lt
 800b93a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b93e:	461f      	movlt	r7, r3
 800b940:	2300      	movge	r3, #0
 800b942:	232d      	movlt	r3, #45	@ 0x2d
 800b944:	700b      	strb	r3, [r1, #0]
 800b946:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b948:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b94c:	4691      	mov	r9, r2
 800b94e:	f023 0820 	bic.w	r8, r3, #32
 800b952:	bfbc      	itt	lt
 800b954:	4632      	movlt	r2, r6
 800b956:	4616      	movlt	r6, r2
 800b958:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b95c:	d005      	beq.n	800b96a <__cvt+0x42>
 800b95e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b962:	d100      	bne.n	800b966 <__cvt+0x3e>
 800b964:	3401      	adds	r4, #1
 800b966:	2102      	movs	r1, #2
 800b968:	e000      	b.n	800b96c <__cvt+0x44>
 800b96a:	2103      	movs	r1, #3
 800b96c:	ab03      	add	r3, sp, #12
 800b96e:	9301      	str	r3, [sp, #4]
 800b970:	ab02      	add	r3, sp, #8
 800b972:	9300      	str	r3, [sp, #0]
 800b974:	ec47 6b10 	vmov	d0, r6, r7
 800b978:	4653      	mov	r3, sl
 800b97a:	4622      	mov	r2, r4
 800b97c:	f000 fe6c 	bl	800c658 <_dtoa_r>
 800b980:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b984:	4605      	mov	r5, r0
 800b986:	d119      	bne.n	800b9bc <__cvt+0x94>
 800b988:	f019 0f01 	tst.w	r9, #1
 800b98c:	d00e      	beq.n	800b9ac <__cvt+0x84>
 800b98e:	eb00 0904 	add.w	r9, r0, r4
 800b992:	2200      	movs	r2, #0
 800b994:	2300      	movs	r3, #0
 800b996:	4630      	mov	r0, r6
 800b998:	4639      	mov	r1, r7
 800b99a:	f7f5 f895 	bl	8000ac8 <__aeabi_dcmpeq>
 800b99e:	b108      	cbz	r0, 800b9a4 <__cvt+0x7c>
 800b9a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b9a4:	2230      	movs	r2, #48	@ 0x30
 800b9a6:	9b03      	ldr	r3, [sp, #12]
 800b9a8:	454b      	cmp	r3, r9
 800b9aa:	d31e      	bcc.n	800b9ea <__cvt+0xc2>
 800b9ac:	9b03      	ldr	r3, [sp, #12]
 800b9ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9b0:	1b5b      	subs	r3, r3, r5
 800b9b2:	4628      	mov	r0, r5
 800b9b4:	6013      	str	r3, [r2, #0]
 800b9b6:	b004      	add	sp, #16
 800b9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b9c0:	eb00 0904 	add.w	r9, r0, r4
 800b9c4:	d1e5      	bne.n	800b992 <__cvt+0x6a>
 800b9c6:	7803      	ldrb	r3, [r0, #0]
 800b9c8:	2b30      	cmp	r3, #48	@ 0x30
 800b9ca:	d10a      	bne.n	800b9e2 <__cvt+0xba>
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	4639      	mov	r1, r7
 800b9d4:	f7f5 f878 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9d8:	b918      	cbnz	r0, 800b9e2 <__cvt+0xba>
 800b9da:	f1c4 0401 	rsb	r4, r4, #1
 800b9de:	f8ca 4000 	str.w	r4, [sl]
 800b9e2:	f8da 3000 	ldr.w	r3, [sl]
 800b9e6:	4499      	add	r9, r3
 800b9e8:	e7d3      	b.n	800b992 <__cvt+0x6a>
 800b9ea:	1c59      	adds	r1, r3, #1
 800b9ec:	9103      	str	r1, [sp, #12]
 800b9ee:	701a      	strb	r2, [r3, #0]
 800b9f0:	e7d9      	b.n	800b9a6 <__cvt+0x7e>

0800b9f2 <__exponent>:
 800b9f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9f4:	2900      	cmp	r1, #0
 800b9f6:	bfba      	itte	lt
 800b9f8:	4249      	neglt	r1, r1
 800b9fa:	232d      	movlt	r3, #45	@ 0x2d
 800b9fc:	232b      	movge	r3, #43	@ 0x2b
 800b9fe:	2909      	cmp	r1, #9
 800ba00:	7002      	strb	r2, [r0, #0]
 800ba02:	7043      	strb	r3, [r0, #1]
 800ba04:	dd29      	ble.n	800ba5a <__exponent+0x68>
 800ba06:	f10d 0307 	add.w	r3, sp, #7
 800ba0a:	461d      	mov	r5, r3
 800ba0c:	270a      	movs	r7, #10
 800ba0e:	461a      	mov	r2, r3
 800ba10:	fbb1 f6f7 	udiv	r6, r1, r7
 800ba14:	fb07 1416 	mls	r4, r7, r6, r1
 800ba18:	3430      	adds	r4, #48	@ 0x30
 800ba1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ba1e:	460c      	mov	r4, r1
 800ba20:	2c63      	cmp	r4, #99	@ 0x63
 800ba22:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba26:	4631      	mov	r1, r6
 800ba28:	dcf1      	bgt.n	800ba0e <__exponent+0x1c>
 800ba2a:	3130      	adds	r1, #48	@ 0x30
 800ba2c:	1e94      	subs	r4, r2, #2
 800ba2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ba32:	1c41      	adds	r1, r0, #1
 800ba34:	4623      	mov	r3, r4
 800ba36:	42ab      	cmp	r3, r5
 800ba38:	d30a      	bcc.n	800ba50 <__exponent+0x5e>
 800ba3a:	f10d 0309 	add.w	r3, sp, #9
 800ba3e:	1a9b      	subs	r3, r3, r2
 800ba40:	42ac      	cmp	r4, r5
 800ba42:	bf88      	it	hi
 800ba44:	2300      	movhi	r3, #0
 800ba46:	3302      	adds	r3, #2
 800ba48:	4403      	add	r3, r0
 800ba4a:	1a18      	subs	r0, r3, r0
 800ba4c:	b003      	add	sp, #12
 800ba4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba50:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ba54:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ba58:	e7ed      	b.n	800ba36 <__exponent+0x44>
 800ba5a:	2330      	movs	r3, #48	@ 0x30
 800ba5c:	3130      	adds	r1, #48	@ 0x30
 800ba5e:	7083      	strb	r3, [r0, #2]
 800ba60:	70c1      	strb	r1, [r0, #3]
 800ba62:	1d03      	adds	r3, r0, #4
 800ba64:	e7f1      	b.n	800ba4a <__exponent+0x58>
	...

0800ba68 <_printf_float>:
 800ba68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6c:	b08d      	sub	sp, #52	@ 0x34
 800ba6e:	460c      	mov	r4, r1
 800ba70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ba74:	4616      	mov	r6, r2
 800ba76:	461f      	mov	r7, r3
 800ba78:	4605      	mov	r5, r0
 800ba7a:	f000 fcdb 	bl	800c434 <_localeconv_r>
 800ba7e:	6803      	ldr	r3, [r0, #0]
 800ba80:	9304      	str	r3, [sp, #16]
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7f4 fbf4 	bl	8000270 <strlen>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba8c:	f8d8 3000 	ldr.w	r3, [r8]
 800ba90:	9005      	str	r0, [sp, #20]
 800ba92:	3307      	adds	r3, #7
 800ba94:	f023 0307 	bic.w	r3, r3, #7
 800ba98:	f103 0208 	add.w	r2, r3, #8
 800ba9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800baa0:	f8d4 b000 	ldr.w	fp, [r4]
 800baa4:	f8c8 2000 	str.w	r2, [r8]
 800baa8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800baac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bab0:	9307      	str	r3, [sp, #28]
 800bab2:	f8cd 8018 	str.w	r8, [sp, #24]
 800bab6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800baba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800babe:	4b9c      	ldr	r3, [pc, #624]	@ (800bd30 <_printf_float+0x2c8>)
 800bac0:	f04f 32ff 	mov.w	r2, #4294967295
 800bac4:	f7f5 f832 	bl	8000b2c <__aeabi_dcmpun>
 800bac8:	bb70      	cbnz	r0, 800bb28 <_printf_float+0xc0>
 800baca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bace:	4b98      	ldr	r3, [pc, #608]	@ (800bd30 <_printf_float+0x2c8>)
 800bad0:	f04f 32ff 	mov.w	r2, #4294967295
 800bad4:	f7f5 f80c 	bl	8000af0 <__aeabi_dcmple>
 800bad8:	bb30      	cbnz	r0, 800bb28 <_printf_float+0xc0>
 800bada:	2200      	movs	r2, #0
 800badc:	2300      	movs	r3, #0
 800bade:	4640      	mov	r0, r8
 800bae0:	4649      	mov	r1, r9
 800bae2:	f7f4 fffb 	bl	8000adc <__aeabi_dcmplt>
 800bae6:	b110      	cbz	r0, 800baee <_printf_float+0x86>
 800bae8:	232d      	movs	r3, #45	@ 0x2d
 800baea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800baee:	4a91      	ldr	r2, [pc, #580]	@ (800bd34 <_printf_float+0x2cc>)
 800baf0:	4b91      	ldr	r3, [pc, #580]	@ (800bd38 <_printf_float+0x2d0>)
 800baf2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800baf6:	bf8c      	ite	hi
 800baf8:	4690      	movhi	r8, r2
 800bafa:	4698      	movls	r8, r3
 800bafc:	2303      	movs	r3, #3
 800bafe:	6123      	str	r3, [r4, #16]
 800bb00:	f02b 0304 	bic.w	r3, fp, #4
 800bb04:	6023      	str	r3, [r4, #0]
 800bb06:	f04f 0900 	mov.w	r9, #0
 800bb0a:	9700      	str	r7, [sp, #0]
 800bb0c:	4633      	mov	r3, r6
 800bb0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bb10:	4621      	mov	r1, r4
 800bb12:	4628      	mov	r0, r5
 800bb14:	f000 f9d2 	bl	800bebc <_printf_common>
 800bb18:	3001      	adds	r0, #1
 800bb1a:	f040 808d 	bne.w	800bc38 <_printf_float+0x1d0>
 800bb1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb22:	b00d      	add	sp, #52	@ 0x34
 800bb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb28:	4642      	mov	r2, r8
 800bb2a:	464b      	mov	r3, r9
 800bb2c:	4640      	mov	r0, r8
 800bb2e:	4649      	mov	r1, r9
 800bb30:	f7f4 fffc 	bl	8000b2c <__aeabi_dcmpun>
 800bb34:	b140      	cbz	r0, 800bb48 <_printf_float+0xe0>
 800bb36:	464b      	mov	r3, r9
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	bfbc      	itt	lt
 800bb3c:	232d      	movlt	r3, #45	@ 0x2d
 800bb3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bb42:	4a7e      	ldr	r2, [pc, #504]	@ (800bd3c <_printf_float+0x2d4>)
 800bb44:	4b7e      	ldr	r3, [pc, #504]	@ (800bd40 <_printf_float+0x2d8>)
 800bb46:	e7d4      	b.n	800baf2 <_printf_float+0x8a>
 800bb48:	6863      	ldr	r3, [r4, #4]
 800bb4a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bb4e:	9206      	str	r2, [sp, #24]
 800bb50:	1c5a      	adds	r2, r3, #1
 800bb52:	d13b      	bne.n	800bbcc <_printf_float+0x164>
 800bb54:	2306      	movs	r3, #6
 800bb56:	6063      	str	r3, [r4, #4]
 800bb58:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	6022      	str	r2, [r4, #0]
 800bb60:	9303      	str	r3, [sp, #12]
 800bb62:	ab0a      	add	r3, sp, #40	@ 0x28
 800bb64:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bb68:	ab09      	add	r3, sp, #36	@ 0x24
 800bb6a:	9300      	str	r3, [sp, #0]
 800bb6c:	6861      	ldr	r1, [r4, #4]
 800bb6e:	ec49 8b10 	vmov	d0, r8, r9
 800bb72:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bb76:	4628      	mov	r0, r5
 800bb78:	f7ff fed6 	bl	800b928 <__cvt>
 800bb7c:	9b06      	ldr	r3, [sp, #24]
 800bb7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb80:	2b47      	cmp	r3, #71	@ 0x47
 800bb82:	4680      	mov	r8, r0
 800bb84:	d129      	bne.n	800bbda <_printf_float+0x172>
 800bb86:	1cc8      	adds	r0, r1, #3
 800bb88:	db02      	blt.n	800bb90 <_printf_float+0x128>
 800bb8a:	6863      	ldr	r3, [r4, #4]
 800bb8c:	4299      	cmp	r1, r3
 800bb8e:	dd41      	ble.n	800bc14 <_printf_float+0x1ac>
 800bb90:	f1aa 0a02 	sub.w	sl, sl, #2
 800bb94:	fa5f fa8a 	uxtb.w	sl, sl
 800bb98:	3901      	subs	r1, #1
 800bb9a:	4652      	mov	r2, sl
 800bb9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bba0:	9109      	str	r1, [sp, #36]	@ 0x24
 800bba2:	f7ff ff26 	bl	800b9f2 <__exponent>
 800bba6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bba8:	1813      	adds	r3, r2, r0
 800bbaa:	2a01      	cmp	r2, #1
 800bbac:	4681      	mov	r9, r0
 800bbae:	6123      	str	r3, [r4, #16]
 800bbb0:	dc02      	bgt.n	800bbb8 <_printf_float+0x150>
 800bbb2:	6822      	ldr	r2, [r4, #0]
 800bbb4:	07d2      	lsls	r2, r2, #31
 800bbb6:	d501      	bpl.n	800bbbc <_printf_float+0x154>
 800bbb8:	3301      	adds	r3, #1
 800bbba:	6123      	str	r3, [r4, #16]
 800bbbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d0a2      	beq.n	800bb0a <_printf_float+0xa2>
 800bbc4:	232d      	movs	r3, #45	@ 0x2d
 800bbc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbca:	e79e      	b.n	800bb0a <_printf_float+0xa2>
 800bbcc:	9a06      	ldr	r2, [sp, #24]
 800bbce:	2a47      	cmp	r2, #71	@ 0x47
 800bbd0:	d1c2      	bne.n	800bb58 <_printf_float+0xf0>
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d1c0      	bne.n	800bb58 <_printf_float+0xf0>
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e7bd      	b.n	800bb56 <_printf_float+0xee>
 800bbda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bbde:	d9db      	bls.n	800bb98 <_printf_float+0x130>
 800bbe0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bbe4:	d118      	bne.n	800bc18 <_printf_float+0x1b0>
 800bbe6:	2900      	cmp	r1, #0
 800bbe8:	6863      	ldr	r3, [r4, #4]
 800bbea:	dd0b      	ble.n	800bc04 <_printf_float+0x19c>
 800bbec:	6121      	str	r1, [r4, #16]
 800bbee:	b913      	cbnz	r3, 800bbf6 <_printf_float+0x18e>
 800bbf0:	6822      	ldr	r2, [r4, #0]
 800bbf2:	07d0      	lsls	r0, r2, #31
 800bbf4:	d502      	bpl.n	800bbfc <_printf_float+0x194>
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	440b      	add	r3, r1
 800bbfa:	6123      	str	r3, [r4, #16]
 800bbfc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bbfe:	f04f 0900 	mov.w	r9, #0
 800bc02:	e7db      	b.n	800bbbc <_printf_float+0x154>
 800bc04:	b913      	cbnz	r3, 800bc0c <_printf_float+0x1a4>
 800bc06:	6822      	ldr	r2, [r4, #0]
 800bc08:	07d2      	lsls	r2, r2, #31
 800bc0a:	d501      	bpl.n	800bc10 <_printf_float+0x1a8>
 800bc0c:	3302      	adds	r3, #2
 800bc0e:	e7f4      	b.n	800bbfa <_printf_float+0x192>
 800bc10:	2301      	movs	r3, #1
 800bc12:	e7f2      	b.n	800bbfa <_printf_float+0x192>
 800bc14:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bc18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc1a:	4299      	cmp	r1, r3
 800bc1c:	db05      	blt.n	800bc2a <_printf_float+0x1c2>
 800bc1e:	6823      	ldr	r3, [r4, #0]
 800bc20:	6121      	str	r1, [r4, #16]
 800bc22:	07d8      	lsls	r0, r3, #31
 800bc24:	d5ea      	bpl.n	800bbfc <_printf_float+0x194>
 800bc26:	1c4b      	adds	r3, r1, #1
 800bc28:	e7e7      	b.n	800bbfa <_printf_float+0x192>
 800bc2a:	2900      	cmp	r1, #0
 800bc2c:	bfd4      	ite	le
 800bc2e:	f1c1 0202 	rsble	r2, r1, #2
 800bc32:	2201      	movgt	r2, #1
 800bc34:	4413      	add	r3, r2
 800bc36:	e7e0      	b.n	800bbfa <_printf_float+0x192>
 800bc38:	6823      	ldr	r3, [r4, #0]
 800bc3a:	055a      	lsls	r2, r3, #21
 800bc3c:	d407      	bmi.n	800bc4e <_printf_float+0x1e6>
 800bc3e:	6923      	ldr	r3, [r4, #16]
 800bc40:	4642      	mov	r2, r8
 800bc42:	4631      	mov	r1, r6
 800bc44:	4628      	mov	r0, r5
 800bc46:	47b8      	blx	r7
 800bc48:	3001      	adds	r0, #1
 800bc4a:	d12b      	bne.n	800bca4 <_printf_float+0x23c>
 800bc4c:	e767      	b.n	800bb1e <_printf_float+0xb6>
 800bc4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc52:	f240 80dd 	bls.w	800be10 <_printf_float+0x3a8>
 800bc56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	f7f4 ff33 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc62:	2800      	cmp	r0, #0
 800bc64:	d033      	beq.n	800bcce <_printf_float+0x266>
 800bc66:	4a37      	ldr	r2, [pc, #220]	@ (800bd44 <_printf_float+0x2dc>)
 800bc68:	2301      	movs	r3, #1
 800bc6a:	4631      	mov	r1, r6
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	47b8      	blx	r7
 800bc70:	3001      	adds	r0, #1
 800bc72:	f43f af54 	beq.w	800bb1e <_printf_float+0xb6>
 800bc76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bc7a:	4543      	cmp	r3, r8
 800bc7c:	db02      	blt.n	800bc84 <_printf_float+0x21c>
 800bc7e:	6823      	ldr	r3, [r4, #0]
 800bc80:	07d8      	lsls	r0, r3, #31
 800bc82:	d50f      	bpl.n	800bca4 <_printf_float+0x23c>
 800bc84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc88:	4631      	mov	r1, r6
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	47b8      	blx	r7
 800bc8e:	3001      	adds	r0, #1
 800bc90:	f43f af45 	beq.w	800bb1e <_printf_float+0xb6>
 800bc94:	f04f 0900 	mov.w	r9, #0
 800bc98:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc9c:	f104 0a1a 	add.w	sl, r4, #26
 800bca0:	45c8      	cmp	r8, r9
 800bca2:	dc09      	bgt.n	800bcb8 <_printf_float+0x250>
 800bca4:	6823      	ldr	r3, [r4, #0]
 800bca6:	079b      	lsls	r3, r3, #30
 800bca8:	f100 8103 	bmi.w	800beb2 <_printf_float+0x44a>
 800bcac:	68e0      	ldr	r0, [r4, #12]
 800bcae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcb0:	4298      	cmp	r0, r3
 800bcb2:	bfb8      	it	lt
 800bcb4:	4618      	movlt	r0, r3
 800bcb6:	e734      	b.n	800bb22 <_printf_float+0xba>
 800bcb8:	2301      	movs	r3, #1
 800bcba:	4652      	mov	r2, sl
 800bcbc:	4631      	mov	r1, r6
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	47b8      	blx	r7
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	f43f af2b 	beq.w	800bb1e <_printf_float+0xb6>
 800bcc8:	f109 0901 	add.w	r9, r9, #1
 800bccc:	e7e8      	b.n	800bca0 <_printf_float+0x238>
 800bcce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	dc39      	bgt.n	800bd48 <_printf_float+0x2e0>
 800bcd4:	4a1b      	ldr	r2, [pc, #108]	@ (800bd44 <_printf_float+0x2dc>)
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	4631      	mov	r1, r6
 800bcda:	4628      	mov	r0, r5
 800bcdc:	47b8      	blx	r7
 800bcde:	3001      	adds	r0, #1
 800bce0:	f43f af1d 	beq.w	800bb1e <_printf_float+0xb6>
 800bce4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bce8:	ea59 0303 	orrs.w	r3, r9, r3
 800bcec:	d102      	bne.n	800bcf4 <_printf_float+0x28c>
 800bcee:	6823      	ldr	r3, [r4, #0]
 800bcf0:	07d9      	lsls	r1, r3, #31
 800bcf2:	d5d7      	bpl.n	800bca4 <_printf_float+0x23c>
 800bcf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcf8:	4631      	mov	r1, r6
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	47b8      	blx	r7
 800bcfe:	3001      	adds	r0, #1
 800bd00:	f43f af0d 	beq.w	800bb1e <_printf_float+0xb6>
 800bd04:	f04f 0a00 	mov.w	sl, #0
 800bd08:	f104 0b1a 	add.w	fp, r4, #26
 800bd0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd0e:	425b      	negs	r3, r3
 800bd10:	4553      	cmp	r3, sl
 800bd12:	dc01      	bgt.n	800bd18 <_printf_float+0x2b0>
 800bd14:	464b      	mov	r3, r9
 800bd16:	e793      	b.n	800bc40 <_printf_float+0x1d8>
 800bd18:	2301      	movs	r3, #1
 800bd1a:	465a      	mov	r2, fp
 800bd1c:	4631      	mov	r1, r6
 800bd1e:	4628      	mov	r0, r5
 800bd20:	47b8      	blx	r7
 800bd22:	3001      	adds	r0, #1
 800bd24:	f43f aefb 	beq.w	800bb1e <_printf_float+0xb6>
 800bd28:	f10a 0a01 	add.w	sl, sl, #1
 800bd2c:	e7ee      	b.n	800bd0c <_printf_float+0x2a4>
 800bd2e:	bf00      	nop
 800bd30:	7fefffff 	.word	0x7fefffff
 800bd34:	0800fc60 	.word	0x0800fc60
 800bd38:	0800fc5c 	.word	0x0800fc5c
 800bd3c:	0800fc68 	.word	0x0800fc68
 800bd40:	0800fc64 	.word	0x0800fc64
 800bd44:	0800fc6c 	.word	0x0800fc6c
 800bd48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd4a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bd4e:	4553      	cmp	r3, sl
 800bd50:	bfa8      	it	ge
 800bd52:	4653      	movge	r3, sl
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	4699      	mov	r9, r3
 800bd58:	dc36      	bgt.n	800bdc8 <_printf_float+0x360>
 800bd5a:	f04f 0b00 	mov.w	fp, #0
 800bd5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd62:	f104 021a 	add.w	r2, r4, #26
 800bd66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd68:	9306      	str	r3, [sp, #24]
 800bd6a:	eba3 0309 	sub.w	r3, r3, r9
 800bd6e:	455b      	cmp	r3, fp
 800bd70:	dc31      	bgt.n	800bdd6 <_printf_float+0x36e>
 800bd72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd74:	459a      	cmp	sl, r3
 800bd76:	dc3a      	bgt.n	800bdee <_printf_float+0x386>
 800bd78:	6823      	ldr	r3, [r4, #0]
 800bd7a:	07da      	lsls	r2, r3, #31
 800bd7c:	d437      	bmi.n	800bdee <_printf_float+0x386>
 800bd7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd80:	ebaa 0903 	sub.w	r9, sl, r3
 800bd84:	9b06      	ldr	r3, [sp, #24]
 800bd86:	ebaa 0303 	sub.w	r3, sl, r3
 800bd8a:	4599      	cmp	r9, r3
 800bd8c:	bfa8      	it	ge
 800bd8e:	4699      	movge	r9, r3
 800bd90:	f1b9 0f00 	cmp.w	r9, #0
 800bd94:	dc33      	bgt.n	800bdfe <_printf_float+0x396>
 800bd96:	f04f 0800 	mov.w	r8, #0
 800bd9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd9e:	f104 0b1a 	add.w	fp, r4, #26
 800bda2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bda4:	ebaa 0303 	sub.w	r3, sl, r3
 800bda8:	eba3 0309 	sub.w	r3, r3, r9
 800bdac:	4543      	cmp	r3, r8
 800bdae:	f77f af79 	ble.w	800bca4 <_printf_float+0x23c>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	465a      	mov	r2, fp
 800bdb6:	4631      	mov	r1, r6
 800bdb8:	4628      	mov	r0, r5
 800bdba:	47b8      	blx	r7
 800bdbc:	3001      	adds	r0, #1
 800bdbe:	f43f aeae 	beq.w	800bb1e <_printf_float+0xb6>
 800bdc2:	f108 0801 	add.w	r8, r8, #1
 800bdc6:	e7ec      	b.n	800bda2 <_printf_float+0x33a>
 800bdc8:	4642      	mov	r2, r8
 800bdca:	4631      	mov	r1, r6
 800bdcc:	4628      	mov	r0, r5
 800bdce:	47b8      	blx	r7
 800bdd0:	3001      	adds	r0, #1
 800bdd2:	d1c2      	bne.n	800bd5a <_printf_float+0x2f2>
 800bdd4:	e6a3      	b.n	800bb1e <_printf_float+0xb6>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	4631      	mov	r1, r6
 800bdda:	4628      	mov	r0, r5
 800bddc:	9206      	str	r2, [sp, #24]
 800bdde:	47b8      	blx	r7
 800bde0:	3001      	adds	r0, #1
 800bde2:	f43f ae9c 	beq.w	800bb1e <_printf_float+0xb6>
 800bde6:	9a06      	ldr	r2, [sp, #24]
 800bde8:	f10b 0b01 	add.w	fp, fp, #1
 800bdec:	e7bb      	b.n	800bd66 <_printf_float+0x2fe>
 800bdee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdf2:	4631      	mov	r1, r6
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	47b8      	blx	r7
 800bdf8:	3001      	adds	r0, #1
 800bdfa:	d1c0      	bne.n	800bd7e <_printf_float+0x316>
 800bdfc:	e68f      	b.n	800bb1e <_printf_float+0xb6>
 800bdfe:	9a06      	ldr	r2, [sp, #24]
 800be00:	464b      	mov	r3, r9
 800be02:	4442      	add	r2, r8
 800be04:	4631      	mov	r1, r6
 800be06:	4628      	mov	r0, r5
 800be08:	47b8      	blx	r7
 800be0a:	3001      	adds	r0, #1
 800be0c:	d1c3      	bne.n	800bd96 <_printf_float+0x32e>
 800be0e:	e686      	b.n	800bb1e <_printf_float+0xb6>
 800be10:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800be14:	f1ba 0f01 	cmp.w	sl, #1
 800be18:	dc01      	bgt.n	800be1e <_printf_float+0x3b6>
 800be1a:	07db      	lsls	r3, r3, #31
 800be1c:	d536      	bpl.n	800be8c <_printf_float+0x424>
 800be1e:	2301      	movs	r3, #1
 800be20:	4642      	mov	r2, r8
 800be22:	4631      	mov	r1, r6
 800be24:	4628      	mov	r0, r5
 800be26:	47b8      	blx	r7
 800be28:	3001      	adds	r0, #1
 800be2a:	f43f ae78 	beq.w	800bb1e <_printf_float+0xb6>
 800be2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be32:	4631      	mov	r1, r6
 800be34:	4628      	mov	r0, r5
 800be36:	47b8      	blx	r7
 800be38:	3001      	adds	r0, #1
 800be3a:	f43f ae70 	beq.w	800bb1e <_printf_float+0xb6>
 800be3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800be42:	2200      	movs	r2, #0
 800be44:	2300      	movs	r3, #0
 800be46:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be4a:	f7f4 fe3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800be4e:	b9c0      	cbnz	r0, 800be82 <_printf_float+0x41a>
 800be50:	4653      	mov	r3, sl
 800be52:	f108 0201 	add.w	r2, r8, #1
 800be56:	4631      	mov	r1, r6
 800be58:	4628      	mov	r0, r5
 800be5a:	47b8      	blx	r7
 800be5c:	3001      	adds	r0, #1
 800be5e:	d10c      	bne.n	800be7a <_printf_float+0x412>
 800be60:	e65d      	b.n	800bb1e <_printf_float+0xb6>
 800be62:	2301      	movs	r3, #1
 800be64:	465a      	mov	r2, fp
 800be66:	4631      	mov	r1, r6
 800be68:	4628      	mov	r0, r5
 800be6a:	47b8      	blx	r7
 800be6c:	3001      	adds	r0, #1
 800be6e:	f43f ae56 	beq.w	800bb1e <_printf_float+0xb6>
 800be72:	f108 0801 	add.w	r8, r8, #1
 800be76:	45d0      	cmp	r8, sl
 800be78:	dbf3      	blt.n	800be62 <_printf_float+0x3fa>
 800be7a:	464b      	mov	r3, r9
 800be7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800be80:	e6df      	b.n	800bc42 <_printf_float+0x1da>
 800be82:	f04f 0800 	mov.w	r8, #0
 800be86:	f104 0b1a 	add.w	fp, r4, #26
 800be8a:	e7f4      	b.n	800be76 <_printf_float+0x40e>
 800be8c:	2301      	movs	r3, #1
 800be8e:	4642      	mov	r2, r8
 800be90:	e7e1      	b.n	800be56 <_printf_float+0x3ee>
 800be92:	2301      	movs	r3, #1
 800be94:	464a      	mov	r2, r9
 800be96:	4631      	mov	r1, r6
 800be98:	4628      	mov	r0, r5
 800be9a:	47b8      	blx	r7
 800be9c:	3001      	adds	r0, #1
 800be9e:	f43f ae3e 	beq.w	800bb1e <_printf_float+0xb6>
 800bea2:	f108 0801 	add.w	r8, r8, #1
 800bea6:	68e3      	ldr	r3, [r4, #12]
 800bea8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800beaa:	1a5b      	subs	r3, r3, r1
 800beac:	4543      	cmp	r3, r8
 800beae:	dcf0      	bgt.n	800be92 <_printf_float+0x42a>
 800beb0:	e6fc      	b.n	800bcac <_printf_float+0x244>
 800beb2:	f04f 0800 	mov.w	r8, #0
 800beb6:	f104 0919 	add.w	r9, r4, #25
 800beba:	e7f4      	b.n	800bea6 <_printf_float+0x43e>

0800bebc <_printf_common>:
 800bebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bec0:	4616      	mov	r6, r2
 800bec2:	4698      	mov	r8, r3
 800bec4:	688a      	ldr	r2, [r1, #8]
 800bec6:	690b      	ldr	r3, [r1, #16]
 800bec8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800becc:	4293      	cmp	r3, r2
 800bece:	bfb8      	it	lt
 800bed0:	4613      	movlt	r3, r2
 800bed2:	6033      	str	r3, [r6, #0]
 800bed4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bed8:	4607      	mov	r7, r0
 800beda:	460c      	mov	r4, r1
 800bedc:	b10a      	cbz	r2, 800bee2 <_printf_common+0x26>
 800bede:	3301      	adds	r3, #1
 800bee0:	6033      	str	r3, [r6, #0]
 800bee2:	6823      	ldr	r3, [r4, #0]
 800bee4:	0699      	lsls	r1, r3, #26
 800bee6:	bf42      	ittt	mi
 800bee8:	6833      	ldrmi	r3, [r6, #0]
 800beea:	3302      	addmi	r3, #2
 800beec:	6033      	strmi	r3, [r6, #0]
 800beee:	6825      	ldr	r5, [r4, #0]
 800bef0:	f015 0506 	ands.w	r5, r5, #6
 800bef4:	d106      	bne.n	800bf04 <_printf_common+0x48>
 800bef6:	f104 0a19 	add.w	sl, r4, #25
 800befa:	68e3      	ldr	r3, [r4, #12]
 800befc:	6832      	ldr	r2, [r6, #0]
 800befe:	1a9b      	subs	r3, r3, r2
 800bf00:	42ab      	cmp	r3, r5
 800bf02:	dc26      	bgt.n	800bf52 <_printf_common+0x96>
 800bf04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf08:	6822      	ldr	r2, [r4, #0]
 800bf0a:	3b00      	subs	r3, #0
 800bf0c:	bf18      	it	ne
 800bf0e:	2301      	movne	r3, #1
 800bf10:	0692      	lsls	r2, r2, #26
 800bf12:	d42b      	bmi.n	800bf6c <_printf_common+0xb0>
 800bf14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf18:	4641      	mov	r1, r8
 800bf1a:	4638      	mov	r0, r7
 800bf1c:	47c8      	blx	r9
 800bf1e:	3001      	adds	r0, #1
 800bf20:	d01e      	beq.n	800bf60 <_printf_common+0xa4>
 800bf22:	6823      	ldr	r3, [r4, #0]
 800bf24:	6922      	ldr	r2, [r4, #16]
 800bf26:	f003 0306 	and.w	r3, r3, #6
 800bf2a:	2b04      	cmp	r3, #4
 800bf2c:	bf02      	ittt	eq
 800bf2e:	68e5      	ldreq	r5, [r4, #12]
 800bf30:	6833      	ldreq	r3, [r6, #0]
 800bf32:	1aed      	subeq	r5, r5, r3
 800bf34:	68a3      	ldr	r3, [r4, #8]
 800bf36:	bf0c      	ite	eq
 800bf38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf3c:	2500      	movne	r5, #0
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	bfc4      	itt	gt
 800bf42:	1a9b      	subgt	r3, r3, r2
 800bf44:	18ed      	addgt	r5, r5, r3
 800bf46:	2600      	movs	r6, #0
 800bf48:	341a      	adds	r4, #26
 800bf4a:	42b5      	cmp	r5, r6
 800bf4c:	d11a      	bne.n	800bf84 <_printf_common+0xc8>
 800bf4e:	2000      	movs	r0, #0
 800bf50:	e008      	b.n	800bf64 <_printf_common+0xa8>
 800bf52:	2301      	movs	r3, #1
 800bf54:	4652      	mov	r2, sl
 800bf56:	4641      	mov	r1, r8
 800bf58:	4638      	mov	r0, r7
 800bf5a:	47c8      	blx	r9
 800bf5c:	3001      	adds	r0, #1
 800bf5e:	d103      	bne.n	800bf68 <_printf_common+0xac>
 800bf60:	f04f 30ff 	mov.w	r0, #4294967295
 800bf64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf68:	3501      	adds	r5, #1
 800bf6a:	e7c6      	b.n	800befa <_printf_common+0x3e>
 800bf6c:	18e1      	adds	r1, r4, r3
 800bf6e:	1c5a      	adds	r2, r3, #1
 800bf70:	2030      	movs	r0, #48	@ 0x30
 800bf72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bf76:	4422      	add	r2, r4
 800bf78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf80:	3302      	adds	r3, #2
 800bf82:	e7c7      	b.n	800bf14 <_printf_common+0x58>
 800bf84:	2301      	movs	r3, #1
 800bf86:	4622      	mov	r2, r4
 800bf88:	4641      	mov	r1, r8
 800bf8a:	4638      	mov	r0, r7
 800bf8c:	47c8      	blx	r9
 800bf8e:	3001      	adds	r0, #1
 800bf90:	d0e6      	beq.n	800bf60 <_printf_common+0xa4>
 800bf92:	3601      	adds	r6, #1
 800bf94:	e7d9      	b.n	800bf4a <_printf_common+0x8e>
	...

0800bf98 <_printf_i>:
 800bf98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf9c:	7e0f      	ldrb	r7, [r1, #24]
 800bf9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bfa0:	2f78      	cmp	r7, #120	@ 0x78
 800bfa2:	4691      	mov	r9, r2
 800bfa4:	4680      	mov	r8, r0
 800bfa6:	460c      	mov	r4, r1
 800bfa8:	469a      	mov	sl, r3
 800bfaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bfae:	d807      	bhi.n	800bfc0 <_printf_i+0x28>
 800bfb0:	2f62      	cmp	r7, #98	@ 0x62
 800bfb2:	d80a      	bhi.n	800bfca <_printf_i+0x32>
 800bfb4:	2f00      	cmp	r7, #0
 800bfb6:	f000 80d1 	beq.w	800c15c <_printf_i+0x1c4>
 800bfba:	2f58      	cmp	r7, #88	@ 0x58
 800bfbc:	f000 80b8 	beq.w	800c130 <_printf_i+0x198>
 800bfc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bfc8:	e03a      	b.n	800c040 <_printf_i+0xa8>
 800bfca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bfce:	2b15      	cmp	r3, #21
 800bfd0:	d8f6      	bhi.n	800bfc0 <_printf_i+0x28>
 800bfd2:	a101      	add	r1, pc, #4	@ (adr r1, 800bfd8 <_printf_i+0x40>)
 800bfd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfd8:	0800c031 	.word	0x0800c031
 800bfdc:	0800c045 	.word	0x0800c045
 800bfe0:	0800bfc1 	.word	0x0800bfc1
 800bfe4:	0800bfc1 	.word	0x0800bfc1
 800bfe8:	0800bfc1 	.word	0x0800bfc1
 800bfec:	0800bfc1 	.word	0x0800bfc1
 800bff0:	0800c045 	.word	0x0800c045
 800bff4:	0800bfc1 	.word	0x0800bfc1
 800bff8:	0800bfc1 	.word	0x0800bfc1
 800bffc:	0800bfc1 	.word	0x0800bfc1
 800c000:	0800bfc1 	.word	0x0800bfc1
 800c004:	0800c143 	.word	0x0800c143
 800c008:	0800c06f 	.word	0x0800c06f
 800c00c:	0800c0fd 	.word	0x0800c0fd
 800c010:	0800bfc1 	.word	0x0800bfc1
 800c014:	0800bfc1 	.word	0x0800bfc1
 800c018:	0800c165 	.word	0x0800c165
 800c01c:	0800bfc1 	.word	0x0800bfc1
 800c020:	0800c06f 	.word	0x0800c06f
 800c024:	0800bfc1 	.word	0x0800bfc1
 800c028:	0800bfc1 	.word	0x0800bfc1
 800c02c:	0800c105 	.word	0x0800c105
 800c030:	6833      	ldr	r3, [r6, #0]
 800c032:	1d1a      	adds	r2, r3, #4
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	6032      	str	r2, [r6, #0]
 800c038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c03c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c040:	2301      	movs	r3, #1
 800c042:	e09c      	b.n	800c17e <_printf_i+0x1e6>
 800c044:	6833      	ldr	r3, [r6, #0]
 800c046:	6820      	ldr	r0, [r4, #0]
 800c048:	1d19      	adds	r1, r3, #4
 800c04a:	6031      	str	r1, [r6, #0]
 800c04c:	0606      	lsls	r6, r0, #24
 800c04e:	d501      	bpl.n	800c054 <_printf_i+0xbc>
 800c050:	681d      	ldr	r5, [r3, #0]
 800c052:	e003      	b.n	800c05c <_printf_i+0xc4>
 800c054:	0645      	lsls	r5, r0, #25
 800c056:	d5fb      	bpl.n	800c050 <_printf_i+0xb8>
 800c058:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c05c:	2d00      	cmp	r5, #0
 800c05e:	da03      	bge.n	800c068 <_printf_i+0xd0>
 800c060:	232d      	movs	r3, #45	@ 0x2d
 800c062:	426d      	negs	r5, r5
 800c064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c068:	4858      	ldr	r0, [pc, #352]	@ (800c1cc <_printf_i+0x234>)
 800c06a:	230a      	movs	r3, #10
 800c06c:	e011      	b.n	800c092 <_printf_i+0xfa>
 800c06e:	6821      	ldr	r1, [r4, #0]
 800c070:	6833      	ldr	r3, [r6, #0]
 800c072:	0608      	lsls	r0, r1, #24
 800c074:	f853 5b04 	ldr.w	r5, [r3], #4
 800c078:	d402      	bmi.n	800c080 <_printf_i+0xe8>
 800c07a:	0649      	lsls	r1, r1, #25
 800c07c:	bf48      	it	mi
 800c07e:	b2ad      	uxthmi	r5, r5
 800c080:	2f6f      	cmp	r7, #111	@ 0x6f
 800c082:	4852      	ldr	r0, [pc, #328]	@ (800c1cc <_printf_i+0x234>)
 800c084:	6033      	str	r3, [r6, #0]
 800c086:	bf14      	ite	ne
 800c088:	230a      	movne	r3, #10
 800c08a:	2308      	moveq	r3, #8
 800c08c:	2100      	movs	r1, #0
 800c08e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c092:	6866      	ldr	r6, [r4, #4]
 800c094:	60a6      	str	r6, [r4, #8]
 800c096:	2e00      	cmp	r6, #0
 800c098:	db05      	blt.n	800c0a6 <_printf_i+0x10e>
 800c09a:	6821      	ldr	r1, [r4, #0]
 800c09c:	432e      	orrs	r6, r5
 800c09e:	f021 0104 	bic.w	r1, r1, #4
 800c0a2:	6021      	str	r1, [r4, #0]
 800c0a4:	d04b      	beq.n	800c13e <_printf_i+0x1a6>
 800c0a6:	4616      	mov	r6, r2
 800c0a8:	fbb5 f1f3 	udiv	r1, r5, r3
 800c0ac:	fb03 5711 	mls	r7, r3, r1, r5
 800c0b0:	5dc7      	ldrb	r7, [r0, r7]
 800c0b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c0b6:	462f      	mov	r7, r5
 800c0b8:	42bb      	cmp	r3, r7
 800c0ba:	460d      	mov	r5, r1
 800c0bc:	d9f4      	bls.n	800c0a8 <_printf_i+0x110>
 800c0be:	2b08      	cmp	r3, #8
 800c0c0:	d10b      	bne.n	800c0da <_printf_i+0x142>
 800c0c2:	6823      	ldr	r3, [r4, #0]
 800c0c4:	07df      	lsls	r7, r3, #31
 800c0c6:	d508      	bpl.n	800c0da <_printf_i+0x142>
 800c0c8:	6923      	ldr	r3, [r4, #16]
 800c0ca:	6861      	ldr	r1, [r4, #4]
 800c0cc:	4299      	cmp	r1, r3
 800c0ce:	bfde      	ittt	le
 800c0d0:	2330      	movle	r3, #48	@ 0x30
 800c0d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c0d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c0da:	1b92      	subs	r2, r2, r6
 800c0dc:	6122      	str	r2, [r4, #16]
 800c0de:	f8cd a000 	str.w	sl, [sp]
 800c0e2:	464b      	mov	r3, r9
 800c0e4:	aa03      	add	r2, sp, #12
 800c0e6:	4621      	mov	r1, r4
 800c0e8:	4640      	mov	r0, r8
 800c0ea:	f7ff fee7 	bl	800bebc <_printf_common>
 800c0ee:	3001      	adds	r0, #1
 800c0f0:	d14a      	bne.n	800c188 <_printf_i+0x1f0>
 800c0f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f6:	b004      	add	sp, #16
 800c0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0fc:	6823      	ldr	r3, [r4, #0]
 800c0fe:	f043 0320 	orr.w	r3, r3, #32
 800c102:	6023      	str	r3, [r4, #0]
 800c104:	4832      	ldr	r0, [pc, #200]	@ (800c1d0 <_printf_i+0x238>)
 800c106:	2778      	movs	r7, #120	@ 0x78
 800c108:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c10c:	6823      	ldr	r3, [r4, #0]
 800c10e:	6831      	ldr	r1, [r6, #0]
 800c110:	061f      	lsls	r7, r3, #24
 800c112:	f851 5b04 	ldr.w	r5, [r1], #4
 800c116:	d402      	bmi.n	800c11e <_printf_i+0x186>
 800c118:	065f      	lsls	r7, r3, #25
 800c11a:	bf48      	it	mi
 800c11c:	b2ad      	uxthmi	r5, r5
 800c11e:	6031      	str	r1, [r6, #0]
 800c120:	07d9      	lsls	r1, r3, #31
 800c122:	bf44      	itt	mi
 800c124:	f043 0320 	orrmi.w	r3, r3, #32
 800c128:	6023      	strmi	r3, [r4, #0]
 800c12a:	b11d      	cbz	r5, 800c134 <_printf_i+0x19c>
 800c12c:	2310      	movs	r3, #16
 800c12e:	e7ad      	b.n	800c08c <_printf_i+0xf4>
 800c130:	4826      	ldr	r0, [pc, #152]	@ (800c1cc <_printf_i+0x234>)
 800c132:	e7e9      	b.n	800c108 <_printf_i+0x170>
 800c134:	6823      	ldr	r3, [r4, #0]
 800c136:	f023 0320 	bic.w	r3, r3, #32
 800c13a:	6023      	str	r3, [r4, #0]
 800c13c:	e7f6      	b.n	800c12c <_printf_i+0x194>
 800c13e:	4616      	mov	r6, r2
 800c140:	e7bd      	b.n	800c0be <_printf_i+0x126>
 800c142:	6833      	ldr	r3, [r6, #0]
 800c144:	6825      	ldr	r5, [r4, #0]
 800c146:	6961      	ldr	r1, [r4, #20]
 800c148:	1d18      	adds	r0, r3, #4
 800c14a:	6030      	str	r0, [r6, #0]
 800c14c:	062e      	lsls	r6, r5, #24
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	d501      	bpl.n	800c156 <_printf_i+0x1be>
 800c152:	6019      	str	r1, [r3, #0]
 800c154:	e002      	b.n	800c15c <_printf_i+0x1c4>
 800c156:	0668      	lsls	r0, r5, #25
 800c158:	d5fb      	bpl.n	800c152 <_printf_i+0x1ba>
 800c15a:	8019      	strh	r1, [r3, #0]
 800c15c:	2300      	movs	r3, #0
 800c15e:	6123      	str	r3, [r4, #16]
 800c160:	4616      	mov	r6, r2
 800c162:	e7bc      	b.n	800c0de <_printf_i+0x146>
 800c164:	6833      	ldr	r3, [r6, #0]
 800c166:	1d1a      	adds	r2, r3, #4
 800c168:	6032      	str	r2, [r6, #0]
 800c16a:	681e      	ldr	r6, [r3, #0]
 800c16c:	6862      	ldr	r2, [r4, #4]
 800c16e:	2100      	movs	r1, #0
 800c170:	4630      	mov	r0, r6
 800c172:	f7f4 f82d 	bl	80001d0 <memchr>
 800c176:	b108      	cbz	r0, 800c17c <_printf_i+0x1e4>
 800c178:	1b80      	subs	r0, r0, r6
 800c17a:	6060      	str	r0, [r4, #4]
 800c17c:	6863      	ldr	r3, [r4, #4]
 800c17e:	6123      	str	r3, [r4, #16]
 800c180:	2300      	movs	r3, #0
 800c182:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c186:	e7aa      	b.n	800c0de <_printf_i+0x146>
 800c188:	6923      	ldr	r3, [r4, #16]
 800c18a:	4632      	mov	r2, r6
 800c18c:	4649      	mov	r1, r9
 800c18e:	4640      	mov	r0, r8
 800c190:	47d0      	blx	sl
 800c192:	3001      	adds	r0, #1
 800c194:	d0ad      	beq.n	800c0f2 <_printf_i+0x15a>
 800c196:	6823      	ldr	r3, [r4, #0]
 800c198:	079b      	lsls	r3, r3, #30
 800c19a:	d413      	bmi.n	800c1c4 <_printf_i+0x22c>
 800c19c:	68e0      	ldr	r0, [r4, #12]
 800c19e:	9b03      	ldr	r3, [sp, #12]
 800c1a0:	4298      	cmp	r0, r3
 800c1a2:	bfb8      	it	lt
 800c1a4:	4618      	movlt	r0, r3
 800c1a6:	e7a6      	b.n	800c0f6 <_printf_i+0x15e>
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	4632      	mov	r2, r6
 800c1ac:	4649      	mov	r1, r9
 800c1ae:	4640      	mov	r0, r8
 800c1b0:	47d0      	blx	sl
 800c1b2:	3001      	adds	r0, #1
 800c1b4:	d09d      	beq.n	800c0f2 <_printf_i+0x15a>
 800c1b6:	3501      	adds	r5, #1
 800c1b8:	68e3      	ldr	r3, [r4, #12]
 800c1ba:	9903      	ldr	r1, [sp, #12]
 800c1bc:	1a5b      	subs	r3, r3, r1
 800c1be:	42ab      	cmp	r3, r5
 800c1c0:	dcf2      	bgt.n	800c1a8 <_printf_i+0x210>
 800c1c2:	e7eb      	b.n	800c19c <_printf_i+0x204>
 800c1c4:	2500      	movs	r5, #0
 800c1c6:	f104 0619 	add.w	r6, r4, #25
 800c1ca:	e7f5      	b.n	800c1b8 <_printf_i+0x220>
 800c1cc:	0800fc6e 	.word	0x0800fc6e
 800c1d0:	0800fc7f 	.word	0x0800fc7f

0800c1d4 <std>:
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	b510      	push	{r4, lr}
 800c1d8:	4604      	mov	r4, r0
 800c1da:	e9c0 3300 	strd	r3, r3, [r0]
 800c1de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1e2:	6083      	str	r3, [r0, #8]
 800c1e4:	8181      	strh	r1, [r0, #12]
 800c1e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800c1e8:	81c2      	strh	r2, [r0, #14]
 800c1ea:	6183      	str	r3, [r0, #24]
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	2208      	movs	r2, #8
 800c1f0:	305c      	adds	r0, #92	@ 0x5c
 800c1f2:	f000 f916 	bl	800c422 <memset>
 800c1f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c22c <std+0x58>)
 800c1f8:	6263      	str	r3, [r4, #36]	@ 0x24
 800c1fa:	4b0d      	ldr	r3, [pc, #52]	@ (800c230 <std+0x5c>)
 800c1fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c1fe:	4b0d      	ldr	r3, [pc, #52]	@ (800c234 <std+0x60>)
 800c200:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c202:	4b0d      	ldr	r3, [pc, #52]	@ (800c238 <std+0x64>)
 800c204:	6323      	str	r3, [r4, #48]	@ 0x30
 800c206:	4b0d      	ldr	r3, [pc, #52]	@ (800c23c <std+0x68>)
 800c208:	6224      	str	r4, [r4, #32]
 800c20a:	429c      	cmp	r4, r3
 800c20c:	d006      	beq.n	800c21c <std+0x48>
 800c20e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c212:	4294      	cmp	r4, r2
 800c214:	d002      	beq.n	800c21c <std+0x48>
 800c216:	33d0      	adds	r3, #208	@ 0xd0
 800c218:	429c      	cmp	r4, r3
 800c21a:	d105      	bne.n	800c228 <std+0x54>
 800c21c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c224:	f000 b98a 	b.w	800c53c <__retarget_lock_init_recursive>
 800c228:	bd10      	pop	{r4, pc}
 800c22a:	bf00      	nop
 800c22c:	0800c39d 	.word	0x0800c39d
 800c230:	0800c3bf 	.word	0x0800c3bf
 800c234:	0800c3f7 	.word	0x0800c3f7
 800c238:	0800c41b 	.word	0x0800c41b
 800c23c:	20000ae8 	.word	0x20000ae8

0800c240 <stdio_exit_handler>:
 800c240:	4a02      	ldr	r2, [pc, #8]	@ (800c24c <stdio_exit_handler+0xc>)
 800c242:	4903      	ldr	r1, [pc, #12]	@ (800c250 <stdio_exit_handler+0x10>)
 800c244:	4803      	ldr	r0, [pc, #12]	@ (800c254 <stdio_exit_handler+0x14>)
 800c246:	f000 b869 	b.w	800c31c <_fwalk_sglue>
 800c24a:	bf00      	nop
 800c24c:	20000030 	.word	0x20000030
 800c250:	0800dd39 	.word	0x0800dd39
 800c254:	20000040 	.word	0x20000040

0800c258 <cleanup_stdio>:
 800c258:	6841      	ldr	r1, [r0, #4]
 800c25a:	4b0c      	ldr	r3, [pc, #48]	@ (800c28c <cleanup_stdio+0x34>)
 800c25c:	4299      	cmp	r1, r3
 800c25e:	b510      	push	{r4, lr}
 800c260:	4604      	mov	r4, r0
 800c262:	d001      	beq.n	800c268 <cleanup_stdio+0x10>
 800c264:	f001 fd68 	bl	800dd38 <_fflush_r>
 800c268:	68a1      	ldr	r1, [r4, #8]
 800c26a:	4b09      	ldr	r3, [pc, #36]	@ (800c290 <cleanup_stdio+0x38>)
 800c26c:	4299      	cmp	r1, r3
 800c26e:	d002      	beq.n	800c276 <cleanup_stdio+0x1e>
 800c270:	4620      	mov	r0, r4
 800c272:	f001 fd61 	bl	800dd38 <_fflush_r>
 800c276:	68e1      	ldr	r1, [r4, #12]
 800c278:	4b06      	ldr	r3, [pc, #24]	@ (800c294 <cleanup_stdio+0x3c>)
 800c27a:	4299      	cmp	r1, r3
 800c27c:	d004      	beq.n	800c288 <cleanup_stdio+0x30>
 800c27e:	4620      	mov	r0, r4
 800c280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c284:	f001 bd58 	b.w	800dd38 <_fflush_r>
 800c288:	bd10      	pop	{r4, pc}
 800c28a:	bf00      	nop
 800c28c:	20000ae8 	.word	0x20000ae8
 800c290:	20000b50 	.word	0x20000b50
 800c294:	20000bb8 	.word	0x20000bb8

0800c298 <global_stdio_init.part.0>:
 800c298:	b510      	push	{r4, lr}
 800c29a:	4b0b      	ldr	r3, [pc, #44]	@ (800c2c8 <global_stdio_init.part.0+0x30>)
 800c29c:	4c0b      	ldr	r4, [pc, #44]	@ (800c2cc <global_stdio_init.part.0+0x34>)
 800c29e:	4a0c      	ldr	r2, [pc, #48]	@ (800c2d0 <global_stdio_init.part.0+0x38>)
 800c2a0:	601a      	str	r2, [r3, #0]
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	2104      	movs	r1, #4
 800c2a8:	f7ff ff94 	bl	800c1d4 <std>
 800c2ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	2109      	movs	r1, #9
 800c2b4:	f7ff ff8e 	bl	800c1d4 <std>
 800c2b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c2bc:	2202      	movs	r2, #2
 800c2be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2c2:	2112      	movs	r1, #18
 800c2c4:	f7ff bf86 	b.w	800c1d4 <std>
 800c2c8:	20000c20 	.word	0x20000c20
 800c2cc:	20000ae8 	.word	0x20000ae8
 800c2d0:	0800c241 	.word	0x0800c241

0800c2d4 <__sfp_lock_acquire>:
 800c2d4:	4801      	ldr	r0, [pc, #4]	@ (800c2dc <__sfp_lock_acquire+0x8>)
 800c2d6:	f000 b932 	b.w	800c53e <__retarget_lock_acquire_recursive>
 800c2da:	bf00      	nop
 800c2dc:	20000c29 	.word	0x20000c29

0800c2e0 <__sfp_lock_release>:
 800c2e0:	4801      	ldr	r0, [pc, #4]	@ (800c2e8 <__sfp_lock_release+0x8>)
 800c2e2:	f000 b92d 	b.w	800c540 <__retarget_lock_release_recursive>
 800c2e6:	bf00      	nop
 800c2e8:	20000c29 	.word	0x20000c29

0800c2ec <__sinit>:
 800c2ec:	b510      	push	{r4, lr}
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	f7ff fff0 	bl	800c2d4 <__sfp_lock_acquire>
 800c2f4:	6a23      	ldr	r3, [r4, #32]
 800c2f6:	b11b      	cbz	r3, 800c300 <__sinit+0x14>
 800c2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2fc:	f7ff bff0 	b.w	800c2e0 <__sfp_lock_release>
 800c300:	4b04      	ldr	r3, [pc, #16]	@ (800c314 <__sinit+0x28>)
 800c302:	6223      	str	r3, [r4, #32]
 800c304:	4b04      	ldr	r3, [pc, #16]	@ (800c318 <__sinit+0x2c>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d1f5      	bne.n	800c2f8 <__sinit+0xc>
 800c30c:	f7ff ffc4 	bl	800c298 <global_stdio_init.part.0>
 800c310:	e7f2      	b.n	800c2f8 <__sinit+0xc>
 800c312:	bf00      	nop
 800c314:	0800c259 	.word	0x0800c259
 800c318:	20000c20 	.word	0x20000c20

0800c31c <_fwalk_sglue>:
 800c31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c320:	4607      	mov	r7, r0
 800c322:	4688      	mov	r8, r1
 800c324:	4614      	mov	r4, r2
 800c326:	2600      	movs	r6, #0
 800c328:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c32c:	f1b9 0901 	subs.w	r9, r9, #1
 800c330:	d505      	bpl.n	800c33e <_fwalk_sglue+0x22>
 800c332:	6824      	ldr	r4, [r4, #0]
 800c334:	2c00      	cmp	r4, #0
 800c336:	d1f7      	bne.n	800c328 <_fwalk_sglue+0xc>
 800c338:	4630      	mov	r0, r6
 800c33a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c33e:	89ab      	ldrh	r3, [r5, #12]
 800c340:	2b01      	cmp	r3, #1
 800c342:	d907      	bls.n	800c354 <_fwalk_sglue+0x38>
 800c344:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c348:	3301      	adds	r3, #1
 800c34a:	d003      	beq.n	800c354 <_fwalk_sglue+0x38>
 800c34c:	4629      	mov	r1, r5
 800c34e:	4638      	mov	r0, r7
 800c350:	47c0      	blx	r8
 800c352:	4306      	orrs	r6, r0
 800c354:	3568      	adds	r5, #104	@ 0x68
 800c356:	e7e9      	b.n	800c32c <_fwalk_sglue+0x10>

0800c358 <siprintf>:
 800c358:	b40e      	push	{r1, r2, r3}
 800c35a:	b510      	push	{r4, lr}
 800c35c:	b09d      	sub	sp, #116	@ 0x74
 800c35e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c360:	9002      	str	r0, [sp, #8]
 800c362:	9006      	str	r0, [sp, #24]
 800c364:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c368:	480a      	ldr	r0, [pc, #40]	@ (800c394 <siprintf+0x3c>)
 800c36a:	9107      	str	r1, [sp, #28]
 800c36c:	9104      	str	r1, [sp, #16]
 800c36e:	490a      	ldr	r1, [pc, #40]	@ (800c398 <siprintf+0x40>)
 800c370:	f853 2b04 	ldr.w	r2, [r3], #4
 800c374:	9105      	str	r1, [sp, #20]
 800c376:	2400      	movs	r4, #0
 800c378:	a902      	add	r1, sp, #8
 800c37a:	6800      	ldr	r0, [r0, #0]
 800c37c:	9301      	str	r3, [sp, #4]
 800c37e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c380:	f001 fb5a 	bl	800da38 <_svfiprintf_r>
 800c384:	9b02      	ldr	r3, [sp, #8]
 800c386:	701c      	strb	r4, [r3, #0]
 800c388:	b01d      	add	sp, #116	@ 0x74
 800c38a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c38e:	b003      	add	sp, #12
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	2000003c 	.word	0x2000003c
 800c398:	ffff0208 	.word	0xffff0208

0800c39c <__sread>:
 800c39c:	b510      	push	{r4, lr}
 800c39e:	460c      	mov	r4, r1
 800c3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3a4:	f000 f86c 	bl	800c480 <_read_r>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	bfab      	itete	ge
 800c3ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c3ae:	89a3      	ldrhlt	r3, [r4, #12]
 800c3b0:	181b      	addge	r3, r3, r0
 800c3b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c3b6:	bfac      	ite	ge
 800c3b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c3ba:	81a3      	strhlt	r3, [r4, #12]
 800c3bc:	bd10      	pop	{r4, pc}

0800c3be <__swrite>:
 800c3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c2:	461f      	mov	r7, r3
 800c3c4:	898b      	ldrh	r3, [r1, #12]
 800c3c6:	05db      	lsls	r3, r3, #23
 800c3c8:	4605      	mov	r5, r0
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	4616      	mov	r6, r2
 800c3ce:	d505      	bpl.n	800c3dc <__swrite+0x1e>
 800c3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3d4:	2302      	movs	r3, #2
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f000 f840 	bl	800c45c <_lseek_r>
 800c3dc:	89a3      	ldrh	r3, [r4, #12]
 800c3de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c3e6:	81a3      	strh	r3, [r4, #12]
 800c3e8:	4632      	mov	r2, r6
 800c3ea:	463b      	mov	r3, r7
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3f2:	f000 b867 	b.w	800c4c4 <_write_r>

0800c3f6 <__sseek>:
 800c3f6:	b510      	push	{r4, lr}
 800c3f8:	460c      	mov	r4, r1
 800c3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3fe:	f000 f82d 	bl	800c45c <_lseek_r>
 800c402:	1c43      	adds	r3, r0, #1
 800c404:	89a3      	ldrh	r3, [r4, #12]
 800c406:	bf15      	itete	ne
 800c408:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c40a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c40e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c412:	81a3      	strheq	r3, [r4, #12]
 800c414:	bf18      	it	ne
 800c416:	81a3      	strhne	r3, [r4, #12]
 800c418:	bd10      	pop	{r4, pc}

0800c41a <__sclose>:
 800c41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c41e:	f000 b80d 	b.w	800c43c <_close_r>

0800c422 <memset>:
 800c422:	4402      	add	r2, r0
 800c424:	4603      	mov	r3, r0
 800c426:	4293      	cmp	r3, r2
 800c428:	d100      	bne.n	800c42c <memset+0xa>
 800c42a:	4770      	bx	lr
 800c42c:	f803 1b01 	strb.w	r1, [r3], #1
 800c430:	e7f9      	b.n	800c426 <memset+0x4>
	...

0800c434 <_localeconv_r>:
 800c434:	4800      	ldr	r0, [pc, #0]	@ (800c438 <_localeconv_r+0x4>)
 800c436:	4770      	bx	lr
 800c438:	2000017c 	.word	0x2000017c

0800c43c <_close_r>:
 800c43c:	b538      	push	{r3, r4, r5, lr}
 800c43e:	4d06      	ldr	r5, [pc, #24]	@ (800c458 <_close_r+0x1c>)
 800c440:	2300      	movs	r3, #0
 800c442:	4604      	mov	r4, r0
 800c444:	4608      	mov	r0, r1
 800c446:	602b      	str	r3, [r5, #0]
 800c448:	f7f6 fa76 	bl	8002938 <_close>
 800c44c:	1c43      	adds	r3, r0, #1
 800c44e:	d102      	bne.n	800c456 <_close_r+0x1a>
 800c450:	682b      	ldr	r3, [r5, #0]
 800c452:	b103      	cbz	r3, 800c456 <_close_r+0x1a>
 800c454:	6023      	str	r3, [r4, #0]
 800c456:	bd38      	pop	{r3, r4, r5, pc}
 800c458:	20000c24 	.word	0x20000c24

0800c45c <_lseek_r>:
 800c45c:	b538      	push	{r3, r4, r5, lr}
 800c45e:	4d07      	ldr	r5, [pc, #28]	@ (800c47c <_lseek_r+0x20>)
 800c460:	4604      	mov	r4, r0
 800c462:	4608      	mov	r0, r1
 800c464:	4611      	mov	r1, r2
 800c466:	2200      	movs	r2, #0
 800c468:	602a      	str	r2, [r5, #0]
 800c46a:	461a      	mov	r2, r3
 800c46c:	f7f6 fa8b 	bl	8002986 <_lseek>
 800c470:	1c43      	adds	r3, r0, #1
 800c472:	d102      	bne.n	800c47a <_lseek_r+0x1e>
 800c474:	682b      	ldr	r3, [r5, #0]
 800c476:	b103      	cbz	r3, 800c47a <_lseek_r+0x1e>
 800c478:	6023      	str	r3, [r4, #0]
 800c47a:	bd38      	pop	{r3, r4, r5, pc}
 800c47c:	20000c24 	.word	0x20000c24

0800c480 <_read_r>:
 800c480:	b538      	push	{r3, r4, r5, lr}
 800c482:	4d07      	ldr	r5, [pc, #28]	@ (800c4a0 <_read_r+0x20>)
 800c484:	4604      	mov	r4, r0
 800c486:	4608      	mov	r0, r1
 800c488:	4611      	mov	r1, r2
 800c48a:	2200      	movs	r2, #0
 800c48c:	602a      	str	r2, [r5, #0]
 800c48e:	461a      	mov	r2, r3
 800c490:	f7f6 fa19 	bl	80028c6 <_read>
 800c494:	1c43      	adds	r3, r0, #1
 800c496:	d102      	bne.n	800c49e <_read_r+0x1e>
 800c498:	682b      	ldr	r3, [r5, #0]
 800c49a:	b103      	cbz	r3, 800c49e <_read_r+0x1e>
 800c49c:	6023      	str	r3, [r4, #0]
 800c49e:	bd38      	pop	{r3, r4, r5, pc}
 800c4a0:	20000c24 	.word	0x20000c24

0800c4a4 <_sbrk_r>:
 800c4a4:	b538      	push	{r3, r4, r5, lr}
 800c4a6:	4d06      	ldr	r5, [pc, #24]	@ (800c4c0 <_sbrk_r+0x1c>)
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	602b      	str	r3, [r5, #0]
 800c4b0:	f7f6 fa76 	bl	80029a0 <_sbrk>
 800c4b4:	1c43      	adds	r3, r0, #1
 800c4b6:	d102      	bne.n	800c4be <_sbrk_r+0x1a>
 800c4b8:	682b      	ldr	r3, [r5, #0]
 800c4ba:	b103      	cbz	r3, 800c4be <_sbrk_r+0x1a>
 800c4bc:	6023      	str	r3, [r4, #0]
 800c4be:	bd38      	pop	{r3, r4, r5, pc}
 800c4c0:	20000c24 	.word	0x20000c24

0800c4c4 <_write_r>:
 800c4c4:	b538      	push	{r3, r4, r5, lr}
 800c4c6:	4d07      	ldr	r5, [pc, #28]	@ (800c4e4 <_write_r+0x20>)
 800c4c8:	4604      	mov	r4, r0
 800c4ca:	4608      	mov	r0, r1
 800c4cc:	4611      	mov	r1, r2
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	602a      	str	r2, [r5, #0]
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	f7f6 fa14 	bl	8002900 <_write>
 800c4d8:	1c43      	adds	r3, r0, #1
 800c4da:	d102      	bne.n	800c4e2 <_write_r+0x1e>
 800c4dc:	682b      	ldr	r3, [r5, #0]
 800c4de:	b103      	cbz	r3, 800c4e2 <_write_r+0x1e>
 800c4e0:	6023      	str	r3, [r4, #0]
 800c4e2:	bd38      	pop	{r3, r4, r5, pc}
 800c4e4:	20000c24 	.word	0x20000c24

0800c4e8 <__errno>:
 800c4e8:	4b01      	ldr	r3, [pc, #4]	@ (800c4f0 <__errno+0x8>)
 800c4ea:	6818      	ldr	r0, [r3, #0]
 800c4ec:	4770      	bx	lr
 800c4ee:	bf00      	nop
 800c4f0:	2000003c 	.word	0x2000003c

0800c4f4 <__libc_init_array>:
 800c4f4:	b570      	push	{r4, r5, r6, lr}
 800c4f6:	4d0d      	ldr	r5, [pc, #52]	@ (800c52c <__libc_init_array+0x38>)
 800c4f8:	4c0d      	ldr	r4, [pc, #52]	@ (800c530 <__libc_init_array+0x3c>)
 800c4fa:	1b64      	subs	r4, r4, r5
 800c4fc:	10a4      	asrs	r4, r4, #2
 800c4fe:	2600      	movs	r6, #0
 800c500:	42a6      	cmp	r6, r4
 800c502:	d109      	bne.n	800c518 <__libc_init_array+0x24>
 800c504:	4d0b      	ldr	r5, [pc, #44]	@ (800c534 <__libc_init_array+0x40>)
 800c506:	4c0c      	ldr	r4, [pc, #48]	@ (800c538 <__libc_init_array+0x44>)
 800c508:	f002 feb0 	bl	800f26c <_init>
 800c50c:	1b64      	subs	r4, r4, r5
 800c50e:	10a4      	asrs	r4, r4, #2
 800c510:	2600      	movs	r6, #0
 800c512:	42a6      	cmp	r6, r4
 800c514:	d105      	bne.n	800c522 <__libc_init_array+0x2e>
 800c516:	bd70      	pop	{r4, r5, r6, pc}
 800c518:	f855 3b04 	ldr.w	r3, [r5], #4
 800c51c:	4798      	blx	r3
 800c51e:	3601      	adds	r6, #1
 800c520:	e7ee      	b.n	800c500 <__libc_init_array+0xc>
 800c522:	f855 3b04 	ldr.w	r3, [r5], #4
 800c526:	4798      	blx	r3
 800c528:	3601      	adds	r6, #1
 800c52a:	e7f2      	b.n	800c512 <__libc_init_array+0x1e>
 800c52c:	080103e4 	.word	0x080103e4
 800c530:	080103e4 	.word	0x080103e4
 800c534:	080103e4 	.word	0x080103e4
 800c538:	080103e8 	.word	0x080103e8

0800c53c <__retarget_lock_init_recursive>:
 800c53c:	4770      	bx	lr

0800c53e <__retarget_lock_acquire_recursive>:
 800c53e:	4770      	bx	lr

0800c540 <__retarget_lock_release_recursive>:
 800c540:	4770      	bx	lr

0800c542 <quorem>:
 800c542:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c546:	6903      	ldr	r3, [r0, #16]
 800c548:	690c      	ldr	r4, [r1, #16]
 800c54a:	42a3      	cmp	r3, r4
 800c54c:	4607      	mov	r7, r0
 800c54e:	db7e      	blt.n	800c64e <quorem+0x10c>
 800c550:	3c01      	subs	r4, #1
 800c552:	f101 0814 	add.w	r8, r1, #20
 800c556:	00a3      	lsls	r3, r4, #2
 800c558:	f100 0514 	add.w	r5, r0, #20
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c562:	9301      	str	r3, [sp, #4]
 800c564:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c568:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c56c:	3301      	adds	r3, #1
 800c56e:	429a      	cmp	r2, r3
 800c570:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c574:	fbb2 f6f3 	udiv	r6, r2, r3
 800c578:	d32e      	bcc.n	800c5d8 <quorem+0x96>
 800c57a:	f04f 0a00 	mov.w	sl, #0
 800c57e:	46c4      	mov	ip, r8
 800c580:	46ae      	mov	lr, r5
 800c582:	46d3      	mov	fp, sl
 800c584:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c588:	b298      	uxth	r0, r3
 800c58a:	fb06 a000 	mla	r0, r6, r0, sl
 800c58e:	0c02      	lsrs	r2, r0, #16
 800c590:	0c1b      	lsrs	r3, r3, #16
 800c592:	fb06 2303 	mla	r3, r6, r3, r2
 800c596:	f8de 2000 	ldr.w	r2, [lr]
 800c59a:	b280      	uxth	r0, r0
 800c59c:	b292      	uxth	r2, r2
 800c59e:	1a12      	subs	r2, r2, r0
 800c5a0:	445a      	add	r2, fp
 800c5a2:	f8de 0000 	ldr.w	r0, [lr]
 800c5a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c5b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c5b4:	b292      	uxth	r2, r2
 800c5b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c5ba:	45e1      	cmp	r9, ip
 800c5bc:	f84e 2b04 	str.w	r2, [lr], #4
 800c5c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c5c4:	d2de      	bcs.n	800c584 <quorem+0x42>
 800c5c6:	9b00      	ldr	r3, [sp, #0]
 800c5c8:	58eb      	ldr	r3, [r5, r3]
 800c5ca:	b92b      	cbnz	r3, 800c5d8 <quorem+0x96>
 800c5cc:	9b01      	ldr	r3, [sp, #4]
 800c5ce:	3b04      	subs	r3, #4
 800c5d0:	429d      	cmp	r5, r3
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	d32f      	bcc.n	800c636 <quorem+0xf4>
 800c5d6:	613c      	str	r4, [r7, #16]
 800c5d8:	4638      	mov	r0, r7
 800c5da:	f001 f8c9 	bl	800d770 <__mcmp>
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	db25      	blt.n	800c62e <quorem+0xec>
 800c5e2:	4629      	mov	r1, r5
 800c5e4:	2000      	movs	r0, #0
 800c5e6:	f858 2b04 	ldr.w	r2, [r8], #4
 800c5ea:	f8d1 c000 	ldr.w	ip, [r1]
 800c5ee:	fa1f fe82 	uxth.w	lr, r2
 800c5f2:	fa1f f38c 	uxth.w	r3, ip
 800c5f6:	eba3 030e 	sub.w	r3, r3, lr
 800c5fa:	4403      	add	r3, r0
 800c5fc:	0c12      	lsrs	r2, r2, #16
 800c5fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c602:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c606:	b29b      	uxth	r3, r3
 800c608:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c60c:	45c1      	cmp	r9, r8
 800c60e:	f841 3b04 	str.w	r3, [r1], #4
 800c612:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c616:	d2e6      	bcs.n	800c5e6 <quorem+0xa4>
 800c618:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c61c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c620:	b922      	cbnz	r2, 800c62c <quorem+0xea>
 800c622:	3b04      	subs	r3, #4
 800c624:	429d      	cmp	r5, r3
 800c626:	461a      	mov	r2, r3
 800c628:	d30b      	bcc.n	800c642 <quorem+0x100>
 800c62a:	613c      	str	r4, [r7, #16]
 800c62c:	3601      	adds	r6, #1
 800c62e:	4630      	mov	r0, r6
 800c630:	b003      	add	sp, #12
 800c632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c636:	6812      	ldr	r2, [r2, #0]
 800c638:	3b04      	subs	r3, #4
 800c63a:	2a00      	cmp	r2, #0
 800c63c:	d1cb      	bne.n	800c5d6 <quorem+0x94>
 800c63e:	3c01      	subs	r4, #1
 800c640:	e7c6      	b.n	800c5d0 <quorem+0x8e>
 800c642:	6812      	ldr	r2, [r2, #0]
 800c644:	3b04      	subs	r3, #4
 800c646:	2a00      	cmp	r2, #0
 800c648:	d1ef      	bne.n	800c62a <quorem+0xe8>
 800c64a:	3c01      	subs	r4, #1
 800c64c:	e7ea      	b.n	800c624 <quorem+0xe2>
 800c64e:	2000      	movs	r0, #0
 800c650:	e7ee      	b.n	800c630 <quorem+0xee>
 800c652:	0000      	movs	r0, r0
 800c654:	0000      	movs	r0, r0
	...

0800c658 <_dtoa_r>:
 800c658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65c:	69c7      	ldr	r7, [r0, #28]
 800c65e:	b097      	sub	sp, #92	@ 0x5c
 800c660:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c664:	ec55 4b10 	vmov	r4, r5, d0
 800c668:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c66a:	9107      	str	r1, [sp, #28]
 800c66c:	4681      	mov	r9, r0
 800c66e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c670:	9311      	str	r3, [sp, #68]	@ 0x44
 800c672:	b97f      	cbnz	r7, 800c694 <_dtoa_r+0x3c>
 800c674:	2010      	movs	r0, #16
 800c676:	f7ff f899 	bl	800b7ac <malloc>
 800c67a:	4602      	mov	r2, r0
 800c67c:	f8c9 001c 	str.w	r0, [r9, #28]
 800c680:	b920      	cbnz	r0, 800c68c <_dtoa_r+0x34>
 800c682:	4ba9      	ldr	r3, [pc, #676]	@ (800c928 <_dtoa_r+0x2d0>)
 800c684:	21ef      	movs	r1, #239	@ 0xef
 800c686:	48a9      	ldr	r0, [pc, #676]	@ (800c92c <_dtoa_r+0x2d4>)
 800c688:	f001 fba6 	bl	800ddd8 <__assert_func>
 800c68c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c690:	6007      	str	r7, [r0, #0]
 800c692:	60c7      	str	r7, [r0, #12]
 800c694:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c698:	6819      	ldr	r1, [r3, #0]
 800c69a:	b159      	cbz	r1, 800c6b4 <_dtoa_r+0x5c>
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	604a      	str	r2, [r1, #4]
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	4093      	lsls	r3, r2
 800c6a4:	608b      	str	r3, [r1, #8]
 800c6a6:	4648      	mov	r0, r9
 800c6a8:	f000 fe30 	bl	800d30c <_Bfree>
 800c6ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	601a      	str	r2, [r3, #0]
 800c6b4:	1e2b      	subs	r3, r5, #0
 800c6b6:	bfb9      	ittee	lt
 800c6b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c6bc:	9305      	strlt	r3, [sp, #20]
 800c6be:	2300      	movge	r3, #0
 800c6c0:	6033      	strge	r3, [r6, #0]
 800c6c2:	9f05      	ldr	r7, [sp, #20]
 800c6c4:	4b9a      	ldr	r3, [pc, #616]	@ (800c930 <_dtoa_r+0x2d8>)
 800c6c6:	bfbc      	itt	lt
 800c6c8:	2201      	movlt	r2, #1
 800c6ca:	6032      	strlt	r2, [r6, #0]
 800c6cc:	43bb      	bics	r3, r7
 800c6ce:	d112      	bne.n	800c6f6 <_dtoa_r+0x9e>
 800c6d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c6d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c6d6:	6013      	str	r3, [r2, #0]
 800c6d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c6dc:	4323      	orrs	r3, r4
 800c6de:	f000 855a 	beq.w	800d196 <_dtoa_r+0xb3e>
 800c6e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c6e4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c944 <_dtoa_r+0x2ec>
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	f000 855c 	beq.w	800d1a6 <_dtoa_r+0xb4e>
 800c6ee:	f10a 0303 	add.w	r3, sl, #3
 800c6f2:	f000 bd56 	b.w	800d1a2 <_dtoa_r+0xb4a>
 800c6f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	ec51 0b17 	vmov	r0, r1, d7
 800c700:	2300      	movs	r3, #0
 800c702:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c706:	f7f4 f9df 	bl	8000ac8 <__aeabi_dcmpeq>
 800c70a:	4680      	mov	r8, r0
 800c70c:	b158      	cbz	r0, 800c726 <_dtoa_r+0xce>
 800c70e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c710:	2301      	movs	r3, #1
 800c712:	6013      	str	r3, [r2, #0]
 800c714:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c716:	b113      	cbz	r3, 800c71e <_dtoa_r+0xc6>
 800c718:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c71a:	4b86      	ldr	r3, [pc, #536]	@ (800c934 <_dtoa_r+0x2dc>)
 800c71c:	6013      	str	r3, [r2, #0]
 800c71e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c948 <_dtoa_r+0x2f0>
 800c722:	f000 bd40 	b.w	800d1a6 <_dtoa_r+0xb4e>
 800c726:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c72a:	aa14      	add	r2, sp, #80	@ 0x50
 800c72c:	a915      	add	r1, sp, #84	@ 0x54
 800c72e:	4648      	mov	r0, r9
 800c730:	f001 f8ce 	bl	800d8d0 <__d2b>
 800c734:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c738:	9002      	str	r0, [sp, #8]
 800c73a:	2e00      	cmp	r6, #0
 800c73c:	d078      	beq.n	800c830 <_dtoa_r+0x1d8>
 800c73e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c740:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c748:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c74c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c750:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c754:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c758:	4619      	mov	r1, r3
 800c75a:	2200      	movs	r2, #0
 800c75c:	4b76      	ldr	r3, [pc, #472]	@ (800c938 <_dtoa_r+0x2e0>)
 800c75e:	f7f3 fd93 	bl	8000288 <__aeabi_dsub>
 800c762:	a36b      	add	r3, pc, #428	@ (adr r3, 800c910 <_dtoa_r+0x2b8>)
 800c764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c768:	f7f3 ff46 	bl	80005f8 <__aeabi_dmul>
 800c76c:	a36a      	add	r3, pc, #424	@ (adr r3, 800c918 <_dtoa_r+0x2c0>)
 800c76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c772:	f7f3 fd8b 	bl	800028c <__adddf3>
 800c776:	4604      	mov	r4, r0
 800c778:	4630      	mov	r0, r6
 800c77a:	460d      	mov	r5, r1
 800c77c:	f7f3 fed2 	bl	8000524 <__aeabi_i2d>
 800c780:	a367      	add	r3, pc, #412	@ (adr r3, 800c920 <_dtoa_r+0x2c8>)
 800c782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c786:	f7f3 ff37 	bl	80005f8 <__aeabi_dmul>
 800c78a:	4602      	mov	r2, r0
 800c78c:	460b      	mov	r3, r1
 800c78e:	4620      	mov	r0, r4
 800c790:	4629      	mov	r1, r5
 800c792:	f7f3 fd7b 	bl	800028c <__adddf3>
 800c796:	4604      	mov	r4, r0
 800c798:	460d      	mov	r5, r1
 800c79a:	f7f4 f9dd 	bl	8000b58 <__aeabi_d2iz>
 800c79e:	2200      	movs	r2, #0
 800c7a0:	4607      	mov	r7, r0
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	4629      	mov	r1, r5
 800c7a8:	f7f4 f998 	bl	8000adc <__aeabi_dcmplt>
 800c7ac:	b140      	cbz	r0, 800c7c0 <_dtoa_r+0x168>
 800c7ae:	4638      	mov	r0, r7
 800c7b0:	f7f3 feb8 	bl	8000524 <__aeabi_i2d>
 800c7b4:	4622      	mov	r2, r4
 800c7b6:	462b      	mov	r3, r5
 800c7b8:	f7f4 f986 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7bc:	b900      	cbnz	r0, 800c7c0 <_dtoa_r+0x168>
 800c7be:	3f01      	subs	r7, #1
 800c7c0:	2f16      	cmp	r7, #22
 800c7c2:	d852      	bhi.n	800c86a <_dtoa_r+0x212>
 800c7c4:	4b5d      	ldr	r3, [pc, #372]	@ (800c93c <_dtoa_r+0x2e4>)
 800c7c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c7d2:	f7f4 f983 	bl	8000adc <__aeabi_dcmplt>
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	d049      	beq.n	800c86e <_dtoa_r+0x216>
 800c7da:	3f01      	subs	r7, #1
 800c7dc:	2300      	movs	r3, #0
 800c7de:	9310      	str	r3, [sp, #64]	@ 0x40
 800c7e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c7e2:	1b9b      	subs	r3, r3, r6
 800c7e4:	1e5a      	subs	r2, r3, #1
 800c7e6:	bf45      	ittet	mi
 800c7e8:	f1c3 0301 	rsbmi	r3, r3, #1
 800c7ec:	9300      	strmi	r3, [sp, #0]
 800c7ee:	2300      	movpl	r3, #0
 800c7f0:	2300      	movmi	r3, #0
 800c7f2:	9206      	str	r2, [sp, #24]
 800c7f4:	bf54      	ite	pl
 800c7f6:	9300      	strpl	r3, [sp, #0]
 800c7f8:	9306      	strmi	r3, [sp, #24]
 800c7fa:	2f00      	cmp	r7, #0
 800c7fc:	db39      	blt.n	800c872 <_dtoa_r+0x21a>
 800c7fe:	9b06      	ldr	r3, [sp, #24]
 800c800:	970d      	str	r7, [sp, #52]	@ 0x34
 800c802:	443b      	add	r3, r7
 800c804:	9306      	str	r3, [sp, #24]
 800c806:	2300      	movs	r3, #0
 800c808:	9308      	str	r3, [sp, #32]
 800c80a:	9b07      	ldr	r3, [sp, #28]
 800c80c:	2b09      	cmp	r3, #9
 800c80e:	d863      	bhi.n	800c8d8 <_dtoa_r+0x280>
 800c810:	2b05      	cmp	r3, #5
 800c812:	bfc4      	itt	gt
 800c814:	3b04      	subgt	r3, #4
 800c816:	9307      	strgt	r3, [sp, #28]
 800c818:	9b07      	ldr	r3, [sp, #28]
 800c81a:	f1a3 0302 	sub.w	r3, r3, #2
 800c81e:	bfcc      	ite	gt
 800c820:	2400      	movgt	r4, #0
 800c822:	2401      	movle	r4, #1
 800c824:	2b03      	cmp	r3, #3
 800c826:	d863      	bhi.n	800c8f0 <_dtoa_r+0x298>
 800c828:	e8df f003 	tbb	[pc, r3]
 800c82c:	2b375452 	.word	0x2b375452
 800c830:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c834:	441e      	add	r6, r3
 800c836:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c83a:	2b20      	cmp	r3, #32
 800c83c:	bfc1      	itttt	gt
 800c83e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c842:	409f      	lslgt	r7, r3
 800c844:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c848:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c84c:	bfd6      	itet	le
 800c84e:	f1c3 0320 	rsble	r3, r3, #32
 800c852:	ea47 0003 	orrgt.w	r0, r7, r3
 800c856:	fa04 f003 	lslle.w	r0, r4, r3
 800c85a:	f7f3 fe53 	bl	8000504 <__aeabi_ui2d>
 800c85e:	2201      	movs	r2, #1
 800c860:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c864:	3e01      	subs	r6, #1
 800c866:	9212      	str	r2, [sp, #72]	@ 0x48
 800c868:	e776      	b.n	800c758 <_dtoa_r+0x100>
 800c86a:	2301      	movs	r3, #1
 800c86c:	e7b7      	b.n	800c7de <_dtoa_r+0x186>
 800c86e:	9010      	str	r0, [sp, #64]	@ 0x40
 800c870:	e7b6      	b.n	800c7e0 <_dtoa_r+0x188>
 800c872:	9b00      	ldr	r3, [sp, #0]
 800c874:	1bdb      	subs	r3, r3, r7
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	427b      	negs	r3, r7
 800c87a:	9308      	str	r3, [sp, #32]
 800c87c:	2300      	movs	r3, #0
 800c87e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c880:	e7c3      	b.n	800c80a <_dtoa_r+0x1b2>
 800c882:	2301      	movs	r3, #1
 800c884:	9309      	str	r3, [sp, #36]	@ 0x24
 800c886:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c888:	eb07 0b03 	add.w	fp, r7, r3
 800c88c:	f10b 0301 	add.w	r3, fp, #1
 800c890:	2b01      	cmp	r3, #1
 800c892:	9303      	str	r3, [sp, #12]
 800c894:	bfb8      	it	lt
 800c896:	2301      	movlt	r3, #1
 800c898:	e006      	b.n	800c8a8 <_dtoa_r+0x250>
 800c89a:	2301      	movs	r3, #1
 800c89c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c89e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	dd28      	ble.n	800c8f6 <_dtoa_r+0x29e>
 800c8a4:	469b      	mov	fp, r3
 800c8a6:	9303      	str	r3, [sp, #12]
 800c8a8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	2204      	movs	r2, #4
 800c8b0:	f102 0514 	add.w	r5, r2, #20
 800c8b4:	429d      	cmp	r5, r3
 800c8b6:	d926      	bls.n	800c906 <_dtoa_r+0x2ae>
 800c8b8:	6041      	str	r1, [r0, #4]
 800c8ba:	4648      	mov	r0, r9
 800c8bc:	f000 fce6 	bl	800d28c <_Balloc>
 800c8c0:	4682      	mov	sl, r0
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	d142      	bne.n	800c94c <_dtoa_r+0x2f4>
 800c8c6:	4b1e      	ldr	r3, [pc, #120]	@ (800c940 <_dtoa_r+0x2e8>)
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	f240 11af 	movw	r1, #431	@ 0x1af
 800c8ce:	e6da      	b.n	800c686 <_dtoa_r+0x2e>
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	e7e3      	b.n	800c89c <_dtoa_r+0x244>
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	e7d5      	b.n	800c884 <_dtoa_r+0x22c>
 800c8d8:	2401      	movs	r4, #1
 800c8da:	2300      	movs	r3, #0
 800c8dc:	9307      	str	r3, [sp, #28]
 800c8de:	9409      	str	r4, [sp, #36]	@ 0x24
 800c8e0:	f04f 3bff 	mov.w	fp, #4294967295
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	f8cd b00c 	str.w	fp, [sp, #12]
 800c8ea:	2312      	movs	r3, #18
 800c8ec:	920c      	str	r2, [sp, #48]	@ 0x30
 800c8ee:	e7db      	b.n	800c8a8 <_dtoa_r+0x250>
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8f4:	e7f4      	b.n	800c8e0 <_dtoa_r+0x288>
 800c8f6:	f04f 0b01 	mov.w	fp, #1
 800c8fa:	f8cd b00c 	str.w	fp, [sp, #12]
 800c8fe:	465b      	mov	r3, fp
 800c900:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c904:	e7d0      	b.n	800c8a8 <_dtoa_r+0x250>
 800c906:	3101      	adds	r1, #1
 800c908:	0052      	lsls	r2, r2, #1
 800c90a:	e7d1      	b.n	800c8b0 <_dtoa_r+0x258>
 800c90c:	f3af 8000 	nop.w
 800c910:	636f4361 	.word	0x636f4361
 800c914:	3fd287a7 	.word	0x3fd287a7
 800c918:	8b60c8b3 	.word	0x8b60c8b3
 800c91c:	3fc68a28 	.word	0x3fc68a28
 800c920:	509f79fb 	.word	0x509f79fb
 800c924:	3fd34413 	.word	0x3fd34413
 800c928:	0800fc9d 	.word	0x0800fc9d
 800c92c:	0800fcb4 	.word	0x0800fcb4
 800c930:	7ff00000 	.word	0x7ff00000
 800c934:	0800fc6d 	.word	0x0800fc6d
 800c938:	3ff80000 	.word	0x3ff80000
 800c93c:	0800fe08 	.word	0x0800fe08
 800c940:	0800fd0c 	.word	0x0800fd0c
 800c944:	0800fc99 	.word	0x0800fc99
 800c948:	0800fc6c 	.word	0x0800fc6c
 800c94c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c950:	6018      	str	r0, [r3, #0]
 800c952:	9b03      	ldr	r3, [sp, #12]
 800c954:	2b0e      	cmp	r3, #14
 800c956:	f200 80a1 	bhi.w	800ca9c <_dtoa_r+0x444>
 800c95a:	2c00      	cmp	r4, #0
 800c95c:	f000 809e 	beq.w	800ca9c <_dtoa_r+0x444>
 800c960:	2f00      	cmp	r7, #0
 800c962:	dd33      	ble.n	800c9cc <_dtoa_r+0x374>
 800c964:	4b9c      	ldr	r3, [pc, #624]	@ (800cbd8 <_dtoa_r+0x580>)
 800c966:	f007 020f 	and.w	r2, r7, #15
 800c96a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c96e:	ed93 7b00 	vldr	d7, [r3]
 800c972:	05f8      	lsls	r0, r7, #23
 800c974:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c978:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c97c:	d516      	bpl.n	800c9ac <_dtoa_r+0x354>
 800c97e:	4b97      	ldr	r3, [pc, #604]	@ (800cbdc <_dtoa_r+0x584>)
 800c980:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c984:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c988:	f7f3 ff60 	bl	800084c <__aeabi_ddiv>
 800c98c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c990:	f004 040f 	and.w	r4, r4, #15
 800c994:	2603      	movs	r6, #3
 800c996:	4d91      	ldr	r5, [pc, #580]	@ (800cbdc <_dtoa_r+0x584>)
 800c998:	b954      	cbnz	r4, 800c9b0 <_dtoa_r+0x358>
 800c99a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c99e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9a2:	f7f3 ff53 	bl	800084c <__aeabi_ddiv>
 800c9a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9aa:	e028      	b.n	800c9fe <_dtoa_r+0x3a6>
 800c9ac:	2602      	movs	r6, #2
 800c9ae:	e7f2      	b.n	800c996 <_dtoa_r+0x33e>
 800c9b0:	07e1      	lsls	r1, r4, #31
 800c9b2:	d508      	bpl.n	800c9c6 <_dtoa_r+0x36e>
 800c9b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c9b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c9bc:	f7f3 fe1c 	bl	80005f8 <__aeabi_dmul>
 800c9c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c9c4:	3601      	adds	r6, #1
 800c9c6:	1064      	asrs	r4, r4, #1
 800c9c8:	3508      	adds	r5, #8
 800c9ca:	e7e5      	b.n	800c998 <_dtoa_r+0x340>
 800c9cc:	f000 80af 	beq.w	800cb2e <_dtoa_r+0x4d6>
 800c9d0:	427c      	negs	r4, r7
 800c9d2:	4b81      	ldr	r3, [pc, #516]	@ (800cbd8 <_dtoa_r+0x580>)
 800c9d4:	4d81      	ldr	r5, [pc, #516]	@ (800cbdc <_dtoa_r+0x584>)
 800c9d6:	f004 020f 	and.w	r2, r4, #15
 800c9da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c9e6:	f7f3 fe07 	bl	80005f8 <__aeabi_dmul>
 800c9ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9ee:	1124      	asrs	r4, r4, #4
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	2602      	movs	r6, #2
 800c9f4:	2c00      	cmp	r4, #0
 800c9f6:	f040 808f 	bne.w	800cb18 <_dtoa_r+0x4c0>
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d1d3      	bne.n	800c9a6 <_dtoa_r+0x34e>
 800c9fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ca00:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f000 8094 	beq.w	800cb32 <_dtoa_r+0x4da>
 800ca0a:	4b75      	ldr	r3, [pc, #468]	@ (800cbe0 <_dtoa_r+0x588>)
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	4620      	mov	r0, r4
 800ca10:	4629      	mov	r1, r5
 800ca12:	f7f4 f863 	bl	8000adc <__aeabi_dcmplt>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	f000 808b 	beq.w	800cb32 <_dtoa_r+0x4da>
 800ca1c:	9b03      	ldr	r3, [sp, #12]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	f000 8087 	beq.w	800cb32 <_dtoa_r+0x4da>
 800ca24:	f1bb 0f00 	cmp.w	fp, #0
 800ca28:	dd34      	ble.n	800ca94 <_dtoa_r+0x43c>
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	4b6d      	ldr	r3, [pc, #436]	@ (800cbe4 <_dtoa_r+0x58c>)
 800ca2e:	2200      	movs	r2, #0
 800ca30:	4629      	mov	r1, r5
 800ca32:	f7f3 fde1 	bl	80005f8 <__aeabi_dmul>
 800ca36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca3a:	f107 38ff 	add.w	r8, r7, #4294967295
 800ca3e:	3601      	adds	r6, #1
 800ca40:	465c      	mov	r4, fp
 800ca42:	4630      	mov	r0, r6
 800ca44:	f7f3 fd6e 	bl	8000524 <__aeabi_i2d>
 800ca48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca4c:	f7f3 fdd4 	bl	80005f8 <__aeabi_dmul>
 800ca50:	4b65      	ldr	r3, [pc, #404]	@ (800cbe8 <_dtoa_r+0x590>)
 800ca52:	2200      	movs	r2, #0
 800ca54:	f7f3 fc1a 	bl	800028c <__adddf3>
 800ca58:	4605      	mov	r5, r0
 800ca5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ca5e:	2c00      	cmp	r4, #0
 800ca60:	d16a      	bne.n	800cb38 <_dtoa_r+0x4e0>
 800ca62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca66:	4b61      	ldr	r3, [pc, #388]	@ (800cbec <_dtoa_r+0x594>)
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f7f3 fc0d 	bl	8000288 <__aeabi_dsub>
 800ca6e:	4602      	mov	r2, r0
 800ca70:	460b      	mov	r3, r1
 800ca72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ca76:	462a      	mov	r2, r5
 800ca78:	4633      	mov	r3, r6
 800ca7a:	f7f4 f84d 	bl	8000b18 <__aeabi_dcmpgt>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	f040 8298 	bne.w	800cfb4 <_dtoa_r+0x95c>
 800ca84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca88:	462a      	mov	r2, r5
 800ca8a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ca8e:	f7f4 f825 	bl	8000adc <__aeabi_dcmplt>
 800ca92:	bb38      	cbnz	r0, 800cae4 <_dtoa_r+0x48c>
 800ca94:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ca98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ca9c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	f2c0 8157 	blt.w	800cd52 <_dtoa_r+0x6fa>
 800caa4:	2f0e      	cmp	r7, #14
 800caa6:	f300 8154 	bgt.w	800cd52 <_dtoa_r+0x6fa>
 800caaa:	4b4b      	ldr	r3, [pc, #300]	@ (800cbd8 <_dtoa_r+0x580>)
 800caac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cab0:	ed93 7b00 	vldr	d7, [r3]
 800cab4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	ed8d 7b00 	vstr	d7, [sp]
 800cabc:	f280 80e5 	bge.w	800cc8a <_dtoa_r+0x632>
 800cac0:	9b03      	ldr	r3, [sp, #12]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	f300 80e1 	bgt.w	800cc8a <_dtoa_r+0x632>
 800cac8:	d10c      	bne.n	800cae4 <_dtoa_r+0x48c>
 800caca:	4b48      	ldr	r3, [pc, #288]	@ (800cbec <_dtoa_r+0x594>)
 800cacc:	2200      	movs	r2, #0
 800cace:	ec51 0b17 	vmov	r0, r1, d7
 800cad2:	f7f3 fd91 	bl	80005f8 <__aeabi_dmul>
 800cad6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cada:	f7f4 f813 	bl	8000b04 <__aeabi_dcmpge>
 800cade:	2800      	cmp	r0, #0
 800cae0:	f000 8266 	beq.w	800cfb0 <_dtoa_r+0x958>
 800cae4:	2400      	movs	r4, #0
 800cae6:	4625      	mov	r5, r4
 800cae8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800caea:	4656      	mov	r6, sl
 800caec:	ea6f 0803 	mvn.w	r8, r3
 800caf0:	2700      	movs	r7, #0
 800caf2:	4621      	mov	r1, r4
 800caf4:	4648      	mov	r0, r9
 800caf6:	f000 fc09 	bl	800d30c <_Bfree>
 800cafa:	2d00      	cmp	r5, #0
 800cafc:	f000 80bd 	beq.w	800cc7a <_dtoa_r+0x622>
 800cb00:	b12f      	cbz	r7, 800cb0e <_dtoa_r+0x4b6>
 800cb02:	42af      	cmp	r7, r5
 800cb04:	d003      	beq.n	800cb0e <_dtoa_r+0x4b6>
 800cb06:	4639      	mov	r1, r7
 800cb08:	4648      	mov	r0, r9
 800cb0a:	f000 fbff 	bl	800d30c <_Bfree>
 800cb0e:	4629      	mov	r1, r5
 800cb10:	4648      	mov	r0, r9
 800cb12:	f000 fbfb 	bl	800d30c <_Bfree>
 800cb16:	e0b0      	b.n	800cc7a <_dtoa_r+0x622>
 800cb18:	07e2      	lsls	r2, r4, #31
 800cb1a:	d505      	bpl.n	800cb28 <_dtoa_r+0x4d0>
 800cb1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cb20:	f7f3 fd6a 	bl	80005f8 <__aeabi_dmul>
 800cb24:	3601      	adds	r6, #1
 800cb26:	2301      	movs	r3, #1
 800cb28:	1064      	asrs	r4, r4, #1
 800cb2a:	3508      	adds	r5, #8
 800cb2c:	e762      	b.n	800c9f4 <_dtoa_r+0x39c>
 800cb2e:	2602      	movs	r6, #2
 800cb30:	e765      	b.n	800c9fe <_dtoa_r+0x3a6>
 800cb32:	9c03      	ldr	r4, [sp, #12]
 800cb34:	46b8      	mov	r8, r7
 800cb36:	e784      	b.n	800ca42 <_dtoa_r+0x3ea>
 800cb38:	4b27      	ldr	r3, [pc, #156]	@ (800cbd8 <_dtoa_r+0x580>)
 800cb3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb44:	4454      	add	r4, sl
 800cb46:	2900      	cmp	r1, #0
 800cb48:	d054      	beq.n	800cbf4 <_dtoa_r+0x59c>
 800cb4a:	4929      	ldr	r1, [pc, #164]	@ (800cbf0 <_dtoa_r+0x598>)
 800cb4c:	2000      	movs	r0, #0
 800cb4e:	f7f3 fe7d 	bl	800084c <__aeabi_ddiv>
 800cb52:	4633      	mov	r3, r6
 800cb54:	462a      	mov	r2, r5
 800cb56:	f7f3 fb97 	bl	8000288 <__aeabi_dsub>
 800cb5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cb5e:	4656      	mov	r6, sl
 800cb60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb64:	f7f3 fff8 	bl	8000b58 <__aeabi_d2iz>
 800cb68:	4605      	mov	r5, r0
 800cb6a:	f7f3 fcdb 	bl	8000524 <__aeabi_i2d>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	460b      	mov	r3, r1
 800cb72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb76:	f7f3 fb87 	bl	8000288 <__aeabi_dsub>
 800cb7a:	3530      	adds	r5, #48	@ 0x30
 800cb7c:	4602      	mov	r2, r0
 800cb7e:	460b      	mov	r3, r1
 800cb80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cb84:	f806 5b01 	strb.w	r5, [r6], #1
 800cb88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cb8c:	f7f3 ffa6 	bl	8000adc <__aeabi_dcmplt>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	d172      	bne.n	800cc7a <_dtoa_r+0x622>
 800cb94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb98:	4911      	ldr	r1, [pc, #68]	@ (800cbe0 <_dtoa_r+0x588>)
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	f7f3 fb74 	bl	8000288 <__aeabi_dsub>
 800cba0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cba4:	f7f3 ff9a 	bl	8000adc <__aeabi_dcmplt>
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	f040 80b4 	bne.w	800cd16 <_dtoa_r+0x6be>
 800cbae:	42a6      	cmp	r6, r4
 800cbb0:	f43f af70 	beq.w	800ca94 <_dtoa_r+0x43c>
 800cbb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cbb8:	4b0a      	ldr	r3, [pc, #40]	@ (800cbe4 <_dtoa_r+0x58c>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f7f3 fd1c 	bl	80005f8 <__aeabi_dmul>
 800cbc0:	4b08      	ldr	r3, [pc, #32]	@ (800cbe4 <_dtoa_r+0x58c>)
 800cbc2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbcc:	f7f3 fd14 	bl	80005f8 <__aeabi_dmul>
 800cbd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cbd4:	e7c4      	b.n	800cb60 <_dtoa_r+0x508>
 800cbd6:	bf00      	nop
 800cbd8:	0800fe08 	.word	0x0800fe08
 800cbdc:	0800fde0 	.word	0x0800fde0
 800cbe0:	3ff00000 	.word	0x3ff00000
 800cbe4:	40240000 	.word	0x40240000
 800cbe8:	401c0000 	.word	0x401c0000
 800cbec:	40140000 	.word	0x40140000
 800cbf0:	3fe00000 	.word	0x3fe00000
 800cbf4:	4631      	mov	r1, r6
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	f7f3 fcfe 	bl	80005f8 <__aeabi_dmul>
 800cbfc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cc00:	9413      	str	r4, [sp, #76]	@ 0x4c
 800cc02:	4656      	mov	r6, sl
 800cc04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc08:	f7f3 ffa6 	bl	8000b58 <__aeabi_d2iz>
 800cc0c:	4605      	mov	r5, r0
 800cc0e:	f7f3 fc89 	bl	8000524 <__aeabi_i2d>
 800cc12:	4602      	mov	r2, r0
 800cc14:	460b      	mov	r3, r1
 800cc16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc1a:	f7f3 fb35 	bl	8000288 <__aeabi_dsub>
 800cc1e:	3530      	adds	r5, #48	@ 0x30
 800cc20:	f806 5b01 	strb.w	r5, [r6], #1
 800cc24:	4602      	mov	r2, r0
 800cc26:	460b      	mov	r3, r1
 800cc28:	42a6      	cmp	r6, r4
 800cc2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cc2e:	f04f 0200 	mov.w	r2, #0
 800cc32:	d124      	bne.n	800cc7e <_dtoa_r+0x626>
 800cc34:	4baf      	ldr	r3, [pc, #700]	@ (800cef4 <_dtoa_r+0x89c>)
 800cc36:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cc3a:	f7f3 fb27 	bl	800028c <__adddf3>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	460b      	mov	r3, r1
 800cc42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc46:	f7f3 ff67 	bl	8000b18 <__aeabi_dcmpgt>
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	d163      	bne.n	800cd16 <_dtoa_r+0x6be>
 800cc4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cc52:	49a8      	ldr	r1, [pc, #672]	@ (800cef4 <_dtoa_r+0x89c>)
 800cc54:	2000      	movs	r0, #0
 800cc56:	f7f3 fb17 	bl	8000288 <__aeabi_dsub>
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc62:	f7f3 ff3b 	bl	8000adc <__aeabi_dcmplt>
 800cc66:	2800      	cmp	r0, #0
 800cc68:	f43f af14 	beq.w	800ca94 <_dtoa_r+0x43c>
 800cc6c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800cc6e:	1e73      	subs	r3, r6, #1
 800cc70:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cc76:	2b30      	cmp	r3, #48	@ 0x30
 800cc78:	d0f8      	beq.n	800cc6c <_dtoa_r+0x614>
 800cc7a:	4647      	mov	r7, r8
 800cc7c:	e03b      	b.n	800ccf6 <_dtoa_r+0x69e>
 800cc7e:	4b9e      	ldr	r3, [pc, #632]	@ (800cef8 <_dtoa_r+0x8a0>)
 800cc80:	f7f3 fcba 	bl	80005f8 <__aeabi_dmul>
 800cc84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc88:	e7bc      	b.n	800cc04 <_dtoa_r+0x5ac>
 800cc8a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cc8e:	4656      	mov	r6, sl
 800cc90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc94:	4620      	mov	r0, r4
 800cc96:	4629      	mov	r1, r5
 800cc98:	f7f3 fdd8 	bl	800084c <__aeabi_ddiv>
 800cc9c:	f7f3 ff5c 	bl	8000b58 <__aeabi_d2iz>
 800cca0:	4680      	mov	r8, r0
 800cca2:	f7f3 fc3f 	bl	8000524 <__aeabi_i2d>
 800cca6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccaa:	f7f3 fca5 	bl	80005f8 <__aeabi_dmul>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	4629      	mov	r1, r5
 800ccb6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ccba:	f7f3 fae5 	bl	8000288 <__aeabi_dsub>
 800ccbe:	f806 4b01 	strb.w	r4, [r6], #1
 800ccc2:	9d03      	ldr	r5, [sp, #12]
 800ccc4:	eba6 040a 	sub.w	r4, r6, sl
 800ccc8:	42a5      	cmp	r5, r4
 800ccca:	4602      	mov	r2, r0
 800cccc:	460b      	mov	r3, r1
 800ccce:	d133      	bne.n	800cd38 <_dtoa_r+0x6e0>
 800ccd0:	f7f3 fadc 	bl	800028c <__adddf3>
 800ccd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccd8:	4604      	mov	r4, r0
 800ccda:	460d      	mov	r5, r1
 800ccdc:	f7f3 ff1c 	bl	8000b18 <__aeabi_dcmpgt>
 800cce0:	b9c0      	cbnz	r0, 800cd14 <_dtoa_r+0x6bc>
 800cce2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cce6:	4620      	mov	r0, r4
 800cce8:	4629      	mov	r1, r5
 800ccea:	f7f3 feed 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccee:	b110      	cbz	r0, 800ccf6 <_dtoa_r+0x69e>
 800ccf0:	f018 0f01 	tst.w	r8, #1
 800ccf4:	d10e      	bne.n	800cd14 <_dtoa_r+0x6bc>
 800ccf6:	9902      	ldr	r1, [sp, #8]
 800ccf8:	4648      	mov	r0, r9
 800ccfa:	f000 fb07 	bl	800d30c <_Bfree>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	7033      	strb	r3, [r6, #0]
 800cd02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cd04:	3701      	adds	r7, #1
 800cd06:	601f      	str	r7, [r3, #0]
 800cd08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	f000 824b 	beq.w	800d1a6 <_dtoa_r+0xb4e>
 800cd10:	601e      	str	r6, [r3, #0]
 800cd12:	e248      	b.n	800d1a6 <_dtoa_r+0xb4e>
 800cd14:	46b8      	mov	r8, r7
 800cd16:	4633      	mov	r3, r6
 800cd18:	461e      	mov	r6, r3
 800cd1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd1e:	2a39      	cmp	r2, #57	@ 0x39
 800cd20:	d106      	bne.n	800cd30 <_dtoa_r+0x6d8>
 800cd22:	459a      	cmp	sl, r3
 800cd24:	d1f8      	bne.n	800cd18 <_dtoa_r+0x6c0>
 800cd26:	2230      	movs	r2, #48	@ 0x30
 800cd28:	f108 0801 	add.w	r8, r8, #1
 800cd2c:	f88a 2000 	strb.w	r2, [sl]
 800cd30:	781a      	ldrb	r2, [r3, #0]
 800cd32:	3201      	adds	r2, #1
 800cd34:	701a      	strb	r2, [r3, #0]
 800cd36:	e7a0      	b.n	800cc7a <_dtoa_r+0x622>
 800cd38:	4b6f      	ldr	r3, [pc, #444]	@ (800cef8 <_dtoa_r+0x8a0>)
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f7f3 fc5c 	bl	80005f8 <__aeabi_dmul>
 800cd40:	2200      	movs	r2, #0
 800cd42:	2300      	movs	r3, #0
 800cd44:	4604      	mov	r4, r0
 800cd46:	460d      	mov	r5, r1
 800cd48:	f7f3 febe 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	d09f      	beq.n	800cc90 <_dtoa_r+0x638>
 800cd50:	e7d1      	b.n	800ccf6 <_dtoa_r+0x69e>
 800cd52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd54:	2a00      	cmp	r2, #0
 800cd56:	f000 80ea 	beq.w	800cf2e <_dtoa_r+0x8d6>
 800cd5a:	9a07      	ldr	r2, [sp, #28]
 800cd5c:	2a01      	cmp	r2, #1
 800cd5e:	f300 80cd 	bgt.w	800cefc <_dtoa_r+0x8a4>
 800cd62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cd64:	2a00      	cmp	r2, #0
 800cd66:	f000 80c1 	beq.w	800ceec <_dtoa_r+0x894>
 800cd6a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cd6e:	9c08      	ldr	r4, [sp, #32]
 800cd70:	9e00      	ldr	r6, [sp, #0]
 800cd72:	9a00      	ldr	r2, [sp, #0]
 800cd74:	441a      	add	r2, r3
 800cd76:	9200      	str	r2, [sp, #0]
 800cd78:	9a06      	ldr	r2, [sp, #24]
 800cd7a:	2101      	movs	r1, #1
 800cd7c:	441a      	add	r2, r3
 800cd7e:	4648      	mov	r0, r9
 800cd80:	9206      	str	r2, [sp, #24]
 800cd82:	f000 fb77 	bl	800d474 <__i2b>
 800cd86:	4605      	mov	r5, r0
 800cd88:	b166      	cbz	r6, 800cda4 <_dtoa_r+0x74c>
 800cd8a:	9b06      	ldr	r3, [sp, #24]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	dd09      	ble.n	800cda4 <_dtoa_r+0x74c>
 800cd90:	42b3      	cmp	r3, r6
 800cd92:	9a00      	ldr	r2, [sp, #0]
 800cd94:	bfa8      	it	ge
 800cd96:	4633      	movge	r3, r6
 800cd98:	1ad2      	subs	r2, r2, r3
 800cd9a:	9200      	str	r2, [sp, #0]
 800cd9c:	9a06      	ldr	r2, [sp, #24]
 800cd9e:	1af6      	subs	r6, r6, r3
 800cda0:	1ad3      	subs	r3, r2, r3
 800cda2:	9306      	str	r3, [sp, #24]
 800cda4:	9b08      	ldr	r3, [sp, #32]
 800cda6:	b30b      	cbz	r3, 800cdec <_dtoa_r+0x794>
 800cda8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f000 80c6 	beq.w	800cf3c <_dtoa_r+0x8e4>
 800cdb0:	2c00      	cmp	r4, #0
 800cdb2:	f000 80c0 	beq.w	800cf36 <_dtoa_r+0x8de>
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	4622      	mov	r2, r4
 800cdba:	4648      	mov	r0, r9
 800cdbc:	f000 fc12 	bl	800d5e4 <__pow5mult>
 800cdc0:	9a02      	ldr	r2, [sp, #8]
 800cdc2:	4601      	mov	r1, r0
 800cdc4:	4605      	mov	r5, r0
 800cdc6:	4648      	mov	r0, r9
 800cdc8:	f000 fb6a 	bl	800d4a0 <__multiply>
 800cdcc:	9902      	ldr	r1, [sp, #8]
 800cdce:	4680      	mov	r8, r0
 800cdd0:	4648      	mov	r0, r9
 800cdd2:	f000 fa9b 	bl	800d30c <_Bfree>
 800cdd6:	9b08      	ldr	r3, [sp, #32]
 800cdd8:	1b1b      	subs	r3, r3, r4
 800cdda:	9308      	str	r3, [sp, #32]
 800cddc:	f000 80b1 	beq.w	800cf42 <_dtoa_r+0x8ea>
 800cde0:	9a08      	ldr	r2, [sp, #32]
 800cde2:	4641      	mov	r1, r8
 800cde4:	4648      	mov	r0, r9
 800cde6:	f000 fbfd 	bl	800d5e4 <__pow5mult>
 800cdea:	9002      	str	r0, [sp, #8]
 800cdec:	2101      	movs	r1, #1
 800cdee:	4648      	mov	r0, r9
 800cdf0:	f000 fb40 	bl	800d474 <__i2b>
 800cdf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	f000 81d8 	beq.w	800d1ae <_dtoa_r+0xb56>
 800cdfe:	461a      	mov	r2, r3
 800ce00:	4601      	mov	r1, r0
 800ce02:	4648      	mov	r0, r9
 800ce04:	f000 fbee 	bl	800d5e4 <__pow5mult>
 800ce08:	9b07      	ldr	r3, [sp, #28]
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	4604      	mov	r4, r0
 800ce0e:	f300 809f 	bgt.w	800cf50 <_dtoa_r+0x8f8>
 800ce12:	9b04      	ldr	r3, [sp, #16]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	f040 8097 	bne.w	800cf48 <_dtoa_r+0x8f0>
 800ce1a:	9b05      	ldr	r3, [sp, #20]
 800ce1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f040 8093 	bne.w	800cf4c <_dtoa_r+0x8f4>
 800ce26:	9b05      	ldr	r3, [sp, #20]
 800ce28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ce2c:	0d1b      	lsrs	r3, r3, #20
 800ce2e:	051b      	lsls	r3, r3, #20
 800ce30:	b133      	cbz	r3, 800ce40 <_dtoa_r+0x7e8>
 800ce32:	9b00      	ldr	r3, [sp, #0]
 800ce34:	3301      	adds	r3, #1
 800ce36:	9300      	str	r3, [sp, #0]
 800ce38:	9b06      	ldr	r3, [sp, #24]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	9306      	str	r3, [sp, #24]
 800ce3e:	2301      	movs	r3, #1
 800ce40:	9308      	str	r3, [sp, #32]
 800ce42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	f000 81b8 	beq.w	800d1ba <_dtoa_r+0xb62>
 800ce4a:	6923      	ldr	r3, [r4, #16]
 800ce4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ce50:	6918      	ldr	r0, [r3, #16]
 800ce52:	f000 fac3 	bl	800d3dc <__hi0bits>
 800ce56:	f1c0 0020 	rsb	r0, r0, #32
 800ce5a:	9b06      	ldr	r3, [sp, #24]
 800ce5c:	4418      	add	r0, r3
 800ce5e:	f010 001f 	ands.w	r0, r0, #31
 800ce62:	f000 8082 	beq.w	800cf6a <_dtoa_r+0x912>
 800ce66:	f1c0 0320 	rsb	r3, r0, #32
 800ce6a:	2b04      	cmp	r3, #4
 800ce6c:	dd73      	ble.n	800cf56 <_dtoa_r+0x8fe>
 800ce6e:	9b00      	ldr	r3, [sp, #0]
 800ce70:	f1c0 001c 	rsb	r0, r0, #28
 800ce74:	4403      	add	r3, r0
 800ce76:	9300      	str	r3, [sp, #0]
 800ce78:	9b06      	ldr	r3, [sp, #24]
 800ce7a:	4403      	add	r3, r0
 800ce7c:	4406      	add	r6, r0
 800ce7e:	9306      	str	r3, [sp, #24]
 800ce80:	9b00      	ldr	r3, [sp, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	dd05      	ble.n	800ce92 <_dtoa_r+0x83a>
 800ce86:	9902      	ldr	r1, [sp, #8]
 800ce88:	461a      	mov	r2, r3
 800ce8a:	4648      	mov	r0, r9
 800ce8c:	f000 fc04 	bl	800d698 <__lshift>
 800ce90:	9002      	str	r0, [sp, #8]
 800ce92:	9b06      	ldr	r3, [sp, #24]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	dd05      	ble.n	800cea4 <_dtoa_r+0x84c>
 800ce98:	4621      	mov	r1, r4
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	4648      	mov	r0, r9
 800ce9e:	f000 fbfb 	bl	800d698 <__lshift>
 800cea2:	4604      	mov	r4, r0
 800cea4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d061      	beq.n	800cf6e <_dtoa_r+0x916>
 800ceaa:	9802      	ldr	r0, [sp, #8]
 800ceac:	4621      	mov	r1, r4
 800ceae:	f000 fc5f 	bl	800d770 <__mcmp>
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	da5b      	bge.n	800cf6e <_dtoa_r+0x916>
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	9902      	ldr	r1, [sp, #8]
 800ceba:	220a      	movs	r2, #10
 800cebc:	4648      	mov	r0, r9
 800cebe:	f000 fa47 	bl	800d350 <__multadd>
 800cec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cec4:	9002      	str	r0, [sp, #8]
 800cec6:	f107 38ff 	add.w	r8, r7, #4294967295
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f000 8177 	beq.w	800d1be <_dtoa_r+0xb66>
 800ced0:	4629      	mov	r1, r5
 800ced2:	2300      	movs	r3, #0
 800ced4:	220a      	movs	r2, #10
 800ced6:	4648      	mov	r0, r9
 800ced8:	f000 fa3a 	bl	800d350 <__multadd>
 800cedc:	f1bb 0f00 	cmp.w	fp, #0
 800cee0:	4605      	mov	r5, r0
 800cee2:	dc6f      	bgt.n	800cfc4 <_dtoa_r+0x96c>
 800cee4:	9b07      	ldr	r3, [sp, #28]
 800cee6:	2b02      	cmp	r3, #2
 800cee8:	dc49      	bgt.n	800cf7e <_dtoa_r+0x926>
 800ceea:	e06b      	b.n	800cfc4 <_dtoa_r+0x96c>
 800ceec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ceee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cef2:	e73c      	b.n	800cd6e <_dtoa_r+0x716>
 800cef4:	3fe00000 	.word	0x3fe00000
 800cef8:	40240000 	.word	0x40240000
 800cefc:	9b03      	ldr	r3, [sp, #12]
 800cefe:	1e5c      	subs	r4, r3, #1
 800cf00:	9b08      	ldr	r3, [sp, #32]
 800cf02:	42a3      	cmp	r3, r4
 800cf04:	db09      	blt.n	800cf1a <_dtoa_r+0x8c2>
 800cf06:	1b1c      	subs	r4, r3, r4
 800cf08:	9b03      	ldr	r3, [sp, #12]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	f6bf af30 	bge.w	800cd70 <_dtoa_r+0x718>
 800cf10:	9b00      	ldr	r3, [sp, #0]
 800cf12:	9a03      	ldr	r2, [sp, #12]
 800cf14:	1a9e      	subs	r6, r3, r2
 800cf16:	2300      	movs	r3, #0
 800cf18:	e72b      	b.n	800cd72 <_dtoa_r+0x71a>
 800cf1a:	9b08      	ldr	r3, [sp, #32]
 800cf1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cf1e:	9408      	str	r4, [sp, #32]
 800cf20:	1ae3      	subs	r3, r4, r3
 800cf22:	441a      	add	r2, r3
 800cf24:	9e00      	ldr	r6, [sp, #0]
 800cf26:	9b03      	ldr	r3, [sp, #12]
 800cf28:	920d      	str	r2, [sp, #52]	@ 0x34
 800cf2a:	2400      	movs	r4, #0
 800cf2c:	e721      	b.n	800cd72 <_dtoa_r+0x71a>
 800cf2e:	9c08      	ldr	r4, [sp, #32]
 800cf30:	9e00      	ldr	r6, [sp, #0]
 800cf32:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800cf34:	e728      	b.n	800cd88 <_dtoa_r+0x730>
 800cf36:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800cf3a:	e751      	b.n	800cde0 <_dtoa_r+0x788>
 800cf3c:	9a08      	ldr	r2, [sp, #32]
 800cf3e:	9902      	ldr	r1, [sp, #8]
 800cf40:	e750      	b.n	800cde4 <_dtoa_r+0x78c>
 800cf42:	f8cd 8008 	str.w	r8, [sp, #8]
 800cf46:	e751      	b.n	800cdec <_dtoa_r+0x794>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	e779      	b.n	800ce40 <_dtoa_r+0x7e8>
 800cf4c:	9b04      	ldr	r3, [sp, #16]
 800cf4e:	e777      	b.n	800ce40 <_dtoa_r+0x7e8>
 800cf50:	2300      	movs	r3, #0
 800cf52:	9308      	str	r3, [sp, #32]
 800cf54:	e779      	b.n	800ce4a <_dtoa_r+0x7f2>
 800cf56:	d093      	beq.n	800ce80 <_dtoa_r+0x828>
 800cf58:	9a00      	ldr	r2, [sp, #0]
 800cf5a:	331c      	adds	r3, #28
 800cf5c:	441a      	add	r2, r3
 800cf5e:	9200      	str	r2, [sp, #0]
 800cf60:	9a06      	ldr	r2, [sp, #24]
 800cf62:	441a      	add	r2, r3
 800cf64:	441e      	add	r6, r3
 800cf66:	9206      	str	r2, [sp, #24]
 800cf68:	e78a      	b.n	800ce80 <_dtoa_r+0x828>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	e7f4      	b.n	800cf58 <_dtoa_r+0x900>
 800cf6e:	9b03      	ldr	r3, [sp, #12]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	46b8      	mov	r8, r7
 800cf74:	dc20      	bgt.n	800cfb8 <_dtoa_r+0x960>
 800cf76:	469b      	mov	fp, r3
 800cf78:	9b07      	ldr	r3, [sp, #28]
 800cf7a:	2b02      	cmp	r3, #2
 800cf7c:	dd1e      	ble.n	800cfbc <_dtoa_r+0x964>
 800cf7e:	f1bb 0f00 	cmp.w	fp, #0
 800cf82:	f47f adb1 	bne.w	800cae8 <_dtoa_r+0x490>
 800cf86:	4621      	mov	r1, r4
 800cf88:	465b      	mov	r3, fp
 800cf8a:	2205      	movs	r2, #5
 800cf8c:	4648      	mov	r0, r9
 800cf8e:	f000 f9df 	bl	800d350 <__multadd>
 800cf92:	4601      	mov	r1, r0
 800cf94:	4604      	mov	r4, r0
 800cf96:	9802      	ldr	r0, [sp, #8]
 800cf98:	f000 fbea 	bl	800d770 <__mcmp>
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	f77f ada3 	ble.w	800cae8 <_dtoa_r+0x490>
 800cfa2:	4656      	mov	r6, sl
 800cfa4:	2331      	movs	r3, #49	@ 0x31
 800cfa6:	f806 3b01 	strb.w	r3, [r6], #1
 800cfaa:	f108 0801 	add.w	r8, r8, #1
 800cfae:	e59f      	b.n	800caf0 <_dtoa_r+0x498>
 800cfb0:	9c03      	ldr	r4, [sp, #12]
 800cfb2:	46b8      	mov	r8, r7
 800cfb4:	4625      	mov	r5, r4
 800cfb6:	e7f4      	b.n	800cfa2 <_dtoa_r+0x94a>
 800cfb8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800cfbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	f000 8101 	beq.w	800d1c6 <_dtoa_r+0xb6e>
 800cfc4:	2e00      	cmp	r6, #0
 800cfc6:	dd05      	ble.n	800cfd4 <_dtoa_r+0x97c>
 800cfc8:	4629      	mov	r1, r5
 800cfca:	4632      	mov	r2, r6
 800cfcc:	4648      	mov	r0, r9
 800cfce:	f000 fb63 	bl	800d698 <__lshift>
 800cfd2:	4605      	mov	r5, r0
 800cfd4:	9b08      	ldr	r3, [sp, #32]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d05c      	beq.n	800d094 <_dtoa_r+0xa3c>
 800cfda:	6869      	ldr	r1, [r5, #4]
 800cfdc:	4648      	mov	r0, r9
 800cfde:	f000 f955 	bl	800d28c <_Balloc>
 800cfe2:	4606      	mov	r6, r0
 800cfe4:	b928      	cbnz	r0, 800cff2 <_dtoa_r+0x99a>
 800cfe6:	4b82      	ldr	r3, [pc, #520]	@ (800d1f0 <_dtoa_r+0xb98>)
 800cfe8:	4602      	mov	r2, r0
 800cfea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cfee:	f7ff bb4a 	b.w	800c686 <_dtoa_r+0x2e>
 800cff2:	692a      	ldr	r2, [r5, #16]
 800cff4:	3202      	adds	r2, #2
 800cff6:	0092      	lsls	r2, r2, #2
 800cff8:	f105 010c 	add.w	r1, r5, #12
 800cffc:	300c      	adds	r0, #12
 800cffe:	f000 fedd 	bl	800ddbc <memcpy>
 800d002:	2201      	movs	r2, #1
 800d004:	4631      	mov	r1, r6
 800d006:	4648      	mov	r0, r9
 800d008:	f000 fb46 	bl	800d698 <__lshift>
 800d00c:	f10a 0301 	add.w	r3, sl, #1
 800d010:	9300      	str	r3, [sp, #0]
 800d012:	eb0a 030b 	add.w	r3, sl, fp
 800d016:	9308      	str	r3, [sp, #32]
 800d018:	9b04      	ldr	r3, [sp, #16]
 800d01a:	f003 0301 	and.w	r3, r3, #1
 800d01e:	462f      	mov	r7, r5
 800d020:	9306      	str	r3, [sp, #24]
 800d022:	4605      	mov	r5, r0
 800d024:	9b00      	ldr	r3, [sp, #0]
 800d026:	9802      	ldr	r0, [sp, #8]
 800d028:	4621      	mov	r1, r4
 800d02a:	f103 3bff 	add.w	fp, r3, #4294967295
 800d02e:	f7ff fa88 	bl	800c542 <quorem>
 800d032:	4603      	mov	r3, r0
 800d034:	3330      	adds	r3, #48	@ 0x30
 800d036:	9003      	str	r0, [sp, #12]
 800d038:	4639      	mov	r1, r7
 800d03a:	9802      	ldr	r0, [sp, #8]
 800d03c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d03e:	f000 fb97 	bl	800d770 <__mcmp>
 800d042:	462a      	mov	r2, r5
 800d044:	9004      	str	r0, [sp, #16]
 800d046:	4621      	mov	r1, r4
 800d048:	4648      	mov	r0, r9
 800d04a:	f000 fbad 	bl	800d7a8 <__mdiff>
 800d04e:	68c2      	ldr	r2, [r0, #12]
 800d050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d052:	4606      	mov	r6, r0
 800d054:	bb02      	cbnz	r2, 800d098 <_dtoa_r+0xa40>
 800d056:	4601      	mov	r1, r0
 800d058:	9802      	ldr	r0, [sp, #8]
 800d05a:	f000 fb89 	bl	800d770 <__mcmp>
 800d05e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d060:	4602      	mov	r2, r0
 800d062:	4631      	mov	r1, r6
 800d064:	4648      	mov	r0, r9
 800d066:	920c      	str	r2, [sp, #48]	@ 0x30
 800d068:	9309      	str	r3, [sp, #36]	@ 0x24
 800d06a:	f000 f94f 	bl	800d30c <_Bfree>
 800d06e:	9b07      	ldr	r3, [sp, #28]
 800d070:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d072:	9e00      	ldr	r6, [sp, #0]
 800d074:	ea42 0103 	orr.w	r1, r2, r3
 800d078:	9b06      	ldr	r3, [sp, #24]
 800d07a:	4319      	orrs	r1, r3
 800d07c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d07e:	d10d      	bne.n	800d09c <_dtoa_r+0xa44>
 800d080:	2b39      	cmp	r3, #57	@ 0x39
 800d082:	d027      	beq.n	800d0d4 <_dtoa_r+0xa7c>
 800d084:	9a04      	ldr	r2, [sp, #16]
 800d086:	2a00      	cmp	r2, #0
 800d088:	dd01      	ble.n	800d08e <_dtoa_r+0xa36>
 800d08a:	9b03      	ldr	r3, [sp, #12]
 800d08c:	3331      	adds	r3, #49	@ 0x31
 800d08e:	f88b 3000 	strb.w	r3, [fp]
 800d092:	e52e      	b.n	800caf2 <_dtoa_r+0x49a>
 800d094:	4628      	mov	r0, r5
 800d096:	e7b9      	b.n	800d00c <_dtoa_r+0x9b4>
 800d098:	2201      	movs	r2, #1
 800d09a:	e7e2      	b.n	800d062 <_dtoa_r+0xa0a>
 800d09c:	9904      	ldr	r1, [sp, #16]
 800d09e:	2900      	cmp	r1, #0
 800d0a0:	db04      	blt.n	800d0ac <_dtoa_r+0xa54>
 800d0a2:	9807      	ldr	r0, [sp, #28]
 800d0a4:	4301      	orrs	r1, r0
 800d0a6:	9806      	ldr	r0, [sp, #24]
 800d0a8:	4301      	orrs	r1, r0
 800d0aa:	d120      	bne.n	800d0ee <_dtoa_r+0xa96>
 800d0ac:	2a00      	cmp	r2, #0
 800d0ae:	ddee      	ble.n	800d08e <_dtoa_r+0xa36>
 800d0b0:	9902      	ldr	r1, [sp, #8]
 800d0b2:	9300      	str	r3, [sp, #0]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	4648      	mov	r0, r9
 800d0b8:	f000 faee 	bl	800d698 <__lshift>
 800d0bc:	4621      	mov	r1, r4
 800d0be:	9002      	str	r0, [sp, #8]
 800d0c0:	f000 fb56 	bl	800d770 <__mcmp>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	9b00      	ldr	r3, [sp, #0]
 800d0c8:	dc02      	bgt.n	800d0d0 <_dtoa_r+0xa78>
 800d0ca:	d1e0      	bne.n	800d08e <_dtoa_r+0xa36>
 800d0cc:	07da      	lsls	r2, r3, #31
 800d0ce:	d5de      	bpl.n	800d08e <_dtoa_r+0xa36>
 800d0d0:	2b39      	cmp	r3, #57	@ 0x39
 800d0d2:	d1da      	bne.n	800d08a <_dtoa_r+0xa32>
 800d0d4:	2339      	movs	r3, #57	@ 0x39
 800d0d6:	f88b 3000 	strb.w	r3, [fp]
 800d0da:	4633      	mov	r3, r6
 800d0dc:	461e      	mov	r6, r3
 800d0de:	3b01      	subs	r3, #1
 800d0e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d0e4:	2a39      	cmp	r2, #57	@ 0x39
 800d0e6:	d04e      	beq.n	800d186 <_dtoa_r+0xb2e>
 800d0e8:	3201      	adds	r2, #1
 800d0ea:	701a      	strb	r2, [r3, #0]
 800d0ec:	e501      	b.n	800caf2 <_dtoa_r+0x49a>
 800d0ee:	2a00      	cmp	r2, #0
 800d0f0:	dd03      	ble.n	800d0fa <_dtoa_r+0xaa2>
 800d0f2:	2b39      	cmp	r3, #57	@ 0x39
 800d0f4:	d0ee      	beq.n	800d0d4 <_dtoa_r+0xa7c>
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	e7c9      	b.n	800d08e <_dtoa_r+0xa36>
 800d0fa:	9a00      	ldr	r2, [sp, #0]
 800d0fc:	9908      	ldr	r1, [sp, #32]
 800d0fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d102:	428a      	cmp	r2, r1
 800d104:	d028      	beq.n	800d158 <_dtoa_r+0xb00>
 800d106:	9902      	ldr	r1, [sp, #8]
 800d108:	2300      	movs	r3, #0
 800d10a:	220a      	movs	r2, #10
 800d10c:	4648      	mov	r0, r9
 800d10e:	f000 f91f 	bl	800d350 <__multadd>
 800d112:	42af      	cmp	r7, r5
 800d114:	9002      	str	r0, [sp, #8]
 800d116:	f04f 0300 	mov.w	r3, #0
 800d11a:	f04f 020a 	mov.w	r2, #10
 800d11e:	4639      	mov	r1, r7
 800d120:	4648      	mov	r0, r9
 800d122:	d107      	bne.n	800d134 <_dtoa_r+0xadc>
 800d124:	f000 f914 	bl	800d350 <__multadd>
 800d128:	4607      	mov	r7, r0
 800d12a:	4605      	mov	r5, r0
 800d12c:	9b00      	ldr	r3, [sp, #0]
 800d12e:	3301      	adds	r3, #1
 800d130:	9300      	str	r3, [sp, #0]
 800d132:	e777      	b.n	800d024 <_dtoa_r+0x9cc>
 800d134:	f000 f90c 	bl	800d350 <__multadd>
 800d138:	4629      	mov	r1, r5
 800d13a:	4607      	mov	r7, r0
 800d13c:	2300      	movs	r3, #0
 800d13e:	220a      	movs	r2, #10
 800d140:	4648      	mov	r0, r9
 800d142:	f000 f905 	bl	800d350 <__multadd>
 800d146:	4605      	mov	r5, r0
 800d148:	e7f0      	b.n	800d12c <_dtoa_r+0xad4>
 800d14a:	f1bb 0f00 	cmp.w	fp, #0
 800d14e:	bfcc      	ite	gt
 800d150:	465e      	movgt	r6, fp
 800d152:	2601      	movle	r6, #1
 800d154:	4456      	add	r6, sl
 800d156:	2700      	movs	r7, #0
 800d158:	9902      	ldr	r1, [sp, #8]
 800d15a:	9300      	str	r3, [sp, #0]
 800d15c:	2201      	movs	r2, #1
 800d15e:	4648      	mov	r0, r9
 800d160:	f000 fa9a 	bl	800d698 <__lshift>
 800d164:	4621      	mov	r1, r4
 800d166:	9002      	str	r0, [sp, #8]
 800d168:	f000 fb02 	bl	800d770 <__mcmp>
 800d16c:	2800      	cmp	r0, #0
 800d16e:	dcb4      	bgt.n	800d0da <_dtoa_r+0xa82>
 800d170:	d102      	bne.n	800d178 <_dtoa_r+0xb20>
 800d172:	9b00      	ldr	r3, [sp, #0]
 800d174:	07db      	lsls	r3, r3, #31
 800d176:	d4b0      	bmi.n	800d0da <_dtoa_r+0xa82>
 800d178:	4633      	mov	r3, r6
 800d17a:	461e      	mov	r6, r3
 800d17c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d180:	2a30      	cmp	r2, #48	@ 0x30
 800d182:	d0fa      	beq.n	800d17a <_dtoa_r+0xb22>
 800d184:	e4b5      	b.n	800caf2 <_dtoa_r+0x49a>
 800d186:	459a      	cmp	sl, r3
 800d188:	d1a8      	bne.n	800d0dc <_dtoa_r+0xa84>
 800d18a:	2331      	movs	r3, #49	@ 0x31
 800d18c:	f108 0801 	add.w	r8, r8, #1
 800d190:	f88a 3000 	strb.w	r3, [sl]
 800d194:	e4ad      	b.n	800caf2 <_dtoa_r+0x49a>
 800d196:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d198:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d1f4 <_dtoa_r+0xb9c>
 800d19c:	b11b      	cbz	r3, 800d1a6 <_dtoa_r+0xb4e>
 800d19e:	f10a 0308 	add.w	r3, sl, #8
 800d1a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d1a4:	6013      	str	r3, [r2, #0]
 800d1a6:	4650      	mov	r0, sl
 800d1a8:	b017      	add	sp, #92	@ 0x5c
 800d1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ae:	9b07      	ldr	r3, [sp, #28]
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	f77f ae2e 	ble.w	800ce12 <_dtoa_r+0x7ba>
 800d1b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d1b8:	9308      	str	r3, [sp, #32]
 800d1ba:	2001      	movs	r0, #1
 800d1bc:	e64d      	b.n	800ce5a <_dtoa_r+0x802>
 800d1be:	f1bb 0f00 	cmp.w	fp, #0
 800d1c2:	f77f aed9 	ble.w	800cf78 <_dtoa_r+0x920>
 800d1c6:	4656      	mov	r6, sl
 800d1c8:	9802      	ldr	r0, [sp, #8]
 800d1ca:	4621      	mov	r1, r4
 800d1cc:	f7ff f9b9 	bl	800c542 <quorem>
 800d1d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d1d4:	f806 3b01 	strb.w	r3, [r6], #1
 800d1d8:	eba6 020a 	sub.w	r2, r6, sl
 800d1dc:	4593      	cmp	fp, r2
 800d1de:	ddb4      	ble.n	800d14a <_dtoa_r+0xaf2>
 800d1e0:	9902      	ldr	r1, [sp, #8]
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	220a      	movs	r2, #10
 800d1e6:	4648      	mov	r0, r9
 800d1e8:	f000 f8b2 	bl	800d350 <__multadd>
 800d1ec:	9002      	str	r0, [sp, #8]
 800d1ee:	e7eb      	b.n	800d1c8 <_dtoa_r+0xb70>
 800d1f0:	0800fd0c 	.word	0x0800fd0c
 800d1f4:	0800fc90 	.word	0x0800fc90

0800d1f8 <_free_r>:
 800d1f8:	b538      	push	{r3, r4, r5, lr}
 800d1fa:	4605      	mov	r5, r0
 800d1fc:	2900      	cmp	r1, #0
 800d1fe:	d041      	beq.n	800d284 <_free_r+0x8c>
 800d200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d204:	1f0c      	subs	r4, r1, #4
 800d206:	2b00      	cmp	r3, #0
 800d208:	bfb8      	it	lt
 800d20a:	18e4      	addlt	r4, r4, r3
 800d20c:	f7fe fb80 	bl	800b910 <__malloc_lock>
 800d210:	4a1d      	ldr	r2, [pc, #116]	@ (800d288 <_free_r+0x90>)
 800d212:	6813      	ldr	r3, [r2, #0]
 800d214:	b933      	cbnz	r3, 800d224 <_free_r+0x2c>
 800d216:	6063      	str	r3, [r4, #4]
 800d218:	6014      	str	r4, [r2, #0]
 800d21a:	4628      	mov	r0, r5
 800d21c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d220:	f7fe bb7c 	b.w	800b91c <__malloc_unlock>
 800d224:	42a3      	cmp	r3, r4
 800d226:	d908      	bls.n	800d23a <_free_r+0x42>
 800d228:	6820      	ldr	r0, [r4, #0]
 800d22a:	1821      	adds	r1, r4, r0
 800d22c:	428b      	cmp	r3, r1
 800d22e:	bf01      	itttt	eq
 800d230:	6819      	ldreq	r1, [r3, #0]
 800d232:	685b      	ldreq	r3, [r3, #4]
 800d234:	1809      	addeq	r1, r1, r0
 800d236:	6021      	streq	r1, [r4, #0]
 800d238:	e7ed      	b.n	800d216 <_free_r+0x1e>
 800d23a:	461a      	mov	r2, r3
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	b10b      	cbz	r3, 800d244 <_free_r+0x4c>
 800d240:	42a3      	cmp	r3, r4
 800d242:	d9fa      	bls.n	800d23a <_free_r+0x42>
 800d244:	6811      	ldr	r1, [r2, #0]
 800d246:	1850      	adds	r0, r2, r1
 800d248:	42a0      	cmp	r0, r4
 800d24a:	d10b      	bne.n	800d264 <_free_r+0x6c>
 800d24c:	6820      	ldr	r0, [r4, #0]
 800d24e:	4401      	add	r1, r0
 800d250:	1850      	adds	r0, r2, r1
 800d252:	4283      	cmp	r3, r0
 800d254:	6011      	str	r1, [r2, #0]
 800d256:	d1e0      	bne.n	800d21a <_free_r+0x22>
 800d258:	6818      	ldr	r0, [r3, #0]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	6053      	str	r3, [r2, #4]
 800d25e:	4408      	add	r0, r1
 800d260:	6010      	str	r0, [r2, #0]
 800d262:	e7da      	b.n	800d21a <_free_r+0x22>
 800d264:	d902      	bls.n	800d26c <_free_r+0x74>
 800d266:	230c      	movs	r3, #12
 800d268:	602b      	str	r3, [r5, #0]
 800d26a:	e7d6      	b.n	800d21a <_free_r+0x22>
 800d26c:	6820      	ldr	r0, [r4, #0]
 800d26e:	1821      	adds	r1, r4, r0
 800d270:	428b      	cmp	r3, r1
 800d272:	bf04      	itt	eq
 800d274:	6819      	ldreq	r1, [r3, #0]
 800d276:	685b      	ldreq	r3, [r3, #4]
 800d278:	6063      	str	r3, [r4, #4]
 800d27a:	bf04      	itt	eq
 800d27c:	1809      	addeq	r1, r1, r0
 800d27e:	6021      	streq	r1, [r4, #0]
 800d280:	6054      	str	r4, [r2, #4]
 800d282:	e7ca      	b.n	800d21a <_free_r+0x22>
 800d284:	bd38      	pop	{r3, r4, r5, pc}
 800d286:	bf00      	nop
 800d288:	20000ae4 	.word	0x20000ae4

0800d28c <_Balloc>:
 800d28c:	b570      	push	{r4, r5, r6, lr}
 800d28e:	69c6      	ldr	r6, [r0, #28]
 800d290:	4604      	mov	r4, r0
 800d292:	460d      	mov	r5, r1
 800d294:	b976      	cbnz	r6, 800d2b4 <_Balloc+0x28>
 800d296:	2010      	movs	r0, #16
 800d298:	f7fe fa88 	bl	800b7ac <malloc>
 800d29c:	4602      	mov	r2, r0
 800d29e:	61e0      	str	r0, [r4, #28]
 800d2a0:	b920      	cbnz	r0, 800d2ac <_Balloc+0x20>
 800d2a2:	4b18      	ldr	r3, [pc, #96]	@ (800d304 <_Balloc+0x78>)
 800d2a4:	4818      	ldr	r0, [pc, #96]	@ (800d308 <_Balloc+0x7c>)
 800d2a6:	216b      	movs	r1, #107	@ 0x6b
 800d2a8:	f000 fd96 	bl	800ddd8 <__assert_func>
 800d2ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2b0:	6006      	str	r6, [r0, #0]
 800d2b2:	60c6      	str	r6, [r0, #12]
 800d2b4:	69e6      	ldr	r6, [r4, #28]
 800d2b6:	68f3      	ldr	r3, [r6, #12]
 800d2b8:	b183      	cbz	r3, 800d2dc <_Balloc+0x50>
 800d2ba:	69e3      	ldr	r3, [r4, #28]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d2c2:	b9b8      	cbnz	r0, 800d2f4 <_Balloc+0x68>
 800d2c4:	2101      	movs	r1, #1
 800d2c6:	fa01 f605 	lsl.w	r6, r1, r5
 800d2ca:	1d72      	adds	r2, r6, #5
 800d2cc:	0092      	lsls	r2, r2, #2
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f000 fda0 	bl	800de14 <_calloc_r>
 800d2d4:	b160      	cbz	r0, 800d2f0 <_Balloc+0x64>
 800d2d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d2da:	e00e      	b.n	800d2fa <_Balloc+0x6e>
 800d2dc:	2221      	movs	r2, #33	@ 0x21
 800d2de:	2104      	movs	r1, #4
 800d2e0:	4620      	mov	r0, r4
 800d2e2:	f000 fd97 	bl	800de14 <_calloc_r>
 800d2e6:	69e3      	ldr	r3, [r4, #28]
 800d2e8:	60f0      	str	r0, [r6, #12]
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d1e4      	bne.n	800d2ba <_Balloc+0x2e>
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	bd70      	pop	{r4, r5, r6, pc}
 800d2f4:	6802      	ldr	r2, [r0, #0]
 800d2f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d300:	e7f7      	b.n	800d2f2 <_Balloc+0x66>
 800d302:	bf00      	nop
 800d304:	0800fc9d 	.word	0x0800fc9d
 800d308:	0800fd1d 	.word	0x0800fd1d

0800d30c <_Bfree>:
 800d30c:	b570      	push	{r4, r5, r6, lr}
 800d30e:	69c6      	ldr	r6, [r0, #28]
 800d310:	4605      	mov	r5, r0
 800d312:	460c      	mov	r4, r1
 800d314:	b976      	cbnz	r6, 800d334 <_Bfree+0x28>
 800d316:	2010      	movs	r0, #16
 800d318:	f7fe fa48 	bl	800b7ac <malloc>
 800d31c:	4602      	mov	r2, r0
 800d31e:	61e8      	str	r0, [r5, #28]
 800d320:	b920      	cbnz	r0, 800d32c <_Bfree+0x20>
 800d322:	4b09      	ldr	r3, [pc, #36]	@ (800d348 <_Bfree+0x3c>)
 800d324:	4809      	ldr	r0, [pc, #36]	@ (800d34c <_Bfree+0x40>)
 800d326:	218f      	movs	r1, #143	@ 0x8f
 800d328:	f000 fd56 	bl	800ddd8 <__assert_func>
 800d32c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d330:	6006      	str	r6, [r0, #0]
 800d332:	60c6      	str	r6, [r0, #12]
 800d334:	b13c      	cbz	r4, 800d346 <_Bfree+0x3a>
 800d336:	69eb      	ldr	r3, [r5, #28]
 800d338:	6862      	ldr	r2, [r4, #4]
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d340:	6021      	str	r1, [r4, #0]
 800d342:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d346:	bd70      	pop	{r4, r5, r6, pc}
 800d348:	0800fc9d 	.word	0x0800fc9d
 800d34c:	0800fd1d 	.word	0x0800fd1d

0800d350 <__multadd>:
 800d350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d354:	690d      	ldr	r5, [r1, #16]
 800d356:	4607      	mov	r7, r0
 800d358:	460c      	mov	r4, r1
 800d35a:	461e      	mov	r6, r3
 800d35c:	f101 0c14 	add.w	ip, r1, #20
 800d360:	2000      	movs	r0, #0
 800d362:	f8dc 3000 	ldr.w	r3, [ip]
 800d366:	b299      	uxth	r1, r3
 800d368:	fb02 6101 	mla	r1, r2, r1, r6
 800d36c:	0c1e      	lsrs	r6, r3, #16
 800d36e:	0c0b      	lsrs	r3, r1, #16
 800d370:	fb02 3306 	mla	r3, r2, r6, r3
 800d374:	b289      	uxth	r1, r1
 800d376:	3001      	adds	r0, #1
 800d378:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d37c:	4285      	cmp	r5, r0
 800d37e:	f84c 1b04 	str.w	r1, [ip], #4
 800d382:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d386:	dcec      	bgt.n	800d362 <__multadd+0x12>
 800d388:	b30e      	cbz	r6, 800d3ce <__multadd+0x7e>
 800d38a:	68a3      	ldr	r3, [r4, #8]
 800d38c:	42ab      	cmp	r3, r5
 800d38e:	dc19      	bgt.n	800d3c4 <__multadd+0x74>
 800d390:	6861      	ldr	r1, [r4, #4]
 800d392:	4638      	mov	r0, r7
 800d394:	3101      	adds	r1, #1
 800d396:	f7ff ff79 	bl	800d28c <_Balloc>
 800d39a:	4680      	mov	r8, r0
 800d39c:	b928      	cbnz	r0, 800d3aa <__multadd+0x5a>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	4b0c      	ldr	r3, [pc, #48]	@ (800d3d4 <__multadd+0x84>)
 800d3a2:	480d      	ldr	r0, [pc, #52]	@ (800d3d8 <__multadd+0x88>)
 800d3a4:	21ba      	movs	r1, #186	@ 0xba
 800d3a6:	f000 fd17 	bl	800ddd8 <__assert_func>
 800d3aa:	6922      	ldr	r2, [r4, #16]
 800d3ac:	3202      	adds	r2, #2
 800d3ae:	f104 010c 	add.w	r1, r4, #12
 800d3b2:	0092      	lsls	r2, r2, #2
 800d3b4:	300c      	adds	r0, #12
 800d3b6:	f000 fd01 	bl	800ddbc <memcpy>
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	4638      	mov	r0, r7
 800d3be:	f7ff ffa5 	bl	800d30c <_Bfree>
 800d3c2:	4644      	mov	r4, r8
 800d3c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d3c8:	3501      	adds	r5, #1
 800d3ca:	615e      	str	r6, [r3, #20]
 800d3cc:	6125      	str	r5, [r4, #16]
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3d4:	0800fd0c 	.word	0x0800fd0c
 800d3d8:	0800fd1d 	.word	0x0800fd1d

0800d3dc <__hi0bits>:
 800d3dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	bf36      	itet	cc
 800d3e4:	0403      	lslcc	r3, r0, #16
 800d3e6:	2000      	movcs	r0, #0
 800d3e8:	2010      	movcc	r0, #16
 800d3ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d3ee:	bf3c      	itt	cc
 800d3f0:	021b      	lslcc	r3, r3, #8
 800d3f2:	3008      	addcc	r0, #8
 800d3f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d3f8:	bf3c      	itt	cc
 800d3fa:	011b      	lslcc	r3, r3, #4
 800d3fc:	3004      	addcc	r0, #4
 800d3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d402:	bf3c      	itt	cc
 800d404:	009b      	lslcc	r3, r3, #2
 800d406:	3002      	addcc	r0, #2
 800d408:	2b00      	cmp	r3, #0
 800d40a:	db05      	blt.n	800d418 <__hi0bits+0x3c>
 800d40c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d410:	f100 0001 	add.w	r0, r0, #1
 800d414:	bf08      	it	eq
 800d416:	2020      	moveq	r0, #32
 800d418:	4770      	bx	lr

0800d41a <__lo0bits>:
 800d41a:	6803      	ldr	r3, [r0, #0]
 800d41c:	4602      	mov	r2, r0
 800d41e:	f013 0007 	ands.w	r0, r3, #7
 800d422:	d00b      	beq.n	800d43c <__lo0bits+0x22>
 800d424:	07d9      	lsls	r1, r3, #31
 800d426:	d421      	bmi.n	800d46c <__lo0bits+0x52>
 800d428:	0798      	lsls	r0, r3, #30
 800d42a:	bf49      	itett	mi
 800d42c:	085b      	lsrmi	r3, r3, #1
 800d42e:	089b      	lsrpl	r3, r3, #2
 800d430:	2001      	movmi	r0, #1
 800d432:	6013      	strmi	r3, [r2, #0]
 800d434:	bf5c      	itt	pl
 800d436:	6013      	strpl	r3, [r2, #0]
 800d438:	2002      	movpl	r0, #2
 800d43a:	4770      	bx	lr
 800d43c:	b299      	uxth	r1, r3
 800d43e:	b909      	cbnz	r1, 800d444 <__lo0bits+0x2a>
 800d440:	0c1b      	lsrs	r3, r3, #16
 800d442:	2010      	movs	r0, #16
 800d444:	b2d9      	uxtb	r1, r3
 800d446:	b909      	cbnz	r1, 800d44c <__lo0bits+0x32>
 800d448:	3008      	adds	r0, #8
 800d44a:	0a1b      	lsrs	r3, r3, #8
 800d44c:	0719      	lsls	r1, r3, #28
 800d44e:	bf04      	itt	eq
 800d450:	091b      	lsreq	r3, r3, #4
 800d452:	3004      	addeq	r0, #4
 800d454:	0799      	lsls	r1, r3, #30
 800d456:	bf04      	itt	eq
 800d458:	089b      	lsreq	r3, r3, #2
 800d45a:	3002      	addeq	r0, #2
 800d45c:	07d9      	lsls	r1, r3, #31
 800d45e:	d403      	bmi.n	800d468 <__lo0bits+0x4e>
 800d460:	085b      	lsrs	r3, r3, #1
 800d462:	f100 0001 	add.w	r0, r0, #1
 800d466:	d003      	beq.n	800d470 <__lo0bits+0x56>
 800d468:	6013      	str	r3, [r2, #0]
 800d46a:	4770      	bx	lr
 800d46c:	2000      	movs	r0, #0
 800d46e:	4770      	bx	lr
 800d470:	2020      	movs	r0, #32
 800d472:	4770      	bx	lr

0800d474 <__i2b>:
 800d474:	b510      	push	{r4, lr}
 800d476:	460c      	mov	r4, r1
 800d478:	2101      	movs	r1, #1
 800d47a:	f7ff ff07 	bl	800d28c <_Balloc>
 800d47e:	4602      	mov	r2, r0
 800d480:	b928      	cbnz	r0, 800d48e <__i2b+0x1a>
 800d482:	4b05      	ldr	r3, [pc, #20]	@ (800d498 <__i2b+0x24>)
 800d484:	4805      	ldr	r0, [pc, #20]	@ (800d49c <__i2b+0x28>)
 800d486:	f240 1145 	movw	r1, #325	@ 0x145
 800d48a:	f000 fca5 	bl	800ddd8 <__assert_func>
 800d48e:	2301      	movs	r3, #1
 800d490:	6144      	str	r4, [r0, #20]
 800d492:	6103      	str	r3, [r0, #16]
 800d494:	bd10      	pop	{r4, pc}
 800d496:	bf00      	nop
 800d498:	0800fd0c 	.word	0x0800fd0c
 800d49c:	0800fd1d 	.word	0x0800fd1d

0800d4a0 <__multiply>:
 800d4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a4:	4617      	mov	r7, r2
 800d4a6:	690a      	ldr	r2, [r1, #16]
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	bfa8      	it	ge
 800d4ae:	463b      	movge	r3, r7
 800d4b0:	4689      	mov	r9, r1
 800d4b2:	bfa4      	itt	ge
 800d4b4:	460f      	movge	r7, r1
 800d4b6:	4699      	movge	r9, r3
 800d4b8:	693d      	ldr	r5, [r7, #16]
 800d4ba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	6879      	ldr	r1, [r7, #4]
 800d4c2:	eb05 060a 	add.w	r6, r5, sl
 800d4c6:	42b3      	cmp	r3, r6
 800d4c8:	b085      	sub	sp, #20
 800d4ca:	bfb8      	it	lt
 800d4cc:	3101      	addlt	r1, #1
 800d4ce:	f7ff fedd 	bl	800d28c <_Balloc>
 800d4d2:	b930      	cbnz	r0, 800d4e2 <__multiply+0x42>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	4b41      	ldr	r3, [pc, #260]	@ (800d5dc <__multiply+0x13c>)
 800d4d8:	4841      	ldr	r0, [pc, #260]	@ (800d5e0 <__multiply+0x140>)
 800d4da:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d4de:	f000 fc7b 	bl	800ddd8 <__assert_func>
 800d4e2:	f100 0414 	add.w	r4, r0, #20
 800d4e6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d4ea:	4623      	mov	r3, r4
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	4573      	cmp	r3, lr
 800d4f0:	d320      	bcc.n	800d534 <__multiply+0x94>
 800d4f2:	f107 0814 	add.w	r8, r7, #20
 800d4f6:	f109 0114 	add.w	r1, r9, #20
 800d4fa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d4fe:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d502:	9302      	str	r3, [sp, #8]
 800d504:	1beb      	subs	r3, r5, r7
 800d506:	3b15      	subs	r3, #21
 800d508:	f023 0303 	bic.w	r3, r3, #3
 800d50c:	3304      	adds	r3, #4
 800d50e:	3715      	adds	r7, #21
 800d510:	42bd      	cmp	r5, r7
 800d512:	bf38      	it	cc
 800d514:	2304      	movcc	r3, #4
 800d516:	9301      	str	r3, [sp, #4]
 800d518:	9b02      	ldr	r3, [sp, #8]
 800d51a:	9103      	str	r1, [sp, #12]
 800d51c:	428b      	cmp	r3, r1
 800d51e:	d80c      	bhi.n	800d53a <__multiply+0x9a>
 800d520:	2e00      	cmp	r6, #0
 800d522:	dd03      	ble.n	800d52c <__multiply+0x8c>
 800d524:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d055      	beq.n	800d5d8 <__multiply+0x138>
 800d52c:	6106      	str	r6, [r0, #16]
 800d52e:	b005      	add	sp, #20
 800d530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d534:	f843 2b04 	str.w	r2, [r3], #4
 800d538:	e7d9      	b.n	800d4ee <__multiply+0x4e>
 800d53a:	f8b1 a000 	ldrh.w	sl, [r1]
 800d53e:	f1ba 0f00 	cmp.w	sl, #0
 800d542:	d01f      	beq.n	800d584 <__multiply+0xe4>
 800d544:	46c4      	mov	ip, r8
 800d546:	46a1      	mov	r9, r4
 800d548:	2700      	movs	r7, #0
 800d54a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d54e:	f8d9 3000 	ldr.w	r3, [r9]
 800d552:	fa1f fb82 	uxth.w	fp, r2
 800d556:	b29b      	uxth	r3, r3
 800d558:	fb0a 330b 	mla	r3, sl, fp, r3
 800d55c:	443b      	add	r3, r7
 800d55e:	f8d9 7000 	ldr.w	r7, [r9]
 800d562:	0c12      	lsrs	r2, r2, #16
 800d564:	0c3f      	lsrs	r7, r7, #16
 800d566:	fb0a 7202 	mla	r2, sl, r2, r7
 800d56a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d56e:	b29b      	uxth	r3, r3
 800d570:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d574:	4565      	cmp	r5, ip
 800d576:	f849 3b04 	str.w	r3, [r9], #4
 800d57a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d57e:	d8e4      	bhi.n	800d54a <__multiply+0xaa>
 800d580:	9b01      	ldr	r3, [sp, #4]
 800d582:	50e7      	str	r7, [r4, r3]
 800d584:	9b03      	ldr	r3, [sp, #12]
 800d586:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d58a:	3104      	adds	r1, #4
 800d58c:	f1b9 0f00 	cmp.w	r9, #0
 800d590:	d020      	beq.n	800d5d4 <__multiply+0x134>
 800d592:	6823      	ldr	r3, [r4, #0]
 800d594:	4647      	mov	r7, r8
 800d596:	46a4      	mov	ip, r4
 800d598:	f04f 0a00 	mov.w	sl, #0
 800d59c:	f8b7 b000 	ldrh.w	fp, [r7]
 800d5a0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d5a4:	fb09 220b 	mla	r2, r9, fp, r2
 800d5a8:	4452      	add	r2, sl
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5b0:	f84c 3b04 	str.w	r3, [ip], #4
 800d5b4:	f857 3b04 	ldr.w	r3, [r7], #4
 800d5b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d5bc:	f8bc 3000 	ldrh.w	r3, [ip]
 800d5c0:	fb09 330a 	mla	r3, r9, sl, r3
 800d5c4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d5c8:	42bd      	cmp	r5, r7
 800d5ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d5ce:	d8e5      	bhi.n	800d59c <__multiply+0xfc>
 800d5d0:	9a01      	ldr	r2, [sp, #4]
 800d5d2:	50a3      	str	r3, [r4, r2]
 800d5d4:	3404      	adds	r4, #4
 800d5d6:	e79f      	b.n	800d518 <__multiply+0x78>
 800d5d8:	3e01      	subs	r6, #1
 800d5da:	e7a1      	b.n	800d520 <__multiply+0x80>
 800d5dc:	0800fd0c 	.word	0x0800fd0c
 800d5e0:	0800fd1d 	.word	0x0800fd1d

0800d5e4 <__pow5mult>:
 800d5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5e8:	4615      	mov	r5, r2
 800d5ea:	f012 0203 	ands.w	r2, r2, #3
 800d5ee:	4607      	mov	r7, r0
 800d5f0:	460e      	mov	r6, r1
 800d5f2:	d007      	beq.n	800d604 <__pow5mult+0x20>
 800d5f4:	4c25      	ldr	r4, [pc, #148]	@ (800d68c <__pow5mult+0xa8>)
 800d5f6:	3a01      	subs	r2, #1
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d5fe:	f7ff fea7 	bl	800d350 <__multadd>
 800d602:	4606      	mov	r6, r0
 800d604:	10ad      	asrs	r5, r5, #2
 800d606:	d03d      	beq.n	800d684 <__pow5mult+0xa0>
 800d608:	69fc      	ldr	r4, [r7, #28]
 800d60a:	b97c      	cbnz	r4, 800d62c <__pow5mult+0x48>
 800d60c:	2010      	movs	r0, #16
 800d60e:	f7fe f8cd 	bl	800b7ac <malloc>
 800d612:	4602      	mov	r2, r0
 800d614:	61f8      	str	r0, [r7, #28]
 800d616:	b928      	cbnz	r0, 800d624 <__pow5mult+0x40>
 800d618:	4b1d      	ldr	r3, [pc, #116]	@ (800d690 <__pow5mult+0xac>)
 800d61a:	481e      	ldr	r0, [pc, #120]	@ (800d694 <__pow5mult+0xb0>)
 800d61c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d620:	f000 fbda 	bl	800ddd8 <__assert_func>
 800d624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d628:	6004      	str	r4, [r0, #0]
 800d62a:	60c4      	str	r4, [r0, #12]
 800d62c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d634:	b94c      	cbnz	r4, 800d64a <__pow5mult+0x66>
 800d636:	f240 2171 	movw	r1, #625	@ 0x271
 800d63a:	4638      	mov	r0, r7
 800d63c:	f7ff ff1a 	bl	800d474 <__i2b>
 800d640:	2300      	movs	r3, #0
 800d642:	f8c8 0008 	str.w	r0, [r8, #8]
 800d646:	4604      	mov	r4, r0
 800d648:	6003      	str	r3, [r0, #0]
 800d64a:	f04f 0900 	mov.w	r9, #0
 800d64e:	07eb      	lsls	r3, r5, #31
 800d650:	d50a      	bpl.n	800d668 <__pow5mult+0x84>
 800d652:	4631      	mov	r1, r6
 800d654:	4622      	mov	r2, r4
 800d656:	4638      	mov	r0, r7
 800d658:	f7ff ff22 	bl	800d4a0 <__multiply>
 800d65c:	4631      	mov	r1, r6
 800d65e:	4680      	mov	r8, r0
 800d660:	4638      	mov	r0, r7
 800d662:	f7ff fe53 	bl	800d30c <_Bfree>
 800d666:	4646      	mov	r6, r8
 800d668:	106d      	asrs	r5, r5, #1
 800d66a:	d00b      	beq.n	800d684 <__pow5mult+0xa0>
 800d66c:	6820      	ldr	r0, [r4, #0]
 800d66e:	b938      	cbnz	r0, 800d680 <__pow5mult+0x9c>
 800d670:	4622      	mov	r2, r4
 800d672:	4621      	mov	r1, r4
 800d674:	4638      	mov	r0, r7
 800d676:	f7ff ff13 	bl	800d4a0 <__multiply>
 800d67a:	6020      	str	r0, [r4, #0]
 800d67c:	f8c0 9000 	str.w	r9, [r0]
 800d680:	4604      	mov	r4, r0
 800d682:	e7e4      	b.n	800d64e <__pow5mult+0x6a>
 800d684:	4630      	mov	r0, r6
 800d686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d68a:	bf00      	nop
 800d68c:	0800fdd0 	.word	0x0800fdd0
 800d690:	0800fc9d 	.word	0x0800fc9d
 800d694:	0800fd1d 	.word	0x0800fd1d

0800d698 <__lshift>:
 800d698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d69c:	460c      	mov	r4, r1
 800d69e:	6849      	ldr	r1, [r1, #4]
 800d6a0:	6923      	ldr	r3, [r4, #16]
 800d6a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d6a6:	68a3      	ldr	r3, [r4, #8]
 800d6a8:	4607      	mov	r7, r0
 800d6aa:	4691      	mov	r9, r2
 800d6ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d6b0:	f108 0601 	add.w	r6, r8, #1
 800d6b4:	42b3      	cmp	r3, r6
 800d6b6:	db0b      	blt.n	800d6d0 <__lshift+0x38>
 800d6b8:	4638      	mov	r0, r7
 800d6ba:	f7ff fde7 	bl	800d28c <_Balloc>
 800d6be:	4605      	mov	r5, r0
 800d6c0:	b948      	cbnz	r0, 800d6d6 <__lshift+0x3e>
 800d6c2:	4602      	mov	r2, r0
 800d6c4:	4b28      	ldr	r3, [pc, #160]	@ (800d768 <__lshift+0xd0>)
 800d6c6:	4829      	ldr	r0, [pc, #164]	@ (800d76c <__lshift+0xd4>)
 800d6c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d6cc:	f000 fb84 	bl	800ddd8 <__assert_func>
 800d6d0:	3101      	adds	r1, #1
 800d6d2:	005b      	lsls	r3, r3, #1
 800d6d4:	e7ee      	b.n	800d6b4 <__lshift+0x1c>
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	f100 0114 	add.w	r1, r0, #20
 800d6dc:	f100 0210 	add.w	r2, r0, #16
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	4553      	cmp	r3, sl
 800d6e4:	db33      	blt.n	800d74e <__lshift+0xb6>
 800d6e6:	6920      	ldr	r0, [r4, #16]
 800d6e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d6ec:	f104 0314 	add.w	r3, r4, #20
 800d6f0:	f019 091f 	ands.w	r9, r9, #31
 800d6f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d6f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d6fc:	d02b      	beq.n	800d756 <__lshift+0xbe>
 800d6fe:	f1c9 0e20 	rsb	lr, r9, #32
 800d702:	468a      	mov	sl, r1
 800d704:	2200      	movs	r2, #0
 800d706:	6818      	ldr	r0, [r3, #0]
 800d708:	fa00 f009 	lsl.w	r0, r0, r9
 800d70c:	4310      	orrs	r0, r2
 800d70e:	f84a 0b04 	str.w	r0, [sl], #4
 800d712:	f853 2b04 	ldr.w	r2, [r3], #4
 800d716:	459c      	cmp	ip, r3
 800d718:	fa22 f20e 	lsr.w	r2, r2, lr
 800d71c:	d8f3      	bhi.n	800d706 <__lshift+0x6e>
 800d71e:	ebac 0304 	sub.w	r3, ip, r4
 800d722:	3b15      	subs	r3, #21
 800d724:	f023 0303 	bic.w	r3, r3, #3
 800d728:	3304      	adds	r3, #4
 800d72a:	f104 0015 	add.w	r0, r4, #21
 800d72e:	4560      	cmp	r0, ip
 800d730:	bf88      	it	hi
 800d732:	2304      	movhi	r3, #4
 800d734:	50ca      	str	r2, [r1, r3]
 800d736:	b10a      	cbz	r2, 800d73c <__lshift+0xa4>
 800d738:	f108 0602 	add.w	r6, r8, #2
 800d73c:	3e01      	subs	r6, #1
 800d73e:	4638      	mov	r0, r7
 800d740:	612e      	str	r6, [r5, #16]
 800d742:	4621      	mov	r1, r4
 800d744:	f7ff fde2 	bl	800d30c <_Bfree>
 800d748:	4628      	mov	r0, r5
 800d74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d74e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d752:	3301      	adds	r3, #1
 800d754:	e7c5      	b.n	800d6e2 <__lshift+0x4a>
 800d756:	3904      	subs	r1, #4
 800d758:	f853 2b04 	ldr.w	r2, [r3], #4
 800d75c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d760:	459c      	cmp	ip, r3
 800d762:	d8f9      	bhi.n	800d758 <__lshift+0xc0>
 800d764:	e7ea      	b.n	800d73c <__lshift+0xa4>
 800d766:	bf00      	nop
 800d768:	0800fd0c 	.word	0x0800fd0c
 800d76c:	0800fd1d 	.word	0x0800fd1d

0800d770 <__mcmp>:
 800d770:	690a      	ldr	r2, [r1, #16]
 800d772:	4603      	mov	r3, r0
 800d774:	6900      	ldr	r0, [r0, #16]
 800d776:	1a80      	subs	r0, r0, r2
 800d778:	b530      	push	{r4, r5, lr}
 800d77a:	d10e      	bne.n	800d79a <__mcmp+0x2a>
 800d77c:	3314      	adds	r3, #20
 800d77e:	3114      	adds	r1, #20
 800d780:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d784:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d788:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d78c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d790:	4295      	cmp	r5, r2
 800d792:	d003      	beq.n	800d79c <__mcmp+0x2c>
 800d794:	d205      	bcs.n	800d7a2 <__mcmp+0x32>
 800d796:	f04f 30ff 	mov.w	r0, #4294967295
 800d79a:	bd30      	pop	{r4, r5, pc}
 800d79c:	42a3      	cmp	r3, r4
 800d79e:	d3f3      	bcc.n	800d788 <__mcmp+0x18>
 800d7a0:	e7fb      	b.n	800d79a <__mcmp+0x2a>
 800d7a2:	2001      	movs	r0, #1
 800d7a4:	e7f9      	b.n	800d79a <__mcmp+0x2a>
	...

0800d7a8 <__mdiff>:
 800d7a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ac:	4689      	mov	r9, r1
 800d7ae:	4606      	mov	r6, r0
 800d7b0:	4611      	mov	r1, r2
 800d7b2:	4648      	mov	r0, r9
 800d7b4:	4614      	mov	r4, r2
 800d7b6:	f7ff ffdb 	bl	800d770 <__mcmp>
 800d7ba:	1e05      	subs	r5, r0, #0
 800d7bc:	d112      	bne.n	800d7e4 <__mdiff+0x3c>
 800d7be:	4629      	mov	r1, r5
 800d7c0:	4630      	mov	r0, r6
 800d7c2:	f7ff fd63 	bl	800d28c <_Balloc>
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	b928      	cbnz	r0, 800d7d6 <__mdiff+0x2e>
 800d7ca:	4b3f      	ldr	r3, [pc, #252]	@ (800d8c8 <__mdiff+0x120>)
 800d7cc:	f240 2137 	movw	r1, #567	@ 0x237
 800d7d0:	483e      	ldr	r0, [pc, #248]	@ (800d8cc <__mdiff+0x124>)
 800d7d2:	f000 fb01 	bl	800ddd8 <__assert_func>
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d7dc:	4610      	mov	r0, r2
 800d7de:	b003      	add	sp, #12
 800d7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e4:	bfbc      	itt	lt
 800d7e6:	464b      	movlt	r3, r9
 800d7e8:	46a1      	movlt	r9, r4
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d7f0:	bfba      	itte	lt
 800d7f2:	461c      	movlt	r4, r3
 800d7f4:	2501      	movlt	r5, #1
 800d7f6:	2500      	movge	r5, #0
 800d7f8:	f7ff fd48 	bl	800d28c <_Balloc>
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	b918      	cbnz	r0, 800d808 <__mdiff+0x60>
 800d800:	4b31      	ldr	r3, [pc, #196]	@ (800d8c8 <__mdiff+0x120>)
 800d802:	f240 2145 	movw	r1, #581	@ 0x245
 800d806:	e7e3      	b.n	800d7d0 <__mdiff+0x28>
 800d808:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d80c:	6926      	ldr	r6, [r4, #16]
 800d80e:	60c5      	str	r5, [r0, #12]
 800d810:	f109 0310 	add.w	r3, r9, #16
 800d814:	f109 0514 	add.w	r5, r9, #20
 800d818:	f104 0e14 	add.w	lr, r4, #20
 800d81c:	f100 0b14 	add.w	fp, r0, #20
 800d820:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d824:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d828:	9301      	str	r3, [sp, #4]
 800d82a:	46d9      	mov	r9, fp
 800d82c:	f04f 0c00 	mov.w	ip, #0
 800d830:	9b01      	ldr	r3, [sp, #4]
 800d832:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d836:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d83a:	9301      	str	r3, [sp, #4]
 800d83c:	fa1f f38a 	uxth.w	r3, sl
 800d840:	4619      	mov	r1, r3
 800d842:	b283      	uxth	r3, r0
 800d844:	1acb      	subs	r3, r1, r3
 800d846:	0c00      	lsrs	r0, r0, #16
 800d848:	4463      	add	r3, ip
 800d84a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d84e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d852:	b29b      	uxth	r3, r3
 800d854:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d858:	4576      	cmp	r6, lr
 800d85a:	f849 3b04 	str.w	r3, [r9], #4
 800d85e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d862:	d8e5      	bhi.n	800d830 <__mdiff+0x88>
 800d864:	1b33      	subs	r3, r6, r4
 800d866:	3b15      	subs	r3, #21
 800d868:	f023 0303 	bic.w	r3, r3, #3
 800d86c:	3415      	adds	r4, #21
 800d86e:	3304      	adds	r3, #4
 800d870:	42a6      	cmp	r6, r4
 800d872:	bf38      	it	cc
 800d874:	2304      	movcc	r3, #4
 800d876:	441d      	add	r5, r3
 800d878:	445b      	add	r3, fp
 800d87a:	461e      	mov	r6, r3
 800d87c:	462c      	mov	r4, r5
 800d87e:	4544      	cmp	r4, r8
 800d880:	d30e      	bcc.n	800d8a0 <__mdiff+0xf8>
 800d882:	f108 0103 	add.w	r1, r8, #3
 800d886:	1b49      	subs	r1, r1, r5
 800d888:	f021 0103 	bic.w	r1, r1, #3
 800d88c:	3d03      	subs	r5, #3
 800d88e:	45a8      	cmp	r8, r5
 800d890:	bf38      	it	cc
 800d892:	2100      	movcc	r1, #0
 800d894:	440b      	add	r3, r1
 800d896:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d89a:	b191      	cbz	r1, 800d8c2 <__mdiff+0x11a>
 800d89c:	6117      	str	r7, [r2, #16]
 800d89e:	e79d      	b.n	800d7dc <__mdiff+0x34>
 800d8a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800d8a4:	46e6      	mov	lr, ip
 800d8a6:	0c08      	lsrs	r0, r1, #16
 800d8a8:	fa1c fc81 	uxtah	ip, ip, r1
 800d8ac:	4471      	add	r1, lr
 800d8ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d8b2:	b289      	uxth	r1, r1
 800d8b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d8b8:	f846 1b04 	str.w	r1, [r6], #4
 800d8bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d8c0:	e7dd      	b.n	800d87e <__mdiff+0xd6>
 800d8c2:	3f01      	subs	r7, #1
 800d8c4:	e7e7      	b.n	800d896 <__mdiff+0xee>
 800d8c6:	bf00      	nop
 800d8c8:	0800fd0c 	.word	0x0800fd0c
 800d8cc:	0800fd1d 	.word	0x0800fd1d

0800d8d0 <__d2b>:
 800d8d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8d4:	460f      	mov	r7, r1
 800d8d6:	2101      	movs	r1, #1
 800d8d8:	ec59 8b10 	vmov	r8, r9, d0
 800d8dc:	4616      	mov	r6, r2
 800d8de:	f7ff fcd5 	bl	800d28c <_Balloc>
 800d8e2:	4604      	mov	r4, r0
 800d8e4:	b930      	cbnz	r0, 800d8f4 <__d2b+0x24>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	4b23      	ldr	r3, [pc, #140]	@ (800d978 <__d2b+0xa8>)
 800d8ea:	4824      	ldr	r0, [pc, #144]	@ (800d97c <__d2b+0xac>)
 800d8ec:	f240 310f 	movw	r1, #783	@ 0x30f
 800d8f0:	f000 fa72 	bl	800ddd8 <__assert_func>
 800d8f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d8f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d8fc:	b10d      	cbz	r5, 800d902 <__d2b+0x32>
 800d8fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d902:	9301      	str	r3, [sp, #4]
 800d904:	f1b8 0300 	subs.w	r3, r8, #0
 800d908:	d023      	beq.n	800d952 <__d2b+0x82>
 800d90a:	4668      	mov	r0, sp
 800d90c:	9300      	str	r3, [sp, #0]
 800d90e:	f7ff fd84 	bl	800d41a <__lo0bits>
 800d912:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d916:	b1d0      	cbz	r0, 800d94e <__d2b+0x7e>
 800d918:	f1c0 0320 	rsb	r3, r0, #32
 800d91c:	fa02 f303 	lsl.w	r3, r2, r3
 800d920:	430b      	orrs	r3, r1
 800d922:	40c2      	lsrs	r2, r0
 800d924:	6163      	str	r3, [r4, #20]
 800d926:	9201      	str	r2, [sp, #4]
 800d928:	9b01      	ldr	r3, [sp, #4]
 800d92a:	61a3      	str	r3, [r4, #24]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	bf0c      	ite	eq
 800d930:	2201      	moveq	r2, #1
 800d932:	2202      	movne	r2, #2
 800d934:	6122      	str	r2, [r4, #16]
 800d936:	b1a5      	cbz	r5, 800d962 <__d2b+0x92>
 800d938:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d93c:	4405      	add	r5, r0
 800d93e:	603d      	str	r5, [r7, #0]
 800d940:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d944:	6030      	str	r0, [r6, #0]
 800d946:	4620      	mov	r0, r4
 800d948:	b003      	add	sp, #12
 800d94a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d94e:	6161      	str	r1, [r4, #20]
 800d950:	e7ea      	b.n	800d928 <__d2b+0x58>
 800d952:	a801      	add	r0, sp, #4
 800d954:	f7ff fd61 	bl	800d41a <__lo0bits>
 800d958:	9b01      	ldr	r3, [sp, #4]
 800d95a:	6163      	str	r3, [r4, #20]
 800d95c:	3020      	adds	r0, #32
 800d95e:	2201      	movs	r2, #1
 800d960:	e7e8      	b.n	800d934 <__d2b+0x64>
 800d962:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d966:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d96a:	6038      	str	r0, [r7, #0]
 800d96c:	6918      	ldr	r0, [r3, #16]
 800d96e:	f7ff fd35 	bl	800d3dc <__hi0bits>
 800d972:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d976:	e7e5      	b.n	800d944 <__d2b+0x74>
 800d978:	0800fd0c 	.word	0x0800fd0c
 800d97c:	0800fd1d 	.word	0x0800fd1d

0800d980 <__ssputs_r>:
 800d980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d984:	688e      	ldr	r6, [r1, #8]
 800d986:	461f      	mov	r7, r3
 800d988:	42be      	cmp	r6, r7
 800d98a:	680b      	ldr	r3, [r1, #0]
 800d98c:	4682      	mov	sl, r0
 800d98e:	460c      	mov	r4, r1
 800d990:	4690      	mov	r8, r2
 800d992:	d82d      	bhi.n	800d9f0 <__ssputs_r+0x70>
 800d994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d998:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d99c:	d026      	beq.n	800d9ec <__ssputs_r+0x6c>
 800d99e:	6965      	ldr	r5, [r4, #20]
 800d9a0:	6909      	ldr	r1, [r1, #16]
 800d9a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9a6:	eba3 0901 	sub.w	r9, r3, r1
 800d9aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9ae:	1c7b      	adds	r3, r7, #1
 800d9b0:	444b      	add	r3, r9
 800d9b2:	106d      	asrs	r5, r5, #1
 800d9b4:	429d      	cmp	r5, r3
 800d9b6:	bf38      	it	cc
 800d9b8:	461d      	movcc	r5, r3
 800d9ba:	0553      	lsls	r3, r2, #21
 800d9bc:	d527      	bpl.n	800da0e <__ssputs_r+0x8e>
 800d9be:	4629      	mov	r1, r5
 800d9c0:	f7fd ff26 	bl	800b810 <_malloc_r>
 800d9c4:	4606      	mov	r6, r0
 800d9c6:	b360      	cbz	r0, 800da22 <__ssputs_r+0xa2>
 800d9c8:	6921      	ldr	r1, [r4, #16]
 800d9ca:	464a      	mov	r2, r9
 800d9cc:	f000 f9f6 	bl	800ddbc <memcpy>
 800d9d0:	89a3      	ldrh	r3, [r4, #12]
 800d9d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d9d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9da:	81a3      	strh	r3, [r4, #12]
 800d9dc:	6126      	str	r6, [r4, #16]
 800d9de:	6165      	str	r5, [r4, #20]
 800d9e0:	444e      	add	r6, r9
 800d9e2:	eba5 0509 	sub.w	r5, r5, r9
 800d9e6:	6026      	str	r6, [r4, #0]
 800d9e8:	60a5      	str	r5, [r4, #8]
 800d9ea:	463e      	mov	r6, r7
 800d9ec:	42be      	cmp	r6, r7
 800d9ee:	d900      	bls.n	800d9f2 <__ssputs_r+0x72>
 800d9f0:	463e      	mov	r6, r7
 800d9f2:	6820      	ldr	r0, [r4, #0]
 800d9f4:	4632      	mov	r2, r6
 800d9f6:	4641      	mov	r1, r8
 800d9f8:	f000 f9c6 	bl	800dd88 <memmove>
 800d9fc:	68a3      	ldr	r3, [r4, #8]
 800d9fe:	1b9b      	subs	r3, r3, r6
 800da00:	60a3      	str	r3, [r4, #8]
 800da02:	6823      	ldr	r3, [r4, #0]
 800da04:	4433      	add	r3, r6
 800da06:	6023      	str	r3, [r4, #0]
 800da08:	2000      	movs	r0, #0
 800da0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da0e:	462a      	mov	r2, r5
 800da10:	f000 fa26 	bl	800de60 <_realloc_r>
 800da14:	4606      	mov	r6, r0
 800da16:	2800      	cmp	r0, #0
 800da18:	d1e0      	bne.n	800d9dc <__ssputs_r+0x5c>
 800da1a:	6921      	ldr	r1, [r4, #16]
 800da1c:	4650      	mov	r0, sl
 800da1e:	f7ff fbeb 	bl	800d1f8 <_free_r>
 800da22:	230c      	movs	r3, #12
 800da24:	f8ca 3000 	str.w	r3, [sl]
 800da28:	89a3      	ldrh	r3, [r4, #12]
 800da2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da2e:	81a3      	strh	r3, [r4, #12]
 800da30:	f04f 30ff 	mov.w	r0, #4294967295
 800da34:	e7e9      	b.n	800da0a <__ssputs_r+0x8a>
	...

0800da38 <_svfiprintf_r>:
 800da38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3c:	4698      	mov	r8, r3
 800da3e:	898b      	ldrh	r3, [r1, #12]
 800da40:	061b      	lsls	r3, r3, #24
 800da42:	b09d      	sub	sp, #116	@ 0x74
 800da44:	4607      	mov	r7, r0
 800da46:	460d      	mov	r5, r1
 800da48:	4614      	mov	r4, r2
 800da4a:	d510      	bpl.n	800da6e <_svfiprintf_r+0x36>
 800da4c:	690b      	ldr	r3, [r1, #16]
 800da4e:	b973      	cbnz	r3, 800da6e <_svfiprintf_r+0x36>
 800da50:	2140      	movs	r1, #64	@ 0x40
 800da52:	f7fd fedd 	bl	800b810 <_malloc_r>
 800da56:	6028      	str	r0, [r5, #0]
 800da58:	6128      	str	r0, [r5, #16]
 800da5a:	b930      	cbnz	r0, 800da6a <_svfiprintf_r+0x32>
 800da5c:	230c      	movs	r3, #12
 800da5e:	603b      	str	r3, [r7, #0]
 800da60:	f04f 30ff 	mov.w	r0, #4294967295
 800da64:	b01d      	add	sp, #116	@ 0x74
 800da66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da6a:	2340      	movs	r3, #64	@ 0x40
 800da6c:	616b      	str	r3, [r5, #20]
 800da6e:	2300      	movs	r3, #0
 800da70:	9309      	str	r3, [sp, #36]	@ 0x24
 800da72:	2320      	movs	r3, #32
 800da74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da78:	f8cd 800c 	str.w	r8, [sp, #12]
 800da7c:	2330      	movs	r3, #48	@ 0x30
 800da7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dc1c <_svfiprintf_r+0x1e4>
 800da82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da86:	f04f 0901 	mov.w	r9, #1
 800da8a:	4623      	mov	r3, r4
 800da8c:	469a      	mov	sl, r3
 800da8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da92:	b10a      	cbz	r2, 800da98 <_svfiprintf_r+0x60>
 800da94:	2a25      	cmp	r2, #37	@ 0x25
 800da96:	d1f9      	bne.n	800da8c <_svfiprintf_r+0x54>
 800da98:	ebba 0b04 	subs.w	fp, sl, r4
 800da9c:	d00b      	beq.n	800dab6 <_svfiprintf_r+0x7e>
 800da9e:	465b      	mov	r3, fp
 800daa0:	4622      	mov	r2, r4
 800daa2:	4629      	mov	r1, r5
 800daa4:	4638      	mov	r0, r7
 800daa6:	f7ff ff6b 	bl	800d980 <__ssputs_r>
 800daaa:	3001      	adds	r0, #1
 800daac:	f000 80a7 	beq.w	800dbfe <_svfiprintf_r+0x1c6>
 800dab0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dab2:	445a      	add	r2, fp
 800dab4:	9209      	str	r2, [sp, #36]	@ 0x24
 800dab6:	f89a 3000 	ldrb.w	r3, [sl]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	f000 809f 	beq.w	800dbfe <_svfiprintf_r+0x1c6>
 800dac0:	2300      	movs	r3, #0
 800dac2:	f04f 32ff 	mov.w	r2, #4294967295
 800dac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daca:	f10a 0a01 	add.w	sl, sl, #1
 800dace:	9304      	str	r3, [sp, #16]
 800dad0:	9307      	str	r3, [sp, #28]
 800dad2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dad6:	931a      	str	r3, [sp, #104]	@ 0x68
 800dad8:	4654      	mov	r4, sl
 800dada:	2205      	movs	r2, #5
 800dadc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dae0:	484e      	ldr	r0, [pc, #312]	@ (800dc1c <_svfiprintf_r+0x1e4>)
 800dae2:	f7f2 fb75 	bl	80001d0 <memchr>
 800dae6:	9a04      	ldr	r2, [sp, #16]
 800dae8:	b9d8      	cbnz	r0, 800db22 <_svfiprintf_r+0xea>
 800daea:	06d0      	lsls	r0, r2, #27
 800daec:	bf44      	itt	mi
 800daee:	2320      	movmi	r3, #32
 800daf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800daf4:	0711      	lsls	r1, r2, #28
 800daf6:	bf44      	itt	mi
 800daf8:	232b      	movmi	r3, #43	@ 0x2b
 800dafa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dafe:	f89a 3000 	ldrb.w	r3, [sl]
 800db02:	2b2a      	cmp	r3, #42	@ 0x2a
 800db04:	d015      	beq.n	800db32 <_svfiprintf_r+0xfa>
 800db06:	9a07      	ldr	r2, [sp, #28]
 800db08:	4654      	mov	r4, sl
 800db0a:	2000      	movs	r0, #0
 800db0c:	f04f 0c0a 	mov.w	ip, #10
 800db10:	4621      	mov	r1, r4
 800db12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db16:	3b30      	subs	r3, #48	@ 0x30
 800db18:	2b09      	cmp	r3, #9
 800db1a:	d94b      	bls.n	800dbb4 <_svfiprintf_r+0x17c>
 800db1c:	b1b0      	cbz	r0, 800db4c <_svfiprintf_r+0x114>
 800db1e:	9207      	str	r2, [sp, #28]
 800db20:	e014      	b.n	800db4c <_svfiprintf_r+0x114>
 800db22:	eba0 0308 	sub.w	r3, r0, r8
 800db26:	fa09 f303 	lsl.w	r3, r9, r3
 800db2a:	4313      	orrs	r3, r2
 800db2c:	9304      	str	r3, [sp, #16]
 800db2e:	46a2      	mov	sl, r4
 800db30:	e7d2      	b.n	800dad8 <_svfiprintf_r+0xa0>
 800db32:	9b03      	ldr	r3, [sp, #12]
 800db34:	1d19      	adds	r1, r3, #4
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	9103      	str	r1, [sp, #12]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	bfbb      	ittet	lt
 800db3e:	425b      	neglt	r3, r3
 800db40:	f042 0202 	orrlt.w	r2, r2, #2
 800db44:	9307      	strge	r3, [sp, #28]
 800db46:	9307      	strlt	r3, [sp, #28]
 800db48:	bfb8      	it	lt
 800db4a:	9204      	strlt	r2, [sp, #16]
 800db4c:	7823      	ldrb	r3, [r4, #0]
 800db4e:	2b2e      	cmp	r3, #46	@ 0x2e
 800db50:	d10a      	bne.n	800db68 <_svfiprintf_r+0x130>
 800db52:	7863      	ldrb	r3, [r4, #1]
 800db54:	2b2a      	cmp	r3, #42	@ 0x2a
 800db56:	d132      	bne.n	800dbbe <_svfiprintf_r+0x186>
 800db58:	9b03      	ldr	r3, [sp, #12]
 800db5a:	1d1a      	adds	r2, r3, #4
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	9203      	str	r2, [sp, #12]
 800db60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db64:	3402      	adds	r4, #2
 800db66:	9305      	str	r3, [sp, #20]
 800db68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dc2c <_svfiprintf_r+0x1f4>
 800db6c:	7821      	ldrb	r1, [r4, #0]
 800db6e:	2203      	movs	r2, #3
 800db70:	4650      	mov	r0, sl
 800db72:	f7f2 fb2d 	bl	80001d0 <memchr>
 800db76:	b138      	cbz	r0, 800db88 <_svfiprintf_r+0x150>
 800db78:	9b04      	ldr	r3, [sp, #16]
 800db7a:	eba0 000a 	sub.w	r0, r0, sl
 800db7e:	2240      	movs	r2, #64	@ 0x40
 800db80:	4082      	lsls	r2, r0
 800db82:	4313      	orrs	r3, r2
 800db84:	3401      	adds	r4, #1
 800db86:	9304      	str	r3, [sp, #16]
 800db88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db8c:	4824      	ldr	r0, [pc, #144]	@ (800dc20 <_svfiprintf_r+0x1e8>)
 800db8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db92:	2206      	movs	r2, #6
 800db94:	f7f2 fb1c 	bl	80001d0 <memchr>
 800db98:	2800      	cmp	r0, #0
 800db9a:	d036      	beq.n	800dc0a <_svfiprintf_r+0x1d2>
 800db9c:	4b21      	ldr	r3, [pc, #132]	@ (800dc24 <_svfiprintf_r+0x1ec>)
 800db9e:	bb1b      	cbnz	r3, 800dbe8 <_svfiprintf_r+0x1b0>
 800dba0:	9b03      	ldr	r3, [sp, #12]
 800dba2:	3307      	adds	r3, #7
 800dba4:	f023 0307 	bic.w	r3, r3, #7
 800dba8:	3308      	adds	r3, #8
 800dbaa:	9303      	str	r3, [sp, #12]
 800dbac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbae:	4433      	add	r3, r6
 800dbb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbb2:	e76a      	b.n	800da8a <_svfiprintf_r+0x52>
 800dbb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbb8:	460c      	mov	r4, r1
 800dbba:	2001      	movs	r0, #1
 800dbbc:	e7a8      	b.n	800db10 <_svfiprintf_r+0xd8>
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	3401      	adds	r4, #1
 800dbc2:	9305      	str	r3, [sp, #20]
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	f04f 0c0a 	mov.w	ip, #10
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbd0:	3a30      	subs	r2, #48	@ 0x30
 800dbd2:	2a09      	cmp	r2, #9
 800dbd4:	d903      	bls.n	800dbde <_svfiprintf_r+0x1a6>
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d0c6      	beq.n	800db68 <_svfiprintf_r+0x130>
 800dbda:	9105      	str	r1, [sp, #20]
 800dbdc:	e7c4      	b.n	800db68 <_svfiprintf_r+0x130>
 800dbde:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	e7f0      	b.n	800dbca <_svfiprintf_r+0x192>
 800dbe8:	ab03      	add	r3, sp, #12
 800dbea:	9300      	str	r3, [sp, #0]
 800dbec:	462a      	mov	r2, r5
 800dbee:	4b0e      	ldr	r3, [pc, #56]	@ (800dc28 <_svfiprintf_r+0x1f0>)
 800dbf0:	a904      	add	r1, sp, #16
 800dbf2:	4638      	mov	r0, r7
 800dbf4:	f7fd ff38 	bl	800ba68 <_printf_float>
 800dbf8:	1c42      	adds	r2, r0, #1
 800dbfa:	4606      	mov	r6, r0
 800dbfc:	d1d6      	bne.n	800dbac <_svfiprintf_r+0x174>
 800dbfe:	89ab      	ldrh	r3, [r5, #12]
 800dc00:	065b      	lsls	r3, r3, #25
 800dc02:	f53f af2d 	bmi.w	800da60 <_svfiprintf_r+0x28>
 800dc06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc08:	e72c      	b.n	800da64 <_svfiprintf_r+0x2c>
 800dc0a:	ab03      	add	r3, sp, #12
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	462a      	mov	r2, r5
 800dc10:	4b05      	ldr	r3, [pc, #20]	@ (800dc28 <_svfiprintf_r+0x1f0>)
 800dc12:	a904      	add	r1, sp, #16
 800dc14:	4638      	mov	r0, r7
 800dc16:	f7fe f9bf 	bl	800bf98 <_printf_i>
 800dc1a:	e7ed      	b.n	800dbf8 <_svfiprintf_r+0x1c0>
 800dc1c:	0800fd76 	.word	0x0800fd76
 800dc20:	0800fd80 	.word	0x0800fd80
 800dc24:	0800ba69 	.word	0x0800ba69
 800dc28:	0800d981 	.word	0x0800d981
 800dc2c:	0800fd7c 	.word	0x0800fd7c

0800dc30 <__sflush_r>:
 800dc30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc38:	0716      	lsls	r6, r2, #28
 800dc3a:	4605      	mov	r5, r0
 800dc3c:	460c      	mov	r4, r1
 800dc3e:	d454      	bmi.n	800dcea <__sflush_r+0xba>
 800dc40:	684b      	ldr	r3, [r1, #4]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	dc02      	bgt.n	800dc4c <__sflush_r+0x1c>
 800dc46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	dd48      	ble.n	800dcde <__sflush_r+0xae>
 800dc4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc4e:	2e00      	cmp	r6, #0
 800dc50:	d045      	beq.n	800dcde <__sflush_r+0xae>
 800dc52:	2300      	movs	r3, #0
 800dc54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dc58:	682f      	ldr	r7, [r5, #0]
 800dc5a:	6a21      	ldr	r1, [r4, #32]
 800dc5c:	602b      	str	r3, [r5, #0]
 800dc5e:	d030      	beq.n	800dcc2 <__sflush_r+0x92>
 800dc60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dc62:	89a3      	ldrh	r3, [r4, #12]
 800dc64:	0759      	lsls	r1, r3, #29
 800dc66:	d505      	bpl.n	800dc74 <__sflush_r+0x44>
 800dc68:	6863      	ldr	r3, [r4, #4]
 800dc6a:	1ad2      	subs	r2, r2, r3
 800dc6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dc6e:	b10b      	cbz	r3, 800dc74 <__sflush_r+0x44>
 800dc70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dc72:	1ad2      	subs	r2, r2, r3
 800dc74:	2300      	movs	r3, #0
 800dc76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc78:	6a21      	ldr	r1, [r4, #32]
 800dc7a:	4628      	mov	r0, r5
 800dc7c:	47b0      	blx	r6
 800dc7e:	1c43      	adds	r3, r0, #1
 800dc80:	89a3      	ldrh	r3, [r4, #12]
 800dc82:	d106      	bne.n	800dc92 <__sflush_r+0x62>
 800dc84:	6829      	ldr	r1, [r5, #0]
 800dc86:	291d      	cmp	r1, #29
 800dc88:	d82b      	bhi.n	800dce2 <__sflush_r+0xb2>
 800dc8a:	4a2a      	ldr	r2, [pc, #168]	@ (800dd34 <__sflush_r+0x104>)
 800dc8c:	40ca      	lsrs	r2, r1
 800dc8e:	07d6      	lsls	r6, r2, #31
 800dc90:	d527      	bpl.n	800dce2 <__sflush_r+0xb2>
 800dc92:	2200      	movs	r2, #0
 800dc94:	6062      	str	r2, [r4, #4]
 800dc96:	04d9      	lsls	r1, r3, #19
 800dc98:	6922      	ldr	r2, [r4, #16]
 800dc9a:	6022      	str	r2, [r4, #0]
 800dc9c:	d504      	bpl.n	800dca8 <__sflush_r+0x78>
 800dc9e:	1c42      	adds	r2, r0, #1
 800dca0:	d101      	bne.n	800dca6 <__sflush_r+0x76>
 800dca2:	682b      	ldr	r3, [r5, #0]
 800dca4:	b903      	cbnz	r3, 800dca8 <__sflush_r+0x78>
 800dca6:	6560      	str	r0, [r4, #84]	@ 0x54
 800dca8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dcaa:	602f      	str	r7, [r5, #0]
 800dcac:	b1b9      	cbz	r1, 800dcde <__sflush_r+0xae>
 800dcae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dcb2:	4299      	cmp	r1, r3
 800dcb4:	d002      	beq.n	800dcbc <__sflush_r+0x8c>
 800dcb6:	4628      	mov	r0, r5
 800dcb8:	f7ff fa9e 	bl	800d1f8 <_free_r>
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	6363      	str	r3, [r4, #52]	@ 0x34
 800dcc0:	e00d      	b.n	800dcde <__sflush_r+0xae>
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	4628      	mov	r0, r5
 800dcc6:	47b0      	blx	r6
 800dcc8:	4602      	mov	r2, r0
 800dcca:	1c50      	adds	r0, r2, #1
 800dccc:	d1c9      	bne.n	800dc62 <__sflush_r+0x32>
 800dcce:	682b      	ldr	r3, [r5, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d0c6      	beq.n	800dc62 <__sflush_r+0x32>
 800dcd4:	2b1d      	cmp	r3, #29
 800dcd6:	d001      	beq.n	800dcdc <__sflush_r+0xac>
 800dcd8:	2b16      	cmp	r3, #22
 800dcda:	d11e      	bne.n	800dd1a <__sflush_r+0xea>
 800dcdc:	602f      	str	r7, [r5, #0]
 800dcde:	2000      	movs	r0, #0
 800dce0:	e022      	b.n	800dd28 <__sflush_r+0xf8>
 800dce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dce6:	b21b      	sxth	r3, r3
 800dce8:	e01b      	b.n	800dd22 <__sflush_r+0xf2>
 800dcea:	690f      	ldr	r7, [r1, #16]
 800dcec:	2f00      	cmp	r7, #0
 800dcee:	d0f6      	beq.n	800dcde <__sflush_r+0xae>
 800dcf0:	0793      	lsls	r3, r2, #30
 800dcf2:	680e      	ldr	r6, [r1, #0]
 800dcf4:	bf08      	it	eq
 800dcf6:	694b      	ldreq	r3, [r1, #20]
 800dcf8:	600f      	str	r7, [r1, #0]
 800dcfa:	bf18      	it	ne
 800dcfc:	2300      	movne	r3, #0
 800dcfe:	eba6 0807 	sub.w	r8, r6, r7
 800dd02:	608b      	str	r3, [r1, #8]
 800dd04:	f1b8 0f00 	cmp.w	r8, #0
 800dd08:	dde9      	ble.n	800dcde <__sflush_r+0xae>
 800dd0a:	6a21      	ldr	r1, [r4, #32]
 800dd0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dd0e:	4643      	mov	r3, r8
 800dd10:	463a      	mov	r2, r7
 800dd12:	4628      	mov	r0, r5
 800dd14:	47b0      	blx	r6
 800dd16:	2800      	cmp	r0, #0
 800dd18:	dc08      	bgt.n	800dd2c <__sflush_r+0xfc>
 800dd1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd22:	81a3      	strh	r3, [r4, #12]
 800dd24:	f04f 30ff 	mov.w	r0, #4294967295
 800dd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd2c:	4407      	add	r7, r0
 800dd2e:	eba8 0800 	sub.w	r8, r8, r0
 800dd32:	e7e7      	b.n	800dd04 <__sflush_r+0xd4>
 800dd34:	20400001 	.word	0x20400001

0800dd38 <_fflush_r>:
 800dd38:	b538      	push	{r3, r4, r5, lr}
 800dd3a:	690b      	ldr	r3, [r1, #16]
 800dd3c:	4605      	mov	r5, r0
 800dd3e:	460c      	mov	r4, r1
 800dd40:	b913      	cbnz	r3, 800dd48 <_fflush_r+0x10>
 800dd42:	2500      	movs	r5, #0
 800dd44:	4628      	mov	r0, r5
 800dd46:	bd38      	pop	{r3, r4, r5, pc}
 800dd48:	b118      	cbz	r0, 800dd52 <_fflush_r+0x1a>
 800dd4a:	6a03      	ldr	r3, [r0, #32]
 800dd4c:	b90b      	cbnz	r3, 800dd52 <_fflush_r+0x1a>
 800dd4e:	f7fe facd 	bl	800c2ec <__sinit>
 800dd52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d0f3      	beq.n	800dd42 <_fflush_r+0xa>
 800dd5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dd5c:	07d0      	lsls	r0, r2, #31
 800dd5e:	d404      	bmi.n	800dd6a <_fflush_r+0x32>
 800dd60:	0599      	lsls	r1, r3, #22
 800dd62:	d402      	bmi.n	800dd6a <_fflush_r+0x32>
 800dd64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd66:	f7fe fbea 	bl	800c53e <__retarget_lock_acquire_recursive>
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	4621      	mov	r1, r4
 800dd6e:	f7ff ff5f 	bl	800dc30 <__sflush_r>
 800dd72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd74:	07da      	lsls	r2, r3, #31
 800dd76:	4605      	mov	r5, r0
 800dd78:	d4e4      	bmi.n	800dd44 <_fflush_r+0xc>
 800dd7a:	89a3      	ldrh	r3, [r4, #12]
 800dd7c:	059b      	lsls	r3, r3, #22
 800dd7e:	d4e1      	bmi.n	800dd44 <_fflush_r+0xc>
 800dd80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd82:	f7fe fbdd 	bl	800c540 <__retarget_lock_release_recursive>
 800dd86:	e7dd      	b.n	800dd44 <_fflush_r+0xc>

0800dd88 <memmove>:
 800dd88:	4288      	cmp	r0, r1
 800dd8a:	b510      	push	{r4, lr}
 800dd8c:	eb01 0402 	add.w	r4, r1, r2
 800dd90:	d902      	bls.n	800dd98 <memmove+0x10>
 800dd92:	4284      	cmp	r4, r0
 800dd94:	4623      	mov	r3, r4
 800dd96:	d807      	bhi.n	800dda8 <memmove+0x20>
 800dd98:	1e43      	subs	r3, r0, #1
 800dd9a:	42a1      	cmp	r1, r4
 800dd9c:	d008      	beq.n	800ddb0 <memmove+0x28>
 800dd9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dda2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dda6:	e7f8      	b.n	800dd9a <memmove+0x12>
 800dda8:	4402      	add	r2, r0
 800ddaa:	4601      	mov	r1, r0
 800ddac:	428a      	cmp	r2, r1
 800ddae:	d100      	bne.n	800ddb2 <memmove+0x2a>
 800ddb0:	bd10      	pop	{r4, pc}
 800ddb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ddb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ddba:	e7f7      	b.n	800ddac <memmove+0x24>

0800ddbc <memcpy>:
 800ddbc:	440a      	add	r2, r1
 800ddbe:	4291      	cmp	r1, r2
 800ddc0:	f100 33ff 	add.w	r3, r0, #4294967295
 800ddc4:	d100      	bne.n	800ddc8 <memcpy+0xc>
 800ddc6:	4770      	bx	lr
 800ddc8:	b510      	push	{r4, lr}
 800ddca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddd2:	4291      	cmp	r1, r2
 800ddd4:	d1f9      	bne.n	800ddca <memcpy+0xe>
 800ddd6:	bd10      	pop	{r4, pc}

0800ddd8 <__assert_func>:
 800ddd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddda:	4614      	mov	r4, r2
 800dddc:	461a      	mov	r2, r3
 800ddde:	4b09      	ldr	r3, [pc, #36]	@ (800de04 <__assert_func+0x2c>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	4605      	mov	r5, r0
 800dde4:	68d8      	ldr	r0, [r3, #12]
 800dde6:	b14c      	cbz	r4, 800ddfc <__assert_func+0x24>
 800dde8:	4b07      	ldr	r3, [pc, #28]	@ (800de08 <__assert_func+0x30>)
 800ddea:	9100      	str	r1, [sp, #0]
 800ddec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddf0:	4906      	ldr	r1, [pc, #24]	@ (800de0c <__assert_func+0x34>)
 800ddf2:	462b      	mov	r3, r5
 800ddf4:	f000 f870 	bl	800ded8 <fiprintf>
 800ddf8:	f000 f880 	bl	800defc <abort>
 800ddfc:	4b04      	ldr	r3, [pc, #16]	@ (800de10 <__assert_func+0x38>)
 800ddfe:	461c      	mov	r4, r3
 800de00:	e7f3      	b.n	800ddea <__assert_func+0x12>
 800de02:	bf00      	nop
 800de04:	2000003c 	.word	0x2000003c
 800de08:	0800fd91 	.word	0x0800fd91
 800de0c:	0800fd9e 	.word	0x0800fd9e
 800de10:	0800fdcc 	.word	0x0800fdcc

0800de14 <_calloc_r>:
 800de14:	b570      	push	{r4, r5, r6, lr}
 800de16:	fba1 5402 	umull	r5, r4, r1, r2
 800de1a:	b934      	cbnz	r4, 800de2a <_calloc_r+0x16>
 800de1c:	4629      	mov	r1, r5
 800de1e:	f7fd fcf7 	bl	800b810 <_malloc_r>
 800de22:	4606      	mov	r6, r0
 800de24:	b928      	cbnz	r0, 800de32 <_calloc_r+0x1e>
 800de26:	4630      	mov	r0, r6
 800de28:	bd70      	pop	{r4, r5, r6, pc}
 800de2a:	220c      	movs	r2, #12
 800de2c:	6002      	str	r2, [r0, #0]
 800de2e:	2600      	movs	r6, #0
 800de30:	e7f9      	b.n	800de26 <_calloc_r+0x12>
 800de32:	462a      	mov	r2, r5
 800de34:	4621      	mov	r1, r4
 800de36:	f7fe faf4 	bl	800c422 <memset>
 800de3a:	e7f4      	b.n	800de26 <_calloc_r+0x12>

0800de3c <__ascii_mbtowc>:
 800de3c:	b082      	sub	sp, #8
 800de3e:	b901      	cbnz	r1, 800de42 <__ascii_mbtowc+0x6>
 800de40:	a901      	add	r1, sp, #4
 800de42:	b142      	cbz	r2, 800de56 <__ascii_mbtowc+0x1a>
 800de44:	b14b      	cbz	r3, 800de5a <__ascii_mbtowc+0x1e>
 800de46:	7813      	ldrb	r3, [r2, #0]
 800de48:	600b      	str	r3, [r1, #0]
 800de4a:	7812      	ldrb	r2, [r2, #0]
 800de4c:	1e10      	subs	r0, r2, #0
 800de4e:	bf18      	it	ne
 800de50:	2001      	movne	r0, #1
 800de52:	b002      	add	sp, #8
 800de54:	4770      	bx	lr
 800de56:	4610      	mov	r0, r2
 800de58:	e7fb      	b.n	800de52 <__ascii_mbtowc+0x16>
 800de5a:	f06f 0001 	mvn.w	r0, #1
 800de5e:	e7f8      	b.n	800de52 <__ascii_mbtowc+0x16>

0800de60 <_realloc_r>:
 800de60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de64:	4607      	mov	r7, r0
 800de66:	4614      	mov	r4, r2
 800de68:	460d      	mov	r5, r1
 800de6a:	b921      	cbnz	r1, 800de76 <_realloc_r+0x16>
 800de6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de70:	4611      	mov	r1, r2
 800de72:	f7fd bccd 	b.w	800b810 <_malloc_r>
 800de76:	b92a      	cbnz	r2, 800de84 <_realloc_r+0x24>
 800de78:	f7ff f9be 	bl	800d1f8 <_free_r>
 800de7c:	4625      	mov	r5, r4
 800de7e:	4628      	mov	r0, r5
 800de80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de84:	f000 f841 	bl	800df0a <_malloc_usable_size_r>
 800de88:	4284      	cmp	r4, r0
 800de8a:	4606      	mov	r6, r0
 800de8c:	d802      	bhi.n	800de94 <_realloc_r+0x34>
 800de8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de92:	d8f4      	bhi.n	800de7e <_realloc_r+0x1e>
 800de94:	4621      	mov	r1, r4
 800de96:	4638      	mov	r0, r7
 800de98:	f7fd fcba 	bl	800b810 <_malloc_r>
 800de9c:	4680      	mov	r8, r0
 800de9e:	b908      	cbnz	r0, 800dea4 <_realloc_r+0x44>
 800dea0:	4645      	mov	r5, r8
 800dea2:	e7ec      	b.n	800de7e <_realloc_r+0x1e>
 800dea4:	42b4      	cmp	r4, r6
 800dea6:	4622      	mov	r2, r4
 800dea8:	4629      	mov	r1, r5
 800deaa:	bf28      	it	cs
 800deac:	4632      	movcs	r2, r6
 800deae:	f7ff ff85 	bl	800ddbc <memcpy>
 800deb2:	4629      	mov	r1, r5
 800deb4:	4638      	mov	r0, r7
 800deb6:	f7ff f99f 	bl	800d1f8 <_free_r>
 800deba:	e7f1      	b.n	800dea0 <_realloc_r+0x40>

0800debc <__ascii_wctomb>:
 800debc:	4603      	mov	r3, r0
 800debe:	4608      	mov	r0, r1
 800dec0:	b141      	cbz	r1, 800ded4 <__ascii_wctomb+0x18>
 800dec2:	2aff      	cmp	r2, #255	@ 0xff
 800dec4:	d904      	bls.n	800ded0 <__ascii_wctomb+0x14>
 800dec6:	228a      	movs	r2, #138	@ 0x8a
 800dec8:	601a      	str	r2, [r3, #0]
 800deca:	f04f 30ff 	mov.w	r0, #4294967295
 800dece:	4770      	bx	lr
 800ded0:	700a      	strb	r2, [r1, #0]
 800ded2:	2001      	movs	r0, #1
 800ded4:	4770      	bx	lr
	...

0800ded8 <fiprintf>:
 800ded8:	b40e      	push	{r1, r2, r3}
 800deda:	b503      	push	{r0, r1, lr}
 800dedc:	4601      	mov	r1, r0
 800dede:	ab03      	add	r3, sp, #12
 800dee0:	4805      	ldr	r0, [pc, #20]	@ (800def8 <fiprintf+0x20>)
 800dee2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dee6:	6800      	ldr	r0, [r0, #0]
 800dee8:	9301      	str	r3, [sp, #4]
 800deea:	f000 f83f 	bl	800df6c <_vfiprintf_r>
 800deee:	b002      	add	sp, #8
 800def0:	f85d eb04 	ldr.w	lr, [sp], #4
 800def4:	b003      	add	sp, #12
 800def6:	4770      	bx	lr
 800def8:	2000003c 	.word	0x2000003c

0800defc <abort>:
 800defc:	b508      	push	{r3, lr}
 800defe:	2006      	movs	r0, #6
 800df00:	f000 fa08 	bl	800e314 <raise>
 800df04:	2001      	movs	r0, #1
 800df06:	f7f4 fcd3 	bl	80028b0 <_exit>

0800df0a <_malloc_usable_size_r>:
 800df0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df0e:	1f18      	subs	r0, r3, #4
 800df10:	2b00      	cmp	r3, #0
 800df12:	bfbc      	itt	lt
 800df14:	580b      	ldrlt	r3, [r1, r0]
 800df16:	18c0      	addlt	r0, r0, r3
 800df18:	4770      	bx	lr

0800df1a <__sfputc_r>:
 800df1a:	6893      	ldr	r3, [r2, #8]
 800df1c:	3b01      	subs	r3, #1
 800df1e:	2b00      	cmp	r3, #0
 800df20:	b410      	push	{r4}
 800df22:	6093      	str	r3, [r2, #8]
 800df24:	da08      	bge.n	800df38 <__sfputc_r+0x1e>
 800df26:	6994      	ldr	r4, [r2, #24]
 800df28:	42a3      	cmp	r3, r4
 800df2a:	db01      	blt.n	800df30 <__sfputc_r+0x16>
 800df2c:	290a      	cmp	r1, #10
 800df2e:	d103      	bne.n	800df38 <__sfputc_r+0x1e>
 800df30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df34:	f000 b932 	b.w	800e19c <__swbuf_r>
 800df38:	6813      	ldr	r3, [r2, #0]
 800df3a:	1c58      	adds	r0, r3, #1
 800df3c:	6010      	str	r0, [r2, #0]
 800df3e:	7019      	strb	r1, [r3, #0]
 800df40:	4608      	mov	r0, r1
 800df42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df46:	4770      	bx	lr

0800df48 <__sfputs_r>:
 800df48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df4a:	4606      	mov	r6, r0
 800df4c:	460f      	mov	r7, r1
 800df4e:	4614      	mov	r4, r2
 800df50:	18d5      	adds	r5, r2, r3
 800df52:	42ac      	cmp	r4, r5
 800df54:	d101      	bne.n	800df5a <__sfputs_r+0x12>
 800df56:	2000      	movs	r0, #0
 800df58:	e007      	b.n	800df6a <__sfputs_r+0x22>
 800df5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df5e:	463a      	mov	r2, r7
 800df60:	4630      	mov	r0, r6
 800df62:	f7ff ffda 	bl	800df1a <__sfputc_r>
 800df66:	1c43      	adds	r3, r0, #1
 800df68:	d1f3      	bne.n	800df52 <__sfputs_r+0xa>
 800df6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df6c <_vfiprintf_r>:
 800df6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df70:	460d      	mov	r5, r1
 800df72:	b09d      	sub	sp, #116	@ 0x74
 800df74:	4614      	mov	r4, r2
 800df76:	4698      	mov	r8, r3
 800df78:	4606      	mov	r6, r0
 800df7a:	b118      	cbz	r0, 800df84 <_vfiprintf_r+0x18>
 800df7c:	6a03      	ldr	r3, [r0, #32]
 800df7e:	b90b      	cbnz	r3, 800df84 <_vfiprintf_r+0x18>
 800df80:	f7fe f9b4 	bl	800c2ec <__sinit>
 800df84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df86:	07d9      	lsls	r1, r3, #31
 800df88:	d405      	bmi.n	800df96 <_vfiprintf_r+0x2a>
 800df8a:	89ab      	ldrh	r3, [r5, #12]
 800df8c:	059a      	lsls	r2, r3, #22
 800df8e:	d402      	bmi.n	800df96 <_vfiprintf_r+0x2a>
 800df90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df92:	f7fe fad4 	bl	800c53e <__retarget_lock_acquire_recursive>
 800df96:	89ab      	ldrh	r3, [r5, #12]
 800df98:	071b      	lsls	r3, r3, #28
 800df9a:	d501      	bpl.n	800dfa0 <_vfiprintf_r+0x34>
 800df9c:	692b      	ldr	r3, [r5, #16]
 800df9e:	b99b      	cbnz	r3, 800dfc8 <_vfiprintf_r+0x5c>
 800dfa0:	4629      	mov	r1, r5
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	f000 f938 	bl	800e218 <__swsetup_r>
 800dfa8:	b170      	cbz	r0, 800dfc8 <_vfiprintf_r+0x5c>
 800dfaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfac:	07dc      	lsls	r4, r3, #31
 800dfae:	d504      	bpl.n	800dfba <_vfiprintf_r+0x4e>
 800dfb0:	f04f 30ff 	mov.w	r0, #4294967295
 800dfb4:	b01d      	add	sp, #116	@ 0x74
 800dfb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfba:	89ab      	ldrh	r3, [r5, #12]
 800dfbc:	0598      	lsls	r0, r3, #22
 800dfbe:	d4f7      	bmi.n	800dfb0 <_vfiprintf_r+0x44>
 800dfc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfc2:	f7fe fabd 	bl	800c540 <__retarget_lock_release_recursive>
 800dfc6:	e7f3      	b.n	800dfb0 <_vfiprintf_r+0x44>
 800dfc8:	2300      	movs	r3, #0
 800dfca:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfcc:	2320      	movs	r3, #32
 800dfce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dfd2:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfd6:	2330      	movs	r3, #48	@ 0x30
 800dfd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e188 <_vfiprintf_r+0x21c>
 800dfdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dfe0:	f04f 0901 	mov.w	r9, #1
 800dfe4:	4623      	mov	r3, r4
 800dfe6:	469a      	mov	sl, r3
 800dfe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfec:	b10a      	cbz	r2, 800dff2 <_vfiprintf_r+0x86>
 800dfee:	2a25      	cmp	r2, #37	@ 0x25
 800dff0:	d1f9      	bne.n	800dfe6 <_vfiprintf_r+0x7a>
 800dff2:	ebba 0b04 	subs.w	fp, sl, r4
 800dff6:	d00b      	beq.n	800e010 <_vfiprintf_r+0xa4>
 800dff8:	465b      	mov	r3, fp
 800dffa:	4622      	mov	r2, r4
 800dffc:	4629      	mov	r1, r5
 800dffe:	4630      	mov	r0, r6
 800e000:	f7ff ffa2 	bl	800df48 <__sfputs_r>
 800e004:	3001      	adds	r0, #1
 800e006:	f000 80a7 	beq.w	800e158 <_vfiprintf_r+0x1ec>
 800e00a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e00c:	445a      	add	r2, fp
 800e00e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e010:	f89a 3000 	ldrb.w	r3, [sl]
 800e014:	2b00      	cmp	r3, #0
 800e016:	f000 809f 	beq.w	800e158 <_vfiprintf_r+0x1ec>
 800e01a:	2300      	movs	r3, #0
 800e01c:	f04f 32ff 	mov.w	r2, #4294967295
 800e020:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e024:	f10a 0a01 	add.w	sl, sl, #1
 800e028:	9304      	str	r3, [sp, #16]
 800e02a:	9307      	str	r3, [sp, #28]
 800e02c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e030:	931a      	str	r3, [sp, #104]	@ 0x68
 800e032:	4654      	mov	r4, sl
 800e034:	2205      	movs	r2, #5
 800e036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e03a:	4853      	ldr	r0, [pc, #332]	@ (800e188 <_vfiprintf_r+0x21c>)
 800e03c:	f7f2 f8c8 	bl	80001d0 <memchr>
 800e040:	9a04      	ldr	r2, [sp, #16]
 800e042:	b9d8      	cbnz	r0, 800e07c <_vfiprintf_r+0x110>
 800e044:	06d1      	lsls	r1, r2, #27
 800e046:	bf44      	itt	mi
 800e048:	2320      	movmi	r3, #32
 800e04a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e04e:	0713      	lsls	r3, r2, #28
 800e050:	bf44      	itt	mi
 800e052:	232b      	movmi	r3, #43	@ 0x2b
 800e054:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e058:	f89a 3000 	ldrb.w	r3, [sl]
 800e05c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e05e:	d015      	beq.n	800e08c <_vfiprintf_r+0x120>
 800e060:	9a07      	ldr	r2, [sp, #28]
 800e062:	4654      	mov	r4, sl
 800e064:	2000      	movs	r0, #0
 800e066:	f04f 0c0a 	mov.w	ip, #10
 800e06a:	4621      	mov	r1, r4
 800e06c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e070:	3b30      	subs	r3, #48	@ 0x30
 800e072:	2b09      	cmp	r3, #9
 800e074:	d94b      	bls.n	800e10e <_vfiprintf_r+0x1a2>
 800e076:	b1b0      	cbz	r0, 800e0a6 <_vfiprintf_r+0x13a>
 800e078:	9207      	str	r2, [sp, #28]
 800e07a:	e014      	b.n	800e0a6 <_vfiprintf_r+0x13a>
 800e07c:	eba0 0308 	sub.w	r3, r0, r8
 800e080:	fa09 f303 	lsl.w	r3, r9, r3
 800e084:	4313      	orrs	r3, r2
 800e086:	9304      	str	r3, [sp, #16]
 800e088:	46a2      	mov	sl, r4
 800e08a:	e7d2      	b.n	800e032 <_vfiprintf_r+0xc6>
 800e08c:	9b03      	ldr	r3, [sp, #12]
 800e08e:	1d19      	adds	r1, r3, #4
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	9103      	str	r1, [sp, #12]
 800e094:	2b00      	cmp	r3, #0
 800e096:	bfbb      	ittet	lt
 800e098:	425b      	neglt	r3, r3
 800e09a:	f042 0202 	orrlt.w	r2, r2, #2
 800e09e:	9307      	strge	r3, [sp, #28]
 800e0a0:	9307      	strlt	r3, [sp, #28]
 800e0a2:	bfb8      	it	lt
 800e0a4:	9204      	strlt	r2, [sp, #16]
 800e0a6:	7823      	ldrb	r3, [r4, #0]
 800e0a8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0aa:	d10a      	bne.n	800e0c2 <_vfiprintf_r+0x156>
 800e0ac:	7863      	ldrb	r3, [r4, #1]
 800e0ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0b0:	d132      	bne.n	800e118 <_vfiprintf_r+0x1ac>
 800e0b2:	9b03      	ldr	r3, [sp, #12]
 800e0b4:	1d1a      	adds	r2, r3, #4
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	9203      	str	r2, [sp, #12]
 800e0ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0be:	3402      	adds	r4, #2
 800e0c0:	9305      	str	r3, [sp, #20]
 800e0c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e198 <_vfiprintf_r+0x22c>
 800e0c6:	7821      	ldrb	r1, [r4, #0]
 800e0c8:	2203      	movs	r2, #3
 800e0ca:	4650      	mov	r0, sl
 800e0cc:	f7f2 f880 	bl	80001d0 <memchr>
 800e0d0:	b138      	cbz	r0, 800e0e2 <_vfiprintf_r+0x176>
 800e0d2:	9b04      	ldr	r3, [sp, #16]
 800e0d4:	eba0 000a 	sub.w	r0, r0, sl
 800e0d8:	2240      	movs	r2, #64	@ 0x40
 800e0da:	4082      	lsls	r2, r0
 800e0dc:	4313      	orrs	r3, r2
 800e0de:	3401      	adds	r4, #1
 800e0e0:	9304      	str	r3, [sp, #16]
 800e0e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0e6:	4829      	ldr	r0, [pc, #164]	@ (800e18c <_vfiprintf_r+0x220>)
 800e0e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e0ec:	2206      	movs	r2, #6
 800e0ee:	f7f2 f86f 	bl	80001d0 <memchr>
 800e0f2:	2800      	cmp	r0, #0
 800e0f4:	d03f      	beq.n	800e176 <_vfiprintf_r+0x20a>
 800e0f6:	4b26      	ldr	r3, [pc, #152]	@ (800e190 <_vfiprintf_r+0x224>)
 800e0f8:	bb1b      	cbnz	r3, 800e142 <_vfiprintf_r+0x1d6>
 800e0fa:	9b03      	ldr	r3, [sp, #12]
 800e0fc:	3307      	adds	r3, #7
 800e0fe:	f023 0307 	bic.w	r3, r3, #7
 800e102:	3308      	adds	r3, #8
 800e104:	9303      	str	r3, [sp, #12]
 800e106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e108:	443b      	add	r3, r7
 800e10a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e10c:	e76a      	b.n	800dfe4 <_vfiprintf_r+0x78>
 800e10e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e112:	460c      	mov	r4, r1
 800e114:	2001      	movs	r0, #1
 800e116:	e7a8      	b.n	800e06a <_vfiprintf_r+0xfe>
 800e118:	2300      	movs	r3, #0
 800e11a:	3401      	adds	r4, #1
 800e11c:	9305      	str	r3, [sp, #20]
 800e11e:	4619      	mov	r1, r3
 800e120:	f04f 0c0a 	mov.w	ip, #10
 800e124:	4620      	mov	r0, r4
 800e126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e12a:	3a30      	subs	r2, #48	@ 0x30
 800e12c:	2a09      	cmp	r2, #9
 800e12e:	d903      	bls.n	800e138 <_vfiprintf_r+0x1cc>
 800e130:	2b00      	cmp	r3, #0
 800e132:	d0c6      	beq.n	800e0c2 <_vfiprintf_r+0x156>
 800e134:	9105      	str	r1, [sp, #20]
 800e136:	e7c4      	b.n	800e0c2 <_vfiprintf_r+0x156>
 800e138:	fb0c 2101 	mla	r1, ip, r1, r2
 800e13c:	4604      	mov	r4, r0
 800e13e:	2301      	movs	r3, #1
 800e140:	e7f0      	b.n	800e124 <_vfiprintf_r+0x1b8>
 800e142:	ab03      	add	r3, sp, #12
 800e144:	9300      	str	r3, [sp, #0]
 800e146:	462a      	mov	r2, r5
 800e148:	4b12      	ldr	r3, [pc, #72]	@ (800e194 <_vfiprintf_r+0x228>)
 800e14a:	a904      	add	r1, sp, #16
 800e14c:	4630      	mov	r0, r6
 800e14e:	f7fd fc8b 	bl	800ba68 <_printf_float>
 800e152:	4607      	mov	r7, r0
 800e154:	1c78      	adds	r0, r7, #1
 800e156:	d1d6      	bne.n	800e106 <_vfiprintf_r+0x19a>
 800e158:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e15a:	07d9      	lsls	r1, r3, #31
 800e15c:	d405      	bmi.n	800e16a <_vfiprintf_r+0x1fe>
 800e15e:	89ab      	ldrh	r3, [r5, #12]
 800e160:	059a      	lsls	r2, r3, #22
 800e162:	d402      	bmi.n	800e16a <_vfiprintf_r+0x1fe>
 800e164:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e166:	f7fe f9eb 	bl	800c540 <__retarget_lock_release_recursive>
 800e16a:	89ab      	ldrh	r3, [r5, #12]
 800e16c:	065b      	lsls	r3, r3, #25
 800e16e:	f53f af1f 	bmi.w	800dfb0 <_vfiprintf_r+0x44>
 800e172:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e174:	e71e      	b.n	800dfb4 <_vfiprintf_r+0x48>
 800e176:	ab03      	add	r3, sp, #12
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	462a      	mov	r2, r5
 800e17c:	4b05      	ldr	r3, [pc, #20]	@ (800e194 <_vfiprintf_r+0x228>)
 800e17e:	a904      	add	r1, sp, #16
 800e180:	4630      	mov	r0, r6
 800e182:	f7fd ff09 	bl	800bf98 <_printf_i>
 800e186:	e7e4      	b.n	800e152 <_vfiprintf_r+0x1e6>
 800e188:	0800fd76 	.word	0x0800fd76
 800e18c:	0800fd80 	.word	0x0800fd80
 800e190:	0800ba69 	.word	0x0800ba69
 800e194:	0800df49 	.word	0x0800df49
 800e198:	0800fd7c 	.word	0x0800fd7c

0800e19c <__swbuf_r>:
 800e19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e19e:	460e      	mov	r6, r1
 800e1a0:	4614      	mov	r4, r2
 800e1a2:	4605      	mov	r5, r0
 800e1a4:	b118      	cbz	r0, 800e1ae <__swbuf_r+0x12>
 800e1a6:	6a03      	ldr	r3, [r0, #32]
 800e1a8:	b90b      	cbnz	r3, 800e1ae <__swbuf_r+0x12>
 800e1aa:	f7fe f89f 	bl	800c2ec <__sinit>
 800e1ae:	69a3      	ldr	r3, [r4, #24]
 800e1b0:	60a3      	str	r3, [r4, #8]
 800e1b2:	89a3      	ldrh	r3, [r4, #12]
 800e1b4:	071a      	lsls	r2, r3, #28
 800e1b6:	d501      	bpl.n	800e1bc <__swbuf_r+0x20>
 800e1b8:	6923      	ldr	r3, [r4, #16]
 800e1ba:	b943      	cbnz	r3, 800e1ce <__swbuf_r+0x32>
 800e1bc:	4621      	mov	r1, r4
 800e1be:	4628      	mov	r0, r5
 800e1c0:	f000 f82a 	bl	800e218 <__swsetup_r>
 800e1c4:	b118      	cbz	r0, 800e1ce <__swbuf_r+0x32>
 800e1c6:	f04f 37ff 	mov.w	r7, #4294967295
 800e1ca:	4638      	mov	r0, r7
 800e1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1ce:	6823      	ldr	r3, [r4, #0]
 800e1d0:	6922      	ldr	r2, [r4, #16]
 800e1d2:	1a98      	subs	r0, r3, r2
 800e1d4:	6963      	ldr	r3, [r4, #20]
 800e1d6:	b2f6      	uxtb	r6, r6
 800e1d8:	4283      	cmp	r3, r0
 800e1da:	4637      	mov	r7, r6
 800e1dc:	dc05      	bgt.n	800e1ea <__swbuf_r+0x4e>
 800e1de:	4621      	mov	r1, r4
 800e1e0:	4628      	mov	r0, r5
 800e1e2:	f7ff fda9 	bl	800dd38 <_fflush_r>
 800e1e6:	2800      	cmp	r0, #0
 800e1e8:	d1ed      	bne.n	800e1c6 <__swbuf_r+0x2a>
 800e1ea:	68a3      	ldr	r3, [r4, #8]
 800e1ec:	3b01      	subs	r3, #1
 800e1ee:	60a3      	str	r3, [r4, #8]
 800e1f0:	6823      	ldr	r3, [r4, #0]
 800e1f2:	1c5a      	adds	r2, r3, #1
 800e1f4:	6022      	str	r2, [r4, #0]
 800e1f6:	701e      	strb	r6, [r3, #0]
 800e1f8:	6962      	ldr	r2, [r4, #20]
 800e1fa:	1c43      	adds	r3, r0, #1
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d004      	beq.n	800e20a <__swbuf_r+0x6e>
 800e200:	89a3      	ldrh	r3, [r4, #12]
 800e202:	07db      	lsls	r3, r3, #31
 800e204:	d5e1      	bpl.n	800e1ca <__swbuf_r+0x2e>
 800e206:	2e0a      	cmp	r6, #10
 800e208:	d1df      	bne.n	800e1ca <__swbuf_r+0x2e>
 800e20a:	4621      	mov	r1, r4
 800e20c:	4628      	mov	r0, r5
 800e20e:	f7ff fd93 	bl	800dd38 <_fflush_r>
 800e212:	2800      	cmp	r0, #0
 800e214:	d0d9      	beq.n	800e1ca <__swbuf_r+0x2e>
 800e216:	e7d6      	b.n	800e1c6 <__swbuf_r+0x2a>

0800e218 <__swsetup_r>:
 800e218:	b538      	push	{r3, r4, r5, lr}
 800e21a:	4b29      	ldr	r3, [pc, #164]	@ (800e2c0 <__swsetup_r+0xa8>)
 800e21c:	4605      	mov	r5, r0
 800e21e:	6818      	ldr	r0, [r3, #0]
 800e220:	460c      	mov	r4, r1
 800e222:	b118      	cbz	r0, 800e22c <__swsetup_r+0x14>
 800e224:	6a03      	ldr	r3, [r0, #32]
 800e226:	b90b      	cbnz	r3, 800e22c <__swsetup_r+0x14>
 800e228:	f7fe f860 	bl	800c2ec <__sinit>
 800e22c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e230:	0719      	lsls	r1, r3, #28
 800e232:	d422      	bmi.n	800e27a <__swsetup_r+0x62>
 800e234:	06da      	lsls	r2, r3, #27
 800e236:	d407      	bmi.n	800e248 <__swsetup_r+0x30>
 800e238:	2209      	movs	r2, #9
 800e23a:	602a      	str	r2, [r5, #0]
 800e23c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e240:	81a3      	strh	r3, [r4, #12]
 800e242:	f04f 30ff 	mov.w	r0, #4294967295
 800e246:	e033      	b.n	800e2b0 <__swsetup_r+0x98>
 800e248:	0758      	lsls	r0, r3, #29
 800e24a:	d512      	bpl.n	800e272 <__swsetup_r+0x5a>
 800e24c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e24e:	b141      	cbz	r1, 800e262 <__swsetup_r+0x4a>
 800e250:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e254:	4299      	cmp	r1, r3
 800e256:	d002      	beq.n	800e25e <__swsetup_r+0x46>
 800e258:	4628      	mov	r0, r5
 800e25a:	f7fe ffcd 	bl	800d1f8 <_free_r>
 800e25e:	2300      	movs	r3, #0
 800e260:	6363      	str	r3, [r4, #52]	@ 0x34
 800e262:	89a3      	ldrh	r3, [r4, #12]
 800e264:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e268:	81a3      	strh	r3, [r4, #12]
 800e26a:	2300      	movs	r3, #0
 800e26c:	6063      	str	r3, [r4, #4]
 800e26e:	6923      	ldr	r3, [r4, #16]
 800e270:	6023      	str	r3, [r4, #0]
 800e272:	89a3      	ldrh	r3, [r4, #12]
 800e274:	f043 0308 	orr.w	r3, r3, #8
 800e278:	81a3      	strh	r3, [r4, #12]
 800e27a:	6923      	ldr	r3, [r4, #16]
 800e27c:	b94b      	cbnz	r3, 800e292 <__swsetup_r+0x7a>
 800e27e:	89a3      	ldrh	r3, [r4, #12]
 800e280:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e288:	d003      	beq.n	800e292 <__swsetup_r+0x7a>
 800e28a:	4621      	mov	r1, r4
 800e28c:	4628      	mov	r0, r5
 800e28e:	f000 f883 	bl	800e398 <__smakebuf_r>
 800e292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e296:	f013 0201 	ands.w	r2, r3, #1
 800e29a:	d00a      	beq.n	800e2b2 <__swsetup_r+0x9a>
 800e29c:	2200      	movs	r2, #0
 800e29e:	60a2      	str	r2, [r4, #8]
 800e2a0:	6962      	ldr	r2, [r4, #20]
 800e2a2:	4252      	negs	r2, r2
 800e2a4:	61a2      	str	r2, [r4, #24]
 800e2a6:	6922      	ldr	r2, [r4, #16]
 800e2a8:	b942      	cbnz	r2, 800e2bc <__swsetup_r+0xa4>
 800e2aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e2ae:	d1c5      	bne.n	800e23c <__swsetup_r+0x24>
 800e2b0:	bd38      	pop	{r3, r4, r5, pc}
 800e2b2:	0799      	lsls	r1, r3, #30
 800e2b4:	bf58      	it	pl
 800e2b6:	6962      	ldrpl	r2, [r4, #20]
 800e2b8:	60a2      	str	r2, [r4, #8]
 800e2ba:	e7f4      	b.n	800e2a6 <__swsetup_r+0x8e>
 800e2bc:	2000      	movs	r0, #0
 800e2be:	e7f7      	b.n	800e2b0 <__swsetup_r+0x98>
 800e2c0:	2000003c 	.word	0x2000003c

0800e2c4 <_raise_r>:
 800e2c4:	291f      	cmp	r1, #31
 800e2c6:	b538      	push	{r3, r4, r5, lr}
 800e2c8:	4605      	mov	r5, r0
 800e2ca:	460c      	mov	r4, r1
 800e2cc:	d904      	bls.n	800e2d8 <_raise_r+0x14>
 800e2ce:	2316      	movs	r3, #22
 800e2d0:	6003      	str	r3, [r0, #0]
 800e2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d6:	bd38      	pop	{r3, r4, r5, pc}
 800e2d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e2da:	b112      	cbz	r2, 800e2e2 <_raise_r+0x1e>
 800e2dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2e0:	b94b      	cbnz	r3, 800e2f6 <_raise_r+0x32>
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	f000 f830 	bl	800e348 <_getpid_r>
 800e2e8:	4622      	mov	r2, r4
 800e2ea:	4601      	mov	r1, r0
 800e2ec:	4628      	mov	r0, r5
 800e2ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2f2:	f000 b817 	b.w	800e324 <_kill_r>
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d00a      	beq.n	800e310 <_raise_r+0x4c>
 800e2fa:	1c59      	adds	r1, r3, #1
 800e2fc:	d103      	bne.n	800e306 <_raise_r+0x42>
 800e2fe:	2316      	movs	r3, #22
 800e300:	6003      	str	r3, [r0, #0]
 800e302:	2001      	movs	r0, #1
 800e304:	e7e7      	b.n	800e2d6 <_raise_r+0x12>
 800e306:	2100      	movs	r1, #0
 800e308:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e30c:	4620      	mov	r0, r4
 800e30e:	4798      	blx	r3
 800e310:	2000      	movs	r0, #0
 800e312:	e7e0      	b.n	800e2d6 <_raise_r+0x12>

0800e314 <raise>:
 800e314:	4b02      	ldr	r3, [pc, #8]	@ (800e320 <raise+0xc>)
 800e316:	4601      	mov	r1, r0
 800e318:	6818      	ldr	r0, [r3, #0]
 800e31a:	f7ff bfd3 	b.w	800e2c4 <_raise_r>
 800e31e:	bf00      	nop
 800e320:	2000003c 	.word	0x2000003c

0800e324 <_kill_r>:
 800e324:	b538      	push	{r3, r4, r5, lr}
 800e326:	4d07      	ldr	r5, [pc, #28]	@ (800e344 <_kill_r+0x20>)
 800e328:	2300      	movs	r3, #0
 800e32a:	4604      	mov	r4, r0
 800e32c:	4608      	mov	r0, r1
 800e32e:	4611      	mov	r1, r2
 800e330:	602b      	str	r3, [r5, #0]
 800e332:	f7f4 faad 	bl	8002890 <_kill>
 800e336:	1c43      	adds	r3, r0, #1
 800e338:	d102      	bne.n	800e340 <_kill_r+0x1c>
 800e33a:	682b      	ldr	r3, [r5, #0]
 800e33c:	b103      	cbz	r3, 800e340 <_kill_r+0x1c>
 800e33e:	6023      	str	r3, [r4, #0]
 800e340:	bd38      	pop	{r3, r4, r5, pc}
 800e342:	bf00      	nop
 800e344:	20000c24 	.word	0x20000c24

0800e348 <_getpid_r>:
 800e348:	f7f4 ba9a 	b.w	8002880 <_getpid>

0800e34c <__swhatbuf_r>:
 800e34c:	b570      	push	{r4, r5, r6, lr}
 800e34e:	460c      	mov	r4, r1
 800e350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e354:	2900      	cmp	r1, #0
 800e356:	b096      	sub	sp, #88	@ 0x58
 800e358:	4615      	mov	r5, r2
 800e35a:	461e      	mov	r6, r3
 800e35c:	da0d      	bge.n	800e37a <__swhatbuf_r+0x2e>
 800e35e:	89a3      	ldrh	r3, [r4, #12]
 800e360:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e364:	f04f 0100 	mov.w	r1, #0
 800e368:	bf14      	ite	ne
 800e36a:	2340      	movne	r3, #64	@ 0x40
 800e36c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e370:	2000      	movs	r0, #0
 800e372:	6031      	str	r1, [r6, #0]
 800e374:	602b      	str	r3, [r5, #0]
 800e376:	b016      	add	sp, #88	@ 0x58
 800e378:	bd70      	pop	{r4, r5, r6, pc}
 800e37a:	466a      	mov	r2, sp
 800e37c:	f000 f848 	bl	800e410 <_fstat_r>
 800e380:	2800      	cmp	r0, #0
 800e382:	dbec      	blt.n	800e35e <__swhatbuf_r+0x12>
 800e384:	9901      	ldr	r1, [sp, #4]
 800e386:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e38a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e38e:	4259      	negs	r1, r3
 800e390:	4159      	adcs	r1, r3
 800e392:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e396:	e7eb      	b.n	800e370 <__swhatbuf_r+0x24>

0800e398 <__smakebuf_r>:
 800e398:	898b      	ldrh	r3, [r1, #12]
 800e39a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e39c:	079d      	lsls	r5, r3, #30
 800e39e:	4606      	mov	r6, r0
 800e3a0:	460c      	mov	r4, r1
 800e3a2:	d507      	bpl.n	800e3b4 <__smakebuf_r+0x1c>
 800e3a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e3a8:	6023      	str	r3, [r4, #0]
 800e3aa:	6123      	str	r3, [r4, #16]
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	6163      	str	r3, [r4, #20]
 800e3b0:	b003      	add	sp, #12
 800e3b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3b4:	ab01      	add	r3, sp, #4
 800e3b6:	466a      	mov	r2, sp
 800e3b8:	f7ff ffc8 	bl	800e34c <__swhatbuf_r>
 800e3bc:	9f00      	ldr	r7, [sp, #0]
 800e3be:	4605      	mov	r5, r0
 800e3c0:	4639      	mov	r1, r7
 800e3c2:	4630      	mov	r0, r6
 800e3c4:	f7fd fa24 	bl	800b810 <_malloc_r>
 800e3c8:	b948      	cbnz	r0, 800e3de <__smakebuf_r+0x46>
 800e3ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3ce:	059a      	lsls	r2, r3, #22
 800e3d0:	d4ee      	bmi.n	800e3b0 <__smakebuf_r+0x18>
 800e3d2:	f023 0303 	bic.w	r3, r3, #3
 800e3d6:	f043 0302 	orr.w	r3, r3, #2
 800e3da:	81a3      	strh	r3, [r4, #12]
 800e3dc:	e7e2      	b.n	800e3a4 <__smakebuf_r+0xc>
 800e3de:	89a3      	ldrh	r3, [r4, #12]
 800e3e0:	6020      	str	r0, [r4, #0]
 800e3e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3e6:	81a3      	strh	r3, [r4, #12]
 800e3e8:	9b01      	ldr	r3, [sp, #4]
 800e3ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e3ee:	b15b      	cbz	r3, 800e408 <__smakebuf_r+0x70>
 800e3f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3f4:	4630      	mov	r0, r6
 800e3f6:	f000 f81d 	bl	800e434 <_isatty_r>
 800e3fa:	b128      	cbz	r0, 800e408 <__smakebuf_r+0x70>
 800e3fc:	89a3      	ldrh	r3, [r4, #12]
 800e3fe:	f023 0303 	bic.w	r3, r3, #3
 800e402:	f043 0301 	orr.w	r3, r3, #1
 800e406:	81a3      	strh	r3, [r4, #12]
 800e408:	89a3      	ldrh	r3, [r4, #12]
 800e40a:	431d      	orrs	r5, r3
 800e40c:	81a5      	strh	r5, [r4, #12]
 800e40e:	e7cf      	b.n	800e3b0 <__smakebuf_r+0x18>

0800e410 <_fstat_r>:
 800e410:	b538      	push	{r3, r4, r5, lr}
 800e412:	4d07      	ldr	r5, [pc, #28]	@ (800e430 <_fstat_r+0x20>)
 800e414:	2300      	movs	r3, #0
 800e416:	4604      	mov	r4, r0
 800e418:	4608      	mov	r0, r1
 800e41a:	4611      	mov	r1, r2
 800e41c:	602b      	str	r3, [r5, #0]
 800e41e:	f7f4 fa97 	bl	8002950 <_fstat>
 800e422:	1c43      	adds	r3, r0, #1
 800e424:	d102      	bne.n	800e42c <_fstat_r+0x1c>
 800e426:	682b      	ldr	r3, [r5, #0]
 800e428:	b103      	cbz	r3, 800e42c <_fstat_r+0x1c>
 800e42a:	6023      	str	r3, [r4, #0]
 800e42c:	bd38      	pop	{r3, r4, r5, pc}
 800e42e:	bf00      	nop
 800e430:	20000c24 	.word	0x20000c24

0800e434 <_isatty_r>:
 800e434:	b538      	push	{r3, r4, r5, lr}
 800e436:	4d06      	ldr	r5, [pc, #24]	@ (800e450 <_isatty_r+0x1c>)
 800e438:	2300      	movs	r3, #0
 800e43a:	4604      	mov	r4, r0
 800e43c:	4608      	mov	r0, r1
 800e43e:	602b      	str	r3, [r5, #0]
 800e440:	f7f4 fa96 	bl	8002970 <_isatty>
 800e444:	1c43      	adds	r3, r0, #1
 800e446:	d102      	bne.n	800e44e <_isatty_r+0x1a>
 800e448:	682b      	ldr	r3, [r5, #0]
 800e44a:	b103      	cbz	r3, 800e44e <_isatty_r+0x1a>
 800e44c:	6023      	str	r3, [r4, #0]
 800e44e:	bd38      	pop	{r3, r4, r5, pc}
 800e450:	20000c24 	.word	0x20000c24

0800e454 <atan2f>:
 800e454:	f000 b94c 	b.w	800e6f0 <__ieee754_atan2f>

0800e458 <sqrtf>:
 800e458:	b508      	push	{r3, lr}
 800e45a:	ed2d 8b02 	vpush	{d8}
 800e45e:	eeb0 8a40 	vmov.f32	s16, s0
 800e462:	f000 f8a1 	bl	800e5a8 <__ieee754_sqrtf>
 800e466:	eeb4 8a48 	vcmp.f32	s16, s16
 800e46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e46e:	d60c      	bvs.n	800e48a <sqrtf+0x32>
 800e470:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800e490 <sqrtf+0x38>
 800e474:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e47c:	d505      	bpl.n	800e48a <sqrtf+0x32>
 800e47e:	f7fe f833 	bl	800c4e8 <__errno>
 800e482:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e486:	2321      	movs	r3, #33	@ 0x21
 800e488:	6003      	str	r3, [r0, #0]
 800e48a:	ecbd 8b02 	vpop	{d8}
 800e48e:	bd08      	pop	{r3, pc}
 800e490:	00000000 	.word	0x00000000

0800e494 <cosf>:
 800e494:	ee10 3a10 	vmov	r3, s0
 800e498:	b507      	push	{r0, r1, r2, lr}
 800e49a:	4a1e      	ldr	r2, [pc, #120]	@ (800e514 <cosf+0x80>)
 800e49c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d806      	bhi.n	800e4b2 <cosf+0x1e>
 800e4a4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800e518 <cosf+0x84>
 800e4a8:	b003      	add	sp, #12
 800e4aa:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4ae:	f000 b87f 	b.w	800e5b0 <__kernel_cosf>
 800e4b2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e4b6:	d304      	bcc.n	800e4c2 <cosf+0x2e>
 800e4b8:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e4bc:	b003      	add	sp, #12
 800e4be:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4c2:	4668      	mov	r0, sp
 800e4c4:	f000 f9b4 	bl	800e830 <__ieee754_rem_pio2f>
 800e4c8:	f000 0003 	and.w	r0, r0, #3
 800e4cc:	2801      	cmp	r0, #1
 800e4ce:	d009      	beq.n	800e4e4 <cosf+0x50>
 800e4d0:	2802      	cmp	r0, #2
 800e4d2:	d010      	beq.n	800e4f6 <cosf+0x62>
 800e4d4:	b9b0      	cbnz	r0, 800e504 <cosf+0x70>
 800e4d6:	eddd 0a01 	vldr	s1, [sp, #4]
 800e4da:	ed9d 0a00 	vldr	s0, [sp]
 800e4de:	f000 f867 	bl	800e5b0 <__kernel_cosf>
 800e4e2:	e7eb      	b.n	800e4bc <cosf+0x28>
 800e4e4:	eddd 0a01 	vldr	s1, [sp, #4]
 800e4e8:	ed9d 0a00 	vldr	s0, [sp]
 800e4ec:	f000 f8b8 	bl	800e660 <__kernel_sinf>
 800e4f0:	eeb1 0a40 	vneg.f32	s0, s0
 800e4f4:	e7e2      	b.n	800e4bc <cosf+0x28>
 800e4f6:	eddd 0a01 	vldr	s1, [sp, #4]
 800e4fa:	ed9d 0a00 	vldr	s0, [sp]
 800e4fe:	f000 f857 	bl	800e5b0 <__kernel_cosf>
 800e502:	e7f5      	b.n	800e4f0 <cosf+0x5c>
 800e504:	eddd 0a01 	vldr	s1, [sp, #4]
 800e508:	ed9d 0a00 	vldr	s0, [sp]
 800e50c:	2001      	movs	r0, #1
 800e50e:	f000 f8a7 	bl	800e660 <__kernel_sinf>
 800e512:	e7d3      	b.n	800e4bc <cosf+0x28>
 800e514:	3f490fd8 	.word	0x3f490fd8
 800e518:	00000000 	.word	0x00000000

0800e51c <sinf>:
 800e51c:	ee10 3a10 	vmov	r3, s0
 800e520:	b507      	push	{r0, r1, r2, lr}
 800e522:	4a1f      	ldr	r2, [pc, #124]	@ (800e5a0 <sinf+0x84>)
 800e524:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e528:	4293      	cmp	r3, r2
 800e52a:	d807      	bhi.n	800e53c <sinf+0x20>
 800e52c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800e5a4 <sinf+0x88>
 800e530:	2000      	movs	r0, #0
 800e532:	b003      	add	sp, #12
 800e534:	f85d eb04 	ldr.w	lr, [sp], #4
 800e538:	f000 b892 	b.w	800e660 <__kernel_sinf>
 800e53c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e540:	d304      	bcc.n	800e54c <sinf+0x30>
 800e542:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e546:	b003      	add	sp, #12
 800e548:	f85d fb04 	ldr.w	pc, [sp], #4
 800e54c:	4668      	mov	r0, sp
 800e54e:	f000 f96f 	bl	800e830 <__ieee754_rem_pio2f>
 800e552:	f000 0003 	and.w	r0, r0, #3
 800e556:	2801      	cmp	r0, #1
 800e558:	d00a      	beq.n	800e570 <sinf+0x54>
 800e55a:	2802      	cmp	r0, #2
 800e55c:	d00f      	beq.n	800e57e <sinf+0x62>
 800e55e:	b9c0      	cbnz	r0, 800e592 <sinf+0x76>
 800e560:	eddd 0a01 	vldr	s1, [sp, #4]
 800e564:	ed9d 0a00 	vldr	s0, [sp]
 800e568:	2001      	movs	r0, #1
 800e56a:	f000 f879 	bl	800e660 <__kernel_sinf>
 800e56e:	e7ea      	b.n	800e546 <sinf+0x2a>
 800e570:	eddd 0a01 	vldr	s1, [sp, #4]
 800e574:	ed9d 0a00 	vldr	s0, [sp]
 800e578:	f000 f81a 	bl	800e5b0 <__kernel_cosf>
 800e57c:	e7e3      	b.n	800e546 <sinf+0x2a>
 800e57e:	eddd 0a01 	vldr	s1, [sp, #4]
 800e582:	ed9d 0a00 	vldr	s0, [sp]
 800e586:	2001      	movs	r0, #1
 800e588:	f000 f86a 	bl	800e660 <__kernel_sinf>
 800e58c:	eeb1 0a40 	vneg.f32	s0, s0
 800e590:	e7d9      	b.n	800e546 <sinf+0x2a>
 800e592:	eddd 0a01 	vldr	s1, [sp, #4]
 800e596:	ed9d 0a00 	vldr	s0, [sp]
 800e59a:	f000 f809 	bl	800e5b0 <__kernel_cosf>
 800e59e:	e7f5      	b.n	800e58c <sinf+0x70>
 800e5a0:	3f490fd8 	.word	0x3f490fd8
 800e5a4:	00000000 	.word	0x00000000

0800e5a8 <__ieee754_sqrtf>:
 800e5a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e5ac:	4770      	bx	lr
	...

0800e5b0 <__kernel_cosf>:
 800e5b0:	ee10 3a10 	vmov	r3, s0
 800e5b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e5b8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800e5bc:	eef0 6a40 	vmov.f32	s13, s0
 800e5c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e5c4:	d204      	bcs.n	800e5d0 <__kernel_cosf+0x20>
 800e5c6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800e5ca:	ee17 2a90 	vmov	r2, s15
 800e5ce:	b342      	cbz	r2, 800e622 <__kernel_cosf+0x72>
 800e5d0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800e5d4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800e640 <__kernel_cosf+0x90>
 800e5d8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800e644 <__kernel_cosf+0x94>
 800e5dc:	4a1a      	ldr	r2, [pc, #104]	@ (800e648 <__kernel_cosf+0x98>)
 800e5de:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e64c <__kernel_cosf+0x9c>
 800e5e8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e5ec:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800e650 <__kernel_cosf+0xa0>
 800e5f0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e5f4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800e654 <__kernel_cosf+0xa4>
 800e5f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e5fc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800e658 <__kernel_cosf+0xa8>
 800e600:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e604:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800e608:	ee26 6a07 	vmul.f32	s12, s12, s14
 800e60c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e610:	eee7 0a06 	vfma.f32	s1, s14, s12
 800e614:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e618:	d804      	bhi.n	800e624 <__kernel_cosf+0x74>
 800e61a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e61e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e622:	4770      	bx	lr
 800e624:	4a0d      	ldr	r2, [pc, #52]	@ (800e65c <__kernel_cosf+0xac>)
 800e626:	4293      	cmp	r3, r2
 800e628:	bf9a      	itte	ls
 800e62a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800e62e:	ee07 3a10 	vmovls	s14, r3
 800e632:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800e636:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e63a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e63e:	e7ec      	b.n	800e61a <__kernel_cosf+0x6a>
 800e640:	ad47d74e 	.word	0xad47d74e
 800e644:	310f74f6 	.word	0x310f74f6
 800e648:	3e999999 	.word	0x3e999999
 800e64c:	b493f27c 	.word	0xb493f27c
 800e650:	37d00d01 	.word	0x37d00d01
 800e654:	bab60b61 	.word	0xbab60b61
 800e658:	3d2aaaab 	.word	0x3d2aaaab
 800e65c:	3f480000 	.word	0x3f480000

0800e660 <__kernel_sinf>:
 800e660:	ee10 3a10 	vmov	r3, s0
 800e664:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e668:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800e66c:	d204      	bcs.n	800e678 <__kernel_sinf+0x18>
 800e66e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e672:	ee17 3a90 	vmov	r3, s15
 800e676:	b35b      	cbz	r3, 800e6d0 <__kernel_sinf+0x70>
 800e678:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e67c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800e6d4 <__kernel_sinf+0x74>
 800e680:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800e6d8 <__kernel_sinf+0x78>
 800e684:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e688:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800e6dc <__kernel_sinf+0x7c>
 800e68c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e690:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800e6e0 <__kernel_sinf+0x80>
 800e694:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e698:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800e6e4 <__kernel_sinf+0x84>
 800e69c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800e6a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e6a4:	b930      	cbnz	r0, 800e6b4 <__kernel_sinf+0x54>
 800e6a6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800e6e8 <__kernel_sinf+0x88>
 800e6aa:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e6ae:	eea6 0a26 	vfma.f32	s0, s12, s13
 800e6b2:	4770      	bx	lr
 800e6b4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800e6b8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800e6bc:	eee0 7a86 	vfma.f32	s15, s1, s12
 800e6c0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800e6c4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800e6ec <__kernel_sinf+0x8c>
 800e6c8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800e6cc:	ee30 0a60 	vsub.f32	s0, s0, s1
 800e6d0:	4770      	bx	lr
 800e6d2:	bf00      	nop
 800e6d4:	2f2ec9d3 	.word	0x2f2ec9d3
 800e6d8:	b2d72f34 	.word	0xb2d72f34
 800e6dc:	3638ef1b 	.word	0x3638ef1b
 800e6e0:	b9500d01 	.word	0xb9500d01
 800e6e4:	3c088889 	.word	0x3c088889
 800e6e8:	be2aaaab 	.word	0xbe2aaaab
 800e6ec:	3e2aaaab 	.word	0x3e2aaaab

0800e6f0 <__ieee754_atan2f>:
 800e6f0:	ee10 2a90 	vmov	r2, s1
 800e6f4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800e6f8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e6fc:	b510      	push	{r4, lr}
 800e6fe:	eef0 7a40 	vmov.f32	s15, s0
 800e702:	d806      	bhi.n	800e712 <__ieee754_atan2f+0x22>
 800e704:	ee10 0a10 	vmov	r0, s0
 800e708:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e70c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e710:	d904      	bls.n	800e71c <__ieee754_atan2f+0x2c>
 800e712:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e716:	eeb0 0a67 	vmov.f32	s0, s15
 800e71a:	bd10      	pop	{r4, pc}
 800e71c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800e720:	d103      	bne.n	800e72a <__ieee754_atan2f+0x3a>
 800e722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e726:	f000 b9b3 	b.w	800ea90 <atanf>
 800e72a:	1794      	asrs	r4, r2, #30
 800e72c:	f004 0402 	and.w	r4, r4, #2
 800e730:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e734:	b943      	cbnz	r3, 800e748 <__ieee754_atan2f+0x58>
 800e736:	2c02      	cmp	r4, #2
 800e738:	d05e      	beq.n	800e7f8 <__ieee754_atan2f+0x108>
 800e73a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800e80c <__ieee754_atan2f+0x11c>
 800e73e:	2c03      	cmp	r4, #3
 800e740:	bf08      	it	eq
 800e742:	eef0 7a47 	vmoveq.f32	s15, s14
 800e746:	e7e6      	b.n	800e716 <__ieee754_atan2f+0x26>
 800e748:	b941      	cbnz	r1, 800e75c <__ieee754_atan2f+0x6c>
 800e74a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800e810 <__ieee754_atan2f+0x120>
 800e74e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800e814 <__ieee754_atan2f+0x124>
 800e752:	2800      	cmp	r0, #0
 800e754:	bfa8      	it	ge
 800e756:	eef0 7a47 	vmovge.f32	s15, s14
 800e75a:	e7dc      	b.n	800e716 <__ieee754_atan2f+0x26>
 800e75c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e760:	d110      	bne.n	800e784 <__ieee754_atan2f+0x94>
 800e762:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e766:	f104 34ff 	add.w	r4, r4, #4294967295
 800e76a:	d107      	bne.n	800e77c <__ieee754_atan2f+0x8c>
 800e76c:	2c02      	cmp	r4, #2
 800e76e:	d846      	bhi.n	800e7fe <__ieee754_atan2f+0x10e>
 800e770:	4b29      	ldr	r3, [pc, #164]	@ (800e818 <__ieee754_atan2f+0x128>)
 800e772:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e776:	edd3 7a00 	vldr	s15, [r3]
 800e77a:	e7cc      	b.n	800e716 <__ieee754_atan2f+0x26>
 800e77c:	2c02      	cmp	r4, #2
 800e77e:	d841      	bhi.n	800e804 <__ieee754_atan2f+0x114>
 800e780:	4b26      	ldr	r3, [pc, #152]	@ (800e81c <__ieee754_atan2f+0x12c>)
 800e782:	e7f6      	b.n	800e772 <__ieee754_atan2f+0x82>
 800e784:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e788:	d0df      	beq.n	800e74a <__ieee754_atan2f+0x5a>
 800e78a:	1a5b      	subs	r3, r3, r1
 800e78c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800e790:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800e794:	da1a      	bge.n	800e7cc <__ieee754_atan2f+0xdc>
 800e796:	2a00      	cmp	r2, #0
 800e798:	da01      	bge.n	800e79e <__ieee754_atan2f+0xae>
 800e79a:	313c      	adds	r1, #60	@ 0x3c
 800e79c:	db19      	blt.n	800e7d2 <__ieee754_atan2f+0xe2>
 800e79e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e7a2:	f000 fa49 	bl	800ec38 <fabsf>
 800e7a6:	f000 f973 	bl	800ea90 <atanf>
 800e7aa:	eef0 7a40 	vmov.f32	s15, s0
 800e7ae:	2c01      	cmp	r4, #1
 800e7b0:	d012      	beq.n	800e7d8 <__ieee754_atan2f+0xe8>
 800e7b2:	2c02      	cmp	r4, #2
 800e7b4:	d017      	beq.n	800e7e6 <__ieee754_atan2f+0xf6>
 800e7b6:	2c00      	cmp	r4, #0
 800e7b8:	d0ad      	beq.n	800e716 <__ieee754_atan2f+0x26>
 800e7ba:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800e820 <__ieee754_atan2f+0x130>
 800e7be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e7c2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800e824 <__ieee754_atan2f+0x134>
 800e7c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e7ca:	e7a4      	b.n	800e716 <__ieee754_atan2f+0x26>
 800e7cc:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800e814 <__ieee754_atan2f+0x124>
 800e7d0:	e7ed      	b.n	800e7ae <__ieee754_atan2f+0xbe>
 800e7d2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800e828 <__ieee754_atan2f+0x138>
 800e7d6:	e7ea      	b.n	800e7ae <__ieee754_atan2f+0xbe>
 800e7d8:	ee17 3a90 	vmov	r3, s15
 800e7dc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e7e0:	ee07 3a90 	vmov	s15, r3
 800e7e4:	e797      	b.n	800e716 <__ieee754_atan2f+0x26>
 800e7e6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800e820 <__ieee754_atan2f+0x130>
 800e7ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e7ee:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800e824 <__ieee754_atan2f+0x134>
 800e7f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e7f6:	e78e      	b.n	800e716 <__ieee754_atan2f+0x26>
 800e7f8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800e824 <__ieee754_atan2f+0x134>
 800e7fc:	e78b      	b.n	800e716 <__ieee754_atan2f+0x26>
 800e7fe:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800e82c <__ieee754_atan2f+0x13c>
 800e802:	e788      	b.n	800e716 <__ieee754_atan2f+0x26>
 800e804:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e828 <__ieee754_atan2f+0x138>
 800e808:	e785      	b.n	800e716 <__ieee754_atan2f+0x26>
 800e80a:	bf00      	nop
 800e80c:	c0490fdb 	.word	0xc0490fdb
 800e810:	bfc90fdb 	.word	0xbfc90fdb
 800e814:	3fc90fdb 	.word	0x3fc90fdb
 800e818:	0800ffe0 	.word	0x0800ffe0
 800e81c:	0800ffd4 	.word	0x0800ffd4
 800e820:	33bbbd2e 	.word	0x33bbbd2e
 800e824:	40490fdb 	.word	0x40490fdb
 800e828:	00000000 	.word	0x00000000
 800e82c:	3f490fdb 	.word	0x3f490fdb

0800e830 <__ieee754_rem_pio2f>:
 800e830:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e832:	ee10 6a10 	vmov	r6, s0
 800e836:	4b88      	ldr	r3, [pc, #544]	@ (800ea58 <__ieee754_rem_pio2f+0x228>)
 800e838:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800e83c:	429d      	cmp	r5, r3
 800e83e:	b087      	sub	sp, #28
 800e840:	4604      	mov	r4, r0
 800e842:	d805      	bhi.n	800e850 <__ieee754_rem_pio2f+0x20>
 800e844:	2300      	movs	r3, #0
 800e846:	ed80 0a00 	vstr	s0, [r0]
 800e84a:	6043      	str	r3, [r0, #4]
 800e84c:	2000      	movs	r0, #0
 800e84e:	e022      	b.n	800e896 <__ieee754_rem_pio2f+0x66>
 800e850:	4b82      	ldr	r3, [pc, #520]	@ (800ea5c <__ieee754_rem_pio2f+0x22c>)
 800e852:	429d      	cmp	r5, r3
 800e854:	d83a      	bhi.n	800e8cc <__ieee754_rem_pio2f+0x9c>
 800e856:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e85a:	2e00      	cmp	r6, #0
 800e85c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800ea60 <__ieee754_rem_pio2f+0x230>
 800e860:	4a80      	ldr	r2, [pc, #512]	@ (800ea64 <__ieee754_rem_pio2f+0x234>)
 800e862:	f023 030f 	bic.w	r3, r3, #15
 800e866:	dd18      	ble.n	800e89a <__ieee754_rem_pio2f+0x6a>
 800e868:	4293      	cmp	r3, r2
 800e86a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800e86e:	bf09      	itett	eq
 800e870:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800ea68 <__ieee754_rem_pio2f+0x238>
 800e874:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800ea6c <__ieee754_rem_pio2f+0x23c>
 800e878:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800ea70 <__ieee754_rem_pio2f+0x240>
 800e87c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800e880:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800e884:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e888:	ed80 7a00 	vstr	s14, [r0]
 800e88c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e890:	edc0 7a01 	vstr	s15, [r0, #4]
 800e894:	2001      	movs	r0, #1
 800e896:	b007      	add	sp, #28
 800e898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e89a:	4293      	cmp	r3, r2
 800e89c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800e8a0:	bf09      	itett	eq
 800e8a2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800ea68 <__ieee754_rem_pio2f+0x238>
 800e8a6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800ea6c <__ieee754_rem_pio2f+0x23c>
 800e8aa:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800ea70 <__ieee754_rem_pio2f+0x240>
 800e8ae:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800e8b2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e8b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e8ba:	ed80 7a00 	vstr	s14, [r0]
 800e8be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8c2:	edc0 7a01 	vstr	s15, [r0, #4]
 800e8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ca:	e7e4      	b.n	800e896 <__ieee754_rem_pio2f+0x66>
 800e8cc:	4b69      	ldr	r3, [pc, #420]	@ (800ea74 <__ieee754_rem_pio2f+0x244>)
 800e8ce:	429d      	cmp	r5, r3
 800e8d0:	d873      	bhi.n	800e9ba <__ieee754_rem_pio2f+0x18a>
 800e8d2:	f000 f9b1 	bl	800ec38 <fabsf>
 800e8d6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800ea78 <__ieee754_rem_pio2f+0x248>
 800e8da:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e8de:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e8e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e8e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e8ea:	ee17 0a90 	vmov	r0, s15
 800e8ee:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800ea60 <__ieee754_rem_pio2f+0x230>
 800e8f2:	eea7 0a67 	vfms.f32	s0, s14, s15
 800e8f6:	281f      	cmp	r0, #31
 800e8f8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800ea6c <__ieee754_rem_pio2f+0x23c>
 800e8fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e900:	eeb1 6a47 	vneg.f32	s12, s14
 800e904:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e908:	ee16 1a90 	vmov	r1, s13
 800e90c:	dc09      	bgt.n	800e922 <__ieee754_rem_pio2f+0xf2>
 800e90e:	4a5b      	ldr	r2, [pc, #364]	@ (800ea7c <__ieee754_rem_pio2f+0x24c>)
 800e910:	1e47      	subs	r7, r0, #1
 800e912:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e916:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800e91a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e91e:	4293      	cmp	r3, r2
 800e920:	d107      	bne.n	800e932 <__ieee754_rem_pio2f+0x102>
 800e922:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800e926:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800e92a:	2a08      	cmp	r2, #8
 800e92c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800e930:	dc14      	bgt.n	800e95c <__ieee754_rem_pio2f+0x12c>
 800e932:	6021      	str	r1, [r4, #0]
 800e934:	ed94 7a00 	vldr	s14, [r4]
 800e938:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e93c:	2e00      	cmp	r6, #0
 800e93e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e942:	ed84 0a01 	vstr	s0, [r4, #4]
 800e946:	daa6      	bge.n	800e896 <__ieee754_rem_pio2f+0x66>
 800e948:	eeb1 7a47 	vneg.f32	s14, s14
 800e94c:	eeb1 0a40 	vneg.f32	s0, s0
 800e950:	ed84 7a00 	vstr	s14, [r4]
 800e954:	ed84 0a01 	vstr	s0, [r4, #4]
 800e958:	4240      	negs	r0, r0
 800e95a:	e79c      	b.n	800e896 <__ieee754_rem_pio2f+0x66>
 800e95c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800ea68 <__ieee754_rem_pio2f+0x238>
 800e960:	eef0 6a40 	vmov.f32	s13, s0
 800e964:	eee6 6a25 	vfma.f32	s13, s12, s11
 800e968:	ee70 7a66 	vsub.f32	s15, s0, s13
 800e96c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e970:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800ea70 <__ieee754_rem_pio2f+0x240>
 800e974:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800e978:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800e97c:	ee15 2a90 	vmov	r2, s11
 800e980:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e984:	1a5b      	subs	r3, r3, r1
 800e986:	2b19      	cmp	r3, #25
 800e988:	dc04      	bgt.n	800e994 <__ieee754_rem_pio2f+0x164>
 800e98a:	edc4 5a00 	vstr	s11, [r4]
 800e98e:	eeb0 0a66 	vmov.f32	s0, s13
 800e992:	e7cf      	b.n	800e934 <__ieee754_rem_pio2f+0x104>
 800e994:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800ea80 <__ieee754_rem_pio2f+0x250>
 800e998:	eeb0 0a66 	vmov.f32	s0, s13
 800e99c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e9a0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e9a4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800ea84 <__ieee754_rem_pio2f+0x254>
 800e9a8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e9ac:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e9b0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e9b4:	ed84 7a00 	vstr	s14, [r4]
 800e9b8:	e7bc      	b.n	800e934 <__ieee754_rem_pio2f+0x104>
 800e9ba:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800e9be:	d306      	bcc.n	800e9ce <__ieee754_rem_pio2f+0x19e>
 800e9c0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e9c4:	edc0 7a01 	vstr	s15, [r0, #4]
 800e9c8:	edc0 7a00 	vstr	s15, [r0]
 800e9cc:	e73e      	b.n	800e84c <__ieee754_rem_pio2f+0x1c>
 800e9ce:	15ea      	asrs	r2, r5, #23
 800e9d0:	3a86      	subs	r2, #134	@ 0x86
 800e9d2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e9d6:	ee07 3a90 	vmov	s15, r3
 800e9da:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e9de:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800ea88 <__ieee754_rem_pio2f+0x258>
 800e9e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e9e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e9ea:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e9ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e9f2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e9f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e9fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e9fe:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ea02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ea06:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ea0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea0e:	edcd 7a05 	vstr	s15, [sp, #20]
 800ea12:	d11e      	bne.n	800ea52 <__ieee754_rem_pio2f+0x222>
 800ea14:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ea18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea1c:	bf0c      	ite	eq
 800ea1e:	2301      	moveq	r3, #1
 800ea20:	2302      	movne	r3, #2
 800ea22:	491a      	ldr	r1, [pc, #104]	@ (800ea8c <__ieee754_rem_pio2f+0x25c>)
 800ea24:	9101      	str	r1, [sp, #4]
 800ea26:	2102      	movs	r1, #2
 800ea28:	9100      	str	r1, [sp, #0]
 800ea2a:	a803      	add	r0, sp, #12
 800ea2c:	4621      	mov	r1, r4
 800ea2e:	f000 f90b 	bl	800ec48 <__kernel_rem_pio2f>
 800ea32:	2e00      	cmp	r6, #0
 800ea34:	f6bf af2f 	bge.w	800e896 <__ieee754_rem_pio2f+0x66>
 800ea38:	edd4 7a00 	vldr	s15, [r4]
 800ea3c:	eef1 7a67 	vneg.f32	s15, s15
 800ea40:	edc4 7a00 	vstr	s15, [r4]
 800ea44:	edd4 7a01 	vldr	s15, [r4, #4]
 800ea48:	eef1 7a67 	vneg.f32	s15, s15
 800ea4c:	edc4 7a01 	vstr	s15, [r4, #4]
 800ea50:	e782      	b.n	800e958 <__ieee754_rem_pio2f+0x128>
 800ea52:	2303      	movs	r3, #3
 800ea54:	e7e5      	b.n	800ea22 <__ieee754_rem_pio2f+0x1f2>
 800ea56:	bf00      	nop
 800ea58:	3f490fd8 	.word	0x3f490fd8
 800ea5c:	4016cbe3 	.word	0x4016cbe3
 800ea60:	3fc90f80 	.word	0x3fc90f80
 800ea64:	3fc90fd0 	.word	0x3fc90fd0
 800ea68:	37354400 	.word	0x37354400
 800ea6c:	37354443 	.word	0x37354443
 800ea70:	2e85a308 	.word	0x2e85a308
 800ea74:	43490f80 	.word	0x43490f80
 800ea78:	3f22f984 	.word	0x3f22f984
 800ea7c:	0800ffec 	.word	0x0800ffec
 800ea80:	2e85a300 	.word	0x2e85a300
 800ea84:	248d3132 	.word	0x248d3132
 800ea88:	43800000 	.word	0x43800000
 800ea8c:	0801006c 	.word	0x0801006c

0800ea90 <atanf>:
 800ea90:	b538      	push	{r3, r4, r5, lr}
 800ea92:	ee10 5a10 	vmov	r5, s0
 800ea96:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800ea9a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800ea9e:	eef0 7a40 	vmov.f32	s15, s0
 800eaa2:	d310      	bcc.n	800eac6 <atanf+0x36>
 800eaa4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800eaa8:	d904      	bls.n	800eab4 <atanf+0x24>
 800eaaa:	ee70 7a00 	vadd.f32	s15, s0, s0
 800eaae:	eeb0 0a67 	vmov.f32	s0, s15
 800eab2:	bd38      	pop	{r3, r4, r5, pc}
 800eab4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800ebec <atanf+0x15c>
 800eab8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800ebf0 <atanf+0x160>
 800eabc:	2d00      	cmp	r5, #0
 800eabe:	bfc8      	it	gt
 800eac0:	eef0 7a47 	vmovgt.f32	s15, s14
 800eac4:	e7f3      	b.n	800eaae <atanf+0x1e>
 800eac6:	4b4b      	ldr	r3, [pc, #300]	@ (800ebf4 <atanf+0x164>)
 800eac8:	429c      	cmp	r4, r3
 800eaca:	d810      	bhi.n	800eaee <atanf+0x5e>
 800eacc:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800ead0:	d20a      	bcs.n	800eae8 <atanf+0x58>
 800ead2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800ebf8 <atanf+0x168>
 800ead6:	ee30 7a07 	vadd.f32	s14, s0, s14
 800eada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eade:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800eae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eae6:	dce2      	bgt.n	800eaae <atanf+0x1e>
 800eae8:	f04f 33ff 	mov.w	r3, #4294967295
 800eaec:	e013      	b.n	800eb16 <atanf+0x86>
 800eaee:	f000 f8a3 	bl	800ec38 <fabsf>
 800eaf2:	4b42      	ldr	r3, [pc, #264]	@ (800ebfc <atanf+0x16c>)
 800eaf4:	429c      	cmp	r4, r3
 800eaf6:	d84f      	bhi.n	800eb98 <atanf+0x108>
 800eaf8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800eafc:	429c      	cmp	r4, r3
 800eafe:	d841      	bhi.n	800eb84 <atanf+0xf4>
 800eb00:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800eb04:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800eb08:	eea0 7a27 	vfma.f32	s14, s0, s15
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eb12:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800eb16:	1c5a      	adds	r2, r3, #1
 800eb18:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800eb1c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800ec00 <atanf+0x170>
 800eb20:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800ec04 <atanf+0x174>
 800eb24:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800ec08 <atanf+0x178>
 800eb28:	ee66 6a06 	vmul.f32	s13, s12, s12
 800eb2c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800eb30:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800ec0c <atanf+0x17c>
 800eb34:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800eb38:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800ec10 <atanf+0x180>
 800eb3c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800eb40:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ec14 <atanf+0x184>
 800eb44:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800eb48:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ec18 <atanf+0x188>
 800eb4c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800eb50:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800ec1c <atanf+0x18c>
 800eb54:	eea6 5a87 	vfma.f32	s10, s13, s14
 800eb58:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ec20 <atanf+0x190>
 800eb5c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800eb60:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800ec24 <atanf+0x194>
 800eb64:	eea7 5a26 	vfma.f32	s10, s14, s13
 800eb68:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800ec28 <atanf+0x198>
 800eb6c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800eb70:	ee27 7a26 	vmul.f32	s14, s14, s13
 800eb74:	eea5 7a86 	vfma.f32	s14, s11, s12
 800eb78:	ee27 7a87 	vmul.f32	s14, s15, s14
 800eb7c:	d121      	bne.n	800ebc2 <atanf+0x132>
 800eb7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eb82:	e794      	b.n	800eaae <atanf+0x1e>
 800eb84:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800eb88:	ee30 7a67 	vsub.f32	s14, s0, s15
 800eb8c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eb90:	2301      	movs	r3, #1
 800eb92:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800eb96:	e7be      	b.n	800eb16 <atanf+0x86>
 800eb98:	4b24      	ldr	r3, [pc, #144]	@ (800ec2c <atanf+0x19c>)
 800eb9a:	429c      	cmp	r4, r3
 800eb9c:	d80b      	bhi.n	800ebb6 <atanf+0x126>
 800eb9e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800eba2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eba6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ebaa:	2302      	movs	r3, #2
 800ebac:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ebb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ebb4:	e7af      	b.n	800eb16 <atanf+0x86>
 800ebb6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ebba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ebbe:	2303      	movs	r3, #3
 800ebc0:	e7a9      	b.n	800eb16 <atanf+0x86>
 800ebc2:	4a1b      	ldr	r2, [pc, #108]	@ (800ec30 <atanf+0x1a0>)
 800ebc4:	491b      	ldr	r1, [pc, #108]	@ (800ec34 <atanf+0x1a4>)
 800ebc6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ebca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ebce:	edd3 6a00 	vldr	s13, [r3]
 800ebd2:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ebd6:	2d00      	cmp	r5, #0
 800ebd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ebdc:	edd2 7a00 	vldr	s15, [r2]
 800ebe0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ebe4:	bfb8      	it	lt
 800ebe6:	eef1 7a67 	vneglt.f32	s15, s15
 800ebea:	e760      	b.n	800eaae <atanf+0x1e>
 800ebec:	bfc90fdb 	.word	0xbfc90fdb
 800ebf0:	3fc90fdb 	.word	0x3fc90fdb
 800ebf4:	3edfffff 	.word	0x3edfffff
 800ebf8:	7149f2ca 	.word	0x7149f2ca
 800ebfc:	3f97ffff 	.word	0x3f97ffff
 800ec00:	3c8569d7 	.word	0x3c8569d7
 800ec04:	3d4bda59 	.word	0x3d4bda59
 800ec08:	bd6ef16b 	.word	0xbd6ef16b
 800ec0c:	3d886b35 	.word	0x3d886b35
 800ec10:	3dba2e6e 	.word	0x3dba2e6e
 800ec14:	3e124925 	.word	0x3e124925
 800ec18:	3eaaaaab 	.word	0x3eaaaaab
 800ec1c:	bd15a221 	.word	0xbd15a221
 800ec20:	bd9d8795 	.word	0xbd9d8795
 800ec24:	bde38e38 	.word	0xbde38e38
 800ec28:	be4ccccd 	.word	0xbe4ccccd
 800ec2c:	401bffff 	.word	0x401bffff
 800ec30:	08010394 	.word	0x08010394
 800ec34:	08010384 	.word	0x08010384

0800ec38 <fabsf>:
 800ec38:	ee10 3a10 	vmov	r3, s0
 800ec3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ec40:	ee00 3a10 	vmov	s0, r3
 800ec44:	4770      	bx	lr
	...

0800ec48 <__kernel_rem_pio2f>:
 800ec48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec4c:	ed2d 8b04 	vpush	{d8-d9}
 800ec50:	b0d9      	sub	sp, #356	@ 0x164
 800ec52:	4690      	mov	r8, r2
 800ec54:	9001      	str	r0, [sp, #4]
 800ec56:	4ab6      	ldr	r2, [pc, #728]	@ (800ef30 <__kernel_rem_pio2f+0x2e8>)
 800ec58:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800ec5a:	f118 0f04 	cmn.w	r8, #4
 800ec5e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800ec62:	460f      	mov	r7, r1
 800ec64:	f103 3bff 	add.w	fp, r3, #4294967295
 800ec68:	db26      	blt.n	800ecb8 <__kernel_rem_pio2f+0x70>
 800ec6a:	f1b8 0203 	subs.w	r2, r8, #3
 800ec6e:	bf48      	it	mi
 800ec70:	f108 0204 	addmi.w	r2, r8, #4
 800ec74:	10d2      	asrs	r2, r2, #3
 800ec76:	1c55      	adds	r5, r2, #1
 800ec78:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800ec7a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800ef40 <__kernel_rem_pio2f+0x2f8>
 800ec7e:	00e8      	lsls	r0, r5, #3
 800ec80:	eba2 060b 	sub.w	r6, r2, fp
 800ec84:	9002      	str	r0, [sp, #8]
 800ec86:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800ec8a:	eb0a 0c0b 	add.w	ip, sl, fp
 800ec8e:	ac1c      	add	r4, sp, #112	@ 0x70
 800ec90:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800ec94:	2000      	movs	r0, #0
 800ec96:	4560      	cmp	r0, ip
 800ec98:	dd10      	ble.n	800ecbc <__kernel_rem_pio2f+0x74>
 800ec9a:	a91c      	add	r1, sp, #112	@ 0x70
 800ec9c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800eca0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800eca4:	2600      	movs	r6, #0
 800eca6:	4556      	cmp	r6, sl
 800eca8:	dc24      	bgt.n	800ecf4 <__kernel_rem_pio2f+0xac>
 800ecaa:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ecae:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800ef40 <__kernel_rem_pio2f+0x2f8>
 800ecb2:	4684      	mov	ip, r0
 800ecb4:	2400      	movs	r4, #0
 800ecb6:	e016      	b.n	800ece6 <__kernel_rem_pio2f+0x9e>
 800ecb8:	2200      	movs	r2, #0
 800ecba:	e7dc      	b.n	800ec76 <__kernel_rem_pio2f+0x2e>
 800ecbc:	42c6      	cmn	r6, r0
 800ecbe:	bf5d      	ittte	pl
 800ecc0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800ecc4:	ee07 1a90 	vmovpl	s15, r1
 800ecc8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800eccc:	eef0 7a47 	vmovmi.f32	s15, s14
 800ecd0:	ece4 7a01 	vstmia	r4!, {s15}
 800ecd4:	3001      	adds	r0, #1
 800ecd6:	e7de      	b.n	800ec96 <__kernel_rem_pio2f+0x4e>
 800ecd8:	ecfe 6a01 	vldmia	lr!, {s13}
 800ecdc:	ed3c 7a01 	vldmdb	ip!, {s14}
 800ece0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ece4:	3401      	adds	r4, #1
 800ece6:	455c      	cmp	r4, fp
 800ece8:	ddf6      	ble.n	800ecd8 <__kernel_rem_pio2f+0x90>
 800ecea:	ece9 7a01 	vstmia	r9!, {s15}
 800ecee:	3601      	adds	r6, #1
 800ecf0:	3004      	adds	r0, #4
 800ecf2:	e7d8      	b.n	800eca6 <__kernel_rem_pio2f+0x5e>
 800ecf4:	a908      	add	r1, sp, #32
 800ecf6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ecfa:	9104      	str	r1, [sp, #16]
 800ecfc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800ecfe:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800ef3c <__kernel_rem_pio2f+0x2f4>
 800ed02:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800ef38 <__kernel_rem_pio2f+0x2f0>
 800ed06:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ed0a:	9203      	str	r2, [sp, #12]
 800ed0c:	4654      	mov	r4, sl
 800ed0e:	00a2      	lsls	r2, r4, #2
 800ed10:	9205      	str	r2, [sp, #20]
 800ed12:	aa58      	add	r2, sp, #352	@ 0x160
 800ed14:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800ed18:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800ed1c:	a944      	add	r1, sp, #272	@ 0x110
 800ed1e:	aa08      	add	r2, sp, #32
 800ed20:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800ed24:	4694      	mov	ip, r2
 800ed26:	4626      	mov	r6, r4
 800ed28:	2e00      	cmp	r6, #0
 800ed2a:	dc4c      	bgt.n	800edc6 <__kernel_rem_pio2f+0x17e>
 800ed2c:	4628      	mov	r0, r5
 800ed2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ed32:	f000 f9f1 	bl	800f118 <scalbnf>
 800ed36:	eeb0 8a40 	vmov.f32	s16, s0
 800ed3a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800ed3e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ed42:	f000 fa4f 	bl	800f1e4 <floorf>
 800ed46:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800ed4a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ed4e:	2d00      	cmp	r5, #0
 800ed50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ed54:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ed58:	ee17 9a90 	vmov	r9, s15
 800ed5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed60:	ee38 8a67 	vsub.f32	s16, s16, s15
 800ed64:	dd41      	ble.n	800edea <__kernel_rem_pio2f+0x1a2>
 800ed66:	f104 3cff 	add.w	ip, r4, #4294967295
 800ed6a:	a908      	add	r1, sp, #32
 800ed6c:	f1c5 0e08 	rsb	lr, r5, #8
 800ed70:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800ed74:	fa46 f00e 	asr.w	r0, r6, lr
 800ed78:	4481      	add	r9, r0
 800ed7a:	fa00 f00e 	lsl.w	r0, r0, lr
 800ed7e:	1a36      	subs	r6, r6, r0
 800ed80:	f1c5 0007 	rsb	r0, r5, #7
 800ed84:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800ed88:	4106      	asrs	r6, r0
 800ed8a:	2e00      	cmp	r6, #0
 800ed8c:	dd3c      	ble.n	800ee08 <__kernel_rem_pio2f+0x1c0>
 800ed8e:	f04f 0e00 	mov.w	lr, #0
 800ed92:	f109 0901 	add.w	r9, r9, #1
 800ed96:	4670      	mov	r0, lr
 800ed98:	4574      	cmp	r4, lr
 800ed9a:	dc68      	bgt.n	800ee6e <__kernel_rem_pio2f+0x226>
 800ed9c:	2d00      	cmp	r5, #0
 800ed9e:	dd03      	ble.n	800eda8 <__kernel_rem_pio2f+0x160>
 800eda0:	2d01      	cmp	r5, #1
 800eda2:	d074      	beq.n	800ee8e <__kernel_rem_pio2f+0x246>
 800eda4:	2d02      	cmp	r5, #2
 800eda6:	d07d      	beq.n	800eea4 <__kernel_rem_pio2f+0x25c>
 800eda8:	2e02      	cmp	r6, #2
 800edaa:	d12d      	bne.n	800ee08 <__kernel_rem_pio2f+0x1c0>
 800edac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800edb0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800edb4:	b340      	cbz	r0, 800ee08 <__kernel_rem_pio2f+0x1c0>
 800edb6:	4628      	mov	r0, r5
 800edb8:	9306      	str	r3, [sp, #24]
 800edba:	f000 f9ad 	bl	800f118 <scalbnf>
 800edbe:	9b06      	ldr	r3, [sp, #24]
 800edc0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800edc4:	e020      	b.n	800ee08 <__kernel_rem_pio2f+0x1c0>
 800edc6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800edca:	3e01      	subs	r6, #1
 800edcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800edd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800edd4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800edd8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800eddc:	ecac 0a01 	vstmia	ip!, {s0}
 800ede0:	ed30 0a01 	vldmdb	r0!, {s0}
 800ede4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ede8:	e79e      	b.n	800ed28 <__kernel_rem_pio2f+0xe0>
 800edea:	d105      	bne.n	800edf8 <__kernel_rem_pio2f+0x1b0>
 800edec:	1e60      	subs	r0, r4, #1
 800edee:	a908      	add	r1, sp, #32
 800edf0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800edf4:	11f6      	asrs	r6, r6, #7
 800edf6:	e7c8      	b.n	800ed8a <__kernel_rem_pio2f+0x142>
 800edf8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800edfc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ee00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee04:	da31      	bge.n	800ee6a <__kernel_rem_pio2f+0x222>
 800ee06:	2600      	movs	r6, #0
 800ee08:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ee0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee10:	f040 8098 	bne.w	800ef44 <__kernel_rem_pio2f+0x2fc>
 800ee14:	1e60      	subs	r0, r4, #1
 800ee16:	2200      	movs	r2, #0
 800ee18:	4550      	cmp	r0, sl
 800ee1a:	da4b      	bge.n	800eeb4 <__kernel_rem_pio2f+0x26c>
 800ee1c:	2a00      	cmp	r2, #0
 800ee1e:	d065      	beq.n	800eeec <__kernel_rem_pio2f+0x2a4>
 800ee20:	3c01      	subs	r4, #1
 800ee22:	ab08      	add	r3, sp, #32
 800ee24:	3d08      	subs	r5, #8
 800ee26:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d0f8      	beq.n	800ee20 <__kernel_rem_pio2f+0x1d8>
 800ee2e:	4628      	mov	r0, r5
 800ee30:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ee34:	f000 f970 	bl	800f118 <scalbnf>
 800ee38:	1c63      	adds	r3, r4, #1
 800ee3a:	aa44      	add	r2, sp, #272	@ 0x110
 800ee3c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800ef3c <__kernel_rem_pio2f+0x2f4>
 800ee40:	0099      	lsls	r1, r3, #2
 800ee42:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ee46:	4623      	mov	r3, r4
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	f280 80a9 	bge.w	800efa0 <__kernel_rem_pio2f+0x358>
 800ee4e:	4623      	mov	r3, r4
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	f2c0 80c7 	blt.w	800efe4 <__kernel_rem_pio2f+0x39c>
 800ee56:	aa44      	add	r2, sp, #272	@ 0x110
 800ee58:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800ee5c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800ef34 <__kernel_rem_pio2f+0x2ec>
 800ee60:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800ef40 <__kernel_rem_pio2f+0x2f8>
 800ee64:	2000      	movs	r0, #0
 800ee66:	1ae2      	subs	r2, r4, r3
 800ee68:	e0b1      	b.n	800efce <__kernel_rem_pio2f+0x386>
 800ee6a:	2602      	movs	r6, #2
 800ee6c:	e78f      	b.n	800ed8e <__kernel_rem_pio2f+0x146>
 800ee6e:	f852 1b04 	ldr.w	r1, [r2], #4
 800ee72:	b948      	cbnz	r0, 800ee88 <__kernel_rem_pio2f+0x240>
 800ee74:	b121      	cbz	r1, 800ee80 <__kernel_rem_pio2f+0x238>
 800ee76:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800ee7a:	f842 1c04 	str.w	r1, [r2, #-4]
 800ee7e:	2101      	movs	r1, #1
 800ee80:	f10e 0e01 	add.w	lr, lr, #1
 800ee84:	4608      	mov	r0, r1
 800ee86:	e787      	b.n	800ed98 <__kernel_rem_pio2f+0x150>
 800ee88:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800ee8c:	e7f5      	b.n	800ee7a <__kernel_rem_pio2f+0x232>
 800ee8e:	f104 3cff 	add.w	ip, r4, #4294967295
 800ee92:	aa08      	add	r2, sp, #32
 800ee94:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ee98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ee9c:	a908      	add	r1, sp, #32
 800ee9e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800eea2:	e781      	b.n	800eda8 <__kernel_rem_pio2f+0x160>
 800eea4:	f104 3cff 	add.w	ip, r4, #4294967295
 800eea8:	aa08      	add	r2, sp, #32
 800eeaa:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800eeae:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800eeb2:	e7f3      	b.n	800ee9c <__kernel_rem_pio2f+0x254>
 800eeb4:	a908      	add	r1, sp, #32
 800eeb6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800eeba:	3801      	subs	r0, #1
 800eebc:	430a      	orrs	r2, r1
 800eebe:	e7ab      	b.n	800ee18 <__kernel_rem_pio2f+0x1d0>
 800eec0:	3201      	adds	r2, #1
 800eec2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800eec6:	2e00      	cmp	r6, #0
 800eec8:	d0fa      	beq.n	800eec0 <__kernel_rem_pio2f+0x278>
 800eeca:	9905      	ldr	r1, [sp, #20]
 800eecc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800eed0:	eb0d 0001 	add.w	r0, sp, r1
 800eed4:	18e6      	adds	r6, r4, r3
 800eed6:	a91c      	add	r1, sp, #112	@ 0x70
 800eed8:	f104 0c01 	add.w	ip, r4, #1
 800eedc:	384c      	subs	r0, #76	@ 0x4c
 800eede:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800eee2:	4422      	add	r2, r4
 800eee4:	4562      	cmp	r2, ip
 800eee6:	da04      	bge.n	800eef2 <__kernel_rem_pio2f+0x2aa>
 800eee8:	4614      	mov	r4, r2
 800eeea:	e710      	b.n	800ed0e <__kernel_rem_pio2f+0xc6>
 800eeec:	9804      	ldr	r0, [sp, #16]
 800eeee:	2201      	movs	r2, #1
 800eef0:	e7e7      	b.n	800eec2 <__kernel_rem_pio2f+0x27a>
 800eef2:	9903      	ldr	r1, [sp, #12]
 800eef4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800eef8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800eefc:	9105      	str	r1, [sp, #20]
 800eefe:	ee07 1a90 	vmov	s15, r1
 800ef02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef06:	2400      	movs	r4, #0
 800ef08:	ece6 7a01 	vstmia	r6!, {s15}
 800ef0c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800ef40 <__kernel_rem_pio2f+0x2f8>
 800ef10:	46b1      	mov	r9, r6
 800ef12:	455c      	cmp	r4, fp
 800ef14:	dd04      	ble.n	800ef20 <__kernel_rem_pio2f+0x2d8>
 800ef16:	ece0 7a01 	vstmia	r0!, {s15}
 800ef1a:	f10c 0c01 	add.w	ip, ip, #1
 800ef1e:	e7e1      	b.n	800eee4 <__kernel_rem_pio2f+0x29c>
 800ef20:	ecfe 6a01 	vldmia	lr!, {s13}
 800ef24:	ed39 7a01 	vldmdb	r9!, {s14}
 800ef28:	3401      	adds	r4, #1
 800ef2a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ef2e:	e7f0      	b.n	800ef12 <__kernel_rem_pio2f+0x2ca>
 800ef30:	080103d0 	.word	0x080103d0
 800ef34:	080103a4 	.word	0x080103a4
 800ef38:	43800000 	.word	0x43800000
 800ef3c:	3b800000 	.word	0x3b800000
 800ef40:	00000000 	.word	0x00000000
 800ef44:	9b02      	ldr	r3, [sp, #8]
 800ef46:	eeb0 0a48 	vmov.f32	s0, s16
 800ef4a:	eba3 0008 	sub.w	r0, r3, r8
 800ef4e:	f000 f8e3 	bl	800f118 <scalbnf>
 800ef52:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800ef38 <__kernel_rem_pio2f+0x2f0>
 800ef56:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ef5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef5e:	db19      	blt.n	800ef94 <__kernel_rem_pio2f+0x34c>
 800ef60:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800ef3c <__kernel_rem_pio2f+0x2f4>
 800ef64:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ef68:	aa08      	add	r2, sp, #32
 800ef6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef6e:	3508      	adds	r5, #8
 800ef70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef74:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ef78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef7c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ef80:	ee10 3a10 	vmov	r3, s0
 800ef84:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ef88:	ee17 3a90 	vmov	r3, s15
 800ef8c:	3401      	adds	r4, #1
 800ef8e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ef92:	e74c      	b.n	800ee2e <__kernel_rem_pio2f+0x1e6>
 800ef94:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ef98:	aa08      	add	r2, sp, #32
 800ef9a:	ee10 3a10 	vmov	r3, s0
 800ef9e:	e7f6      	b.n	800ef8e <__kernel_rem_pio2f+0x346>
 800efa0:	a808      	add	r0, sp, #32
 800efa2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800efa6:	9001      	str	r0, [sp, #4]
 800efa8:	ee07 0a90 	vmov	s15, r0
 800efac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efb0:	3b01      	subs	r3, #1
 800efb2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800efb6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800efba:	ed62 7a01 	vstmdb	r2!, {s15}
 800efbe:	e743      	b.n	800ee48 <__kernel_rem_pio2f+0x200>
 800efc0:	ecfc 6a01 	vldmia	ip!, {s13}
 800efc4:	ecb5 7a01 	vldmia	r5!, {s14}
 800efc8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800efcc:	3001      	adds	r0, #1
 800efce:	4550      	cmp	r0, sl
 800efd0:	dc01      	bgt.n	800efd6 <__kernel_rem_pio2f+0x38e>
 800efd2:	4290      	cmp	r0, r2
 800efd4:	ddf4      	ble.n	800efc0 <__kernel_rem_pio2f+0x378>
 800efd6:	a858      	add	r0, sp, #352	@ 0x160
 800efd8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800efdc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800efe0:	3b01      	subs	r3, #1
 800efe2:	e735      	b.n	800ee50 <__kernel_rem_pio2f+0x208>
 800efe4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800efe6:	2b02      	cmp	r3, #2
 800efe8:	dc09      	bgt.n	800effe <__kernel_rem_pio2f+0x3b6>
 800efea:	2b00      	cmp	r3, #0
 800efec:	dc27      	bgt.n	800f03e <__kernel_rem_pio2f+0x3f6>
 800efee:	d040      	beq.n	800f072 <__kernel_rem_pio2f+0x42a>
 800eff0:	f009 0007 	and.w	r0, r9, #7
 800eff4:	b059      	add	sp, #356	@ 0x164
 800eff6:	ecbd 8b04 	vpop	{d8-d9}
 800effa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800effe:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800f000:	2b03      	cmp	r3, #3
 800f002:	d1f5      	bne.n	800eff0 <__kernel_rem_pio2f+0x3a8>
 800f004:	aa30      	add	r2, sp, #192	@ 0xc0
 800f006:	1f0b      	subs	r3, r1, #4
 800f008:	4413      	add	r3, r2
 800f00a:	461a      	mov	r2, r3
 800f00c:	4620      	mov	r0, r4
 800f00e:	2800      	cmp	r0, #0
 800f010:	dc50      	bgt.n	800f0b4 <__kernel_rem_pio2f+0x46c>
 800f012:	4622      	mov	r2, r4
 800f014:	2a01      	cmp	r2, #1
 800f016:	dc5d      	bgt.n	800f0d4 <__kernel_rem_pio2f+0x48c>
 800f018:	ab30      	add	r3, sp, #192	@ 0xc0
 800f01a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800ef40 <__kernel_rem_pio2f+0x2f8>
 800f01e:	440b      	add	r3, r1
 800f020:	2c01      	cmp	r4, #1
 800f022:	dc67      	bgt.n	800f0f4 <__kernel_rem_pio2f+0x4ac>
 800f024:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800f028:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800f02c:	2e00      	cmp	r6, #0
 800f02e:	d167      	bne.n	800f100 <__kernel_rem_pio2f+0x4b8>
 800f030:	edc7 6a00 	vstr	s13, [r7]
 800f034:	ed87 7a01 	vstr	s14, [r7, #4]
 800f038:	edc7 7a02 	vstr	s15, [r7, #8]
 800f03c:	e7d8      	b.n	800eff0 <__kernel_rem_pio2f+0x3a8>
 800f03e:	ab30      	add	r3, sp, #192	@ 0xc0
 800f040:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800ef40 <__kernel_rem_pio2f+0x2f8>
 800f044:	440b      	add	r3, r1
 800f046:	4622      	mov	r2, r4
 800f048:	2a00      	cmp	r2, #0
 800f04a:	da24      	bge.n	800f096 <__kernel_rem_pio2f+0x44e>
 800f04c:	b34e      	cbz	r6, 800f0a2 <__kernel_rem_pio2f+0x45a>
 800f04e:	eef1 7a47 	vneg.f32	s15, s14
 800f052:	edc7 7a00 	vstr	s15, [r7]
 800f056:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800f05a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f05e:	aa31      	add	r2, sp, #196	@ 0xc4
 800f060:	2301      	movs	r3, #1
 800f062:	429c      	cmp	r4, r3
 800f064:	da20      	bge.n	800f0a8 <__kernel_rem_pio2f+0x460>
 800f066:	b10e      	cbz	r6, 800f06c <__kernel_rem_pio2f+0x424>
 800f068:	eef1 7a67 	vneg.f32	s15, s15
 800f06c:	edc7 7a01 	vstr	s15, [r7, #4]
 800f070:	e7be      	b.n	800eff0 <__kernel_rem_pio2f+0x3a8>
 800f072:	ab30      	add	r3, sp, #192	@ 0xc0
 800f074:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800ef40 <__kernel_rem_pio2f+0x2f8>
 800f078:	440b      	add	r3, r1
 800f07a:	2c00      	cmp	r4, #0
 800f07c:	da05      	bge.n	800f08a <__kernel_rem_pio2f+0x442>
 800f07e:	b10e      	cbz	r6, 800f084 <__kernel_rem_pio2f+0x43c>
 800f080:	eef1 7a67 	vneg.f32	s15, s15
 800f084:	edc7 7a00 	vstr	s15, [r7]
 800f088:	e7b2      	b.n	800eff0 <__kernel_rem_pio2f+0x3a8>
 800f08a:	ed33 7a01 	vldmdb	r3!, {s14}
 800f08e:	3c01      	subs	r4, #1
 800f090:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f094:	e7f1      	b.n	800f07a <__kernel_rem_pio2f+0x432>
 800f096:	ed73 7a01 	vldmdb	r3!, {s15}
 800f09a:	3a01      	subs	r2, #1
 800f09c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f0a0:	e7d2      	b.n	800f048 <__kernel_rem_pio2f+0x400>
 800f0a2:	eef0 7a47 	vmov.f32	s15, s14
 800f0a6:	e7d4      	b.n	800f052 <__kernel_rem_pio2f+0x40a>
 800f0a8:	ecb2 7a01 	vldmia	r2!, {s14}
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f0b2:	e7d6      	b.n	800f062 <__kernel_rem_pio2f+0x41a>
 800f0b4:	ed72 7a01 	vldmdb	r2!, {s15}
 800f0b8:	edd2 6a01 	vldr	s13, [r2, #4]
 800f0bc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f0c0:	3801      	subs	r0, #1
 800f0c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f0c6:	ed82 7a00 	vstr	s14, [r2]
 800f0ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f0ce:	edc2 7a01 	vstr	s15, [r2, #4]
 800f0d2:	e79c      	b.n	800f00e <__kernel_rem_pio2f+0x3c6>
 800f0d4:	ed73 7a01 	vldmdb	r3!, {s15}
 800f0d8:	edd3 6a01 	vldr	s13, [r3, #4]
 800f0dc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f0e0:	3a01      	subs	r2, #1
 800f0e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f0e6:	ed83 7a00 	vstr	s14, [r3]
 800f0ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f0ee:	edc3 7a01 	vstr	s15, [r3, #4]
 800f0f2:	e78f      	b.n	800f014 <__kernel_rem_pio2f+0x3cc>
 800f0f4:	ed33 7a01 	vldmdb	r3!, {s14}
 800f0f8:	3c01      	subs	r4, #1
 800f0fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f0fe:	e78f      	b.n	800f020 <__kernel_rem_pio2f+0x3d8>
 800f100:	eef1 6a66 	vneg.f32	s13, s13
 800f104:	eeb1 7a47 	vneg.f32	s14, s14
 800f108:	edc7 6a00 	vstr	s13, [r7]
 800f10c:	ed87 7a01 	vstr	s14, [r7, #4]
 800f110:	eef1 7a67 	vneg.f32	s15, s15
 800f114:	e790      	b.n	800f038 <__kernel_rem_pio2f+0x3f0>
 800f116:	bf00      	nop

0800f118 <scalbnf>:
 800f118:	ee10 3a10 	vmov	r3, s0
 800f11c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f120:	d02b      	beq.n	800f17a <scalbnf+0x62>
 800f122:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800f126:	d302      	bcc.n	800f12e <scalbnf+0x16>
 800f128:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f12c:	4770      	bx	lr
 800f12e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f132:	d123      	bne.n	800f17c <scalbnf+0x64>
 800f134:	4b24      	ldr	r3, [pc, #144]	@ (800f1c8 <scalbnf+0xb0>)
 800f136:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800f1cc <scalbnf+0xb4>
 800f13a:	4298      	cmp	r0, r3
 800f13c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f140:	db17      	blt.n	800f172 <scalbnf+0x5a>
 800f142:	ee10 3a10 	vmov	r3, s0
 800f146:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f14a:	3a19      	subs	r2, #25
 800f14c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f150:	4288      	cmp	r0, r1
 800f152:	dd15      	ble.n	800f180 <scalbnf+0x68>
 800f154:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800f1d0 <scalbnf+0xb8>
 800f158:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800f1d4 <scalbnf+0xbc>
 800f15c:	ee10 3a10 	vmov	r3, s0
 800f160:	eeb0 7a67 	vmov.f32	s14, s15
 800f164:	2b00      	cmp	r3, #0
 800f166:	bfb8      	it	lt
 800f168:	eef0 7a66 	vmovlt.f32	s15, s13
 800f16c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f170:	4770      	bx	lr
 800f172:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f1d8 <scalbnf+0xc0>
 800f176:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f17a:	4770      	bx	lr
 800f17c:	0dd2      	lsrs	r2, r2, #23
 800f17e:	e7e5      	b.n	800f14c <scalbnf+0x34>
 800f180:	4410      	add	r0, r2
 800f182:	28fe      	cmp	r0, #254	@ 0xfe
 800f184:	dce6      	bgt.n	800f154 <scalbnf+0x3c>
 800f186:	2800      	cmp	r0, #0
 800f188:	dd06      	ble.n	800f198 <scalbnf+0x80>
 800f18a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f18e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f192:	ee00 3a10 	vmov	s0, r3
 800f196:	4770      	bx	lr
 800f198:	f110 0f16 	cmn.w	r0, #22
 800f19c:	da09      	bge.n	800f1b2 <scalbnf+0x9a>
 800f19e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800f1d8 <scalbnf+0xc0>
 800f1a2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800f1dc <scalbnf+0xc4>
 800f1a6:	ee10 3a10 	vmov	r3, s0
 800f1aa:	eeb0 7a67 	vmov.f32	s14, s15
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	e7d9      	b.n	800f166 <scalbnf+0x4e>
 800f1b2:	3019      	adds	r0, #25
 800f1b4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f1b8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f1bc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800f1e0 <scalbnf+0xc8>
 800f1c0:	ee07 3a90 	vmov	s15, r3
 800f1c4:	e7d7      	b.n	800f176 <scalbnf+0x5e>
 800f1c6:	bf00      	nop
 800f1c8:	ffff3cb0 	.word	0xffff3cb0
 800f1cc:	4c000000 	.word	0x4c000000
 800f1d0:	7149f2ca 	.word	0x7149f2ca
 800f1d4:	f149f2ca 	.word	0xf149f2ca
 800f1d8:	0da24260 	.word	0x0da24260
 800f1dc:	8da24260 	.word	0x8da24260
 800f1e0:	33000000 	.word	0x33000000

0800f1e4 <floorf>:
 800f1e4:	ee10 3a10 	vmov	r3, s0
 800f1e8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f1ec:	3a7f      	subs	r2, #127	@ 0x7f
 800f1ee:	2a16      	cmp	r2, #22
 800f1f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f1f4:	dc2b      	bgt.n	800f24e <floorf+0x6a>
 800f1f6:	2a00      	cmp	r2, #0
 800f1f8:	da12      	bge.n	800f220 <floorf+0x3c>
 800f1fa:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f260 <floorf+0x7c>
 800f1fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f202:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f20a:	dd06      	ble.n	800f21a <floorf+0x36>
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	da24      	bge.n	800f25a <floorf+0x76>
 800f210:	2900      	cmp	r1, #0
 800f212:	4b14      	ldr	r3, [pc, #80]	@ (800f264 <floorf+0x80>)
 800f214:	bf08      	it	eq
 800f216:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800f21a:	ee00 3a10 	vmov	s0, r3
 800f21e:	4770      	bx	lr
 800f220:	4911      	ldr	r1, [pc, #68]	@ (800f268 <floorf+0x84>)
 800f222:	4111      	asrs	r1, r2
 800f224:	420b      	tst	r3, r1
 800f226:	d0fa      	beq.n	800f21e <floorf+0x3a>
 800f228:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800f260 <floorf+0x7c>
 800f22c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f230:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f238:	ddef      	ble.n	800f21a <floorf+0x36>
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	bfbe      	ittt	lt
 800f23e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800f242:	fa40 f202 	asrlt.w	r2, r0, r2
 800f246:	189b      	addlt	r3, r3, r2
 800f248:	ea23 0301 	bic.w	r3, r3, r1
 800f24c:	e7e5      	b.n	800f21a <floorf+0x36>
 800f24e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800f252:	d3e4      	bcc.n	800f21e <floorf+0x3a>
 800f254:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f258:	4770      	bx	lr
 800f25a:	2300      	movs	r3, #0
 800f25c:	e7dd      	b.n	800f21a <floorf+0x36>
 800f25e:	bf00      	nop
 800f260:	7149f2ca 	.word	0x7149f2ca
 800f264:	bf800000 	.word	0xbf800000
 800f268:	007fffff 	.word	0x007fffff

0800f26c <_init>:
 800f26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f26e:	bf00      	nop
 800f270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f272:	bc08      	pop	{r3}
 800f274:	469e      	mov	lr, r3
 800f276:	4770      	bx	lr

0800f278 <_fini>:
 800f278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f27a:	bf00      	nop
 800f27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f27e:	bc08      	pop	{r3}
 800f280:	469e      	mov	lr, r3
 800f282:	4770      	bx	lr
